// Code generated by "goki generate ./..."; DO NOT EDIT.

package colors

import (
	"errors"
	"log"
	"strconv"
	"strings"

	"goki.dev/enums"
)

var _BlendTypesValues = []BlendTypes{0, 1, 2}

// BlendTypesN is the highest valid value
// for type BlendTypes, plus one.
const BlendTypesN BlendTypes = 3

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the enumgen command to generate them again.
func _BlendTypesNoOp() {
	var x [1]struct{}
	_ = x[HCT-(0)]
	_ = x[RGB-(1)]
	_ = x[CAM16-(2)]
}

var _BlendTypesNameToValueMap = map[string]BlendTypes{
	`HCT`:   0,
	`hct`:   0,
	`RGB`:   1,
	`rgb`:   1,
	`CAM16`: 2,
	`cam16`: 2,
}

var _BlendTypesDescMap = map[BlendTypes]string{
	0: `HCT uses hue, chroma, tone space and generally produces the best results`,
	1: `RGB uses raw RGB space and was used in v1 and is used in most other software, so to reproduce existing results, select this option.`,
	2: `CAM16 is an alternative colorspace, similar to HCT, but not quite as good.`,
}

var _BlendTypesMap = map[BlendTypes]string{
	0: `HCT`,
	1: `RGB`,
	2: `CAM16`,
}

// String returns the string representation
// of this BlendTypes value.
func (i BlendTypes) String() string {
	if str, ok := _BlendTypesMap[i]; ok {
		return str
	}
	return strconv.FormatInt(int64(i), 10)
}

// SetString sets the BlendTypes value from its
// string representation, and returns an
// error if the string is invalid.
func (i *BlendTypes) SetString(s string) error {
	if val, ok := _BlendTypesNameToValueMap[s]; ok {
		*i = val
		return nil
	}
	if val, ok := _BlendTypesNameToValueMap[strings.ToLower(s)]; ok {
		*i = val
		return nil
	}
	return errors.New(s + " is not a valid value for type BlendTypes")
}

// Int64 returns the BlendTypes value as an int64.
func (i BlendTypes) Int64() int64 {
	return int64(i)
}

// SetInt64 sets the BlendTypes value from an int64.
func (i *BlendTypes) SetInt64(in int64) {
	*i = BlendTypes(in)
}

// Desc returns the description of the BlendTypes value.
func (i BlendTypes) Desc() string {
	if str, ok := _BlendTypesDescMap[i]; ok {
		return str
	}
	return i.String()
}

// BlendTypesValues returns all possible values
// for the type BlendTypes.
func BlendTypesValues() []BlendTypes {
	return _BlendTypesValues
}

// Values returns all possible values
// for the type BlendTypes.
func (i BlendTypes) Values() []enums.Enum {
	res := make([]enums.Enum, len(_BlendTypesValues))
	for i, d := range _BlendTypesValues {
		res[i] = d
	}
	return res
}

// IsValid returns whether the value is a
// valid option for type BlendTypes.
func (i BlendTypes) IsValid() bool {
	_, ok := _BlendTypesMap[i]
	return ok
}

// MarshalText implements the [encoding.TextMarshaler] interface.
func (i BlendTypes) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the [encoding.TextUnmarshaler] interface.
func (i *BlendTypes) UnmarshalText(text []byte) error {
	if err := i.SetString(string(text)); err != nil {
		log.Println(err)
	}
	return nil
}
