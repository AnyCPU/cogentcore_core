// Code generated by "goki generate"; DO NOT EDIT.

package config

import (
	"errors"
	"strconv"
	"strings"

	"goki.dev/enums"
)

const _TypesName = "TypeAppTypeLibrary"

var _TypesIndex = [...]uint8{0, 7, 18}

const _TypesLowerName = "typeapptypelibrary"

// String returns the string representation
// of this Types value.
func (i Types) String() string {
	if i < 0 || i >= Types(len(_TypesIndex)-1) {
		return "Types(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _TypesName[_TypesIndex[i]:_TypesIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the enumgen command to generate them again.
func _TypesNoOp() {
	var x [1]struct{}
	_ = x[TypeApp-(0)]
	_ = x[TypeLibrary-(1)]
}

var _TypesValues = []Types{TypeApp, TypeLibrary}

// TypesN is the highest valid value
// for type Types, plus one.
const TypesN Types = 2

var _TypesNameToValueMap = map[string]Types{
	_TypesName[0:7]:       TypeApp,
	_TypesLowerName[0:7]:  TypeApp,
	_TypesName[7:18]:      TypeLibrary,
	_TypesLowerName[7:18]: TypeLibrary,
}

var _TypesNames = []string{
	_TypesName[0:7],
	_TypesName[7:18],
}

var _TypesDescMap = map[Types]string{
	0: _TypesDescs[0],
	1: _TypesDescs[1],
}

var _TypesDescs = []string{
	`TypeApp is an executable app`,
	`TypeLibrary is an importable library`,
}

// SetString sets the Types value from its
// string representation, and returns an
// error if the string is invalid.
func (i *Types) SetString(s string) error {
	if val, ok := _TypesNameToValueMap[s]; ok {
		*i = val
		return nil
	}

	if val, ok := _TypesNameToValueMap[strings.ToLower(s)]; ok {
		*i = val
		return nil
	}
	return errors.New(s + " does not belong to Types values")
}

// Int64 returns the Types value as an int64.
func (i Types) Int64() int64 {
	return int64(i)
}

// SetInt64 sets the Types value from an int64.
func (i *Types) SetInt64(in int64) {
	*i = Types(in)
}

// Desc returns the description of the Types value.
func (i Types) Desc() string {
	if str, ok := _TypesDescMap[i]; ok {
		return str
	}
	return i.String()
}

// TypesValues returns all possible values of
// the type Types. This slice will be in the
// same order as those returned by the Values,
// Strings, and Descs methods on Types.
func TypesValues() []Types {
	return _TypesValues
}

// Values returns all possible values of
// type Types. This slice will be in the
// same order as those returned by Strings and Descs.
func (i Types) Values() []enums.Enum {
	res := make([]enums.Enum, len(_TypesValues))
	for i, d := range _TypesValues {
		res[i] = d
	}
	return res
}

// Strings returns the string representations of
// all possible values of type Types.
// This slice will be in the same order as
// those returned by Values and Descs.
func (i Types) Strings() []string {
	return _TypesNames
}

// Descs returns the descriptions of all
// possible values of type Types.
// This slice will be in the same order as
// those returned by Values and Strings.
func (i Types) Descs() []string {
	return _TypesDescs
}

// IsValid returns whether the value is a
// valid option for type Types.
func (i Types) IsValid() bool {
	for _, v := range _TypesValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalText implements the [encoding.TextMarshaler] interface.
func (i Types) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the [encoding.TextUnmarshaler] interface.
func (i *Types) UnmarshalText(text []byte) error {
	return i.SetString(string(text))
}
