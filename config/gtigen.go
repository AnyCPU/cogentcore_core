// Code generated by "goki generate ./..."; DO NOT EDIT.

package config

import (
	"goki.dev/gti"
	"goki.dev/ordmap"
)

var _ = gti.AddType(&gti.Type{
	Name:      "goki.dev/goki/config.Config",
	ShortName: "config.Config",
	IDName:    "config",
	Doc:       "Config is the main config struct\nthat contains all of the configuration\noptions for the GoKi tool",
	Directives: gti.Directives{
		&gti.Directive{Tool: "gti", Directive: "add", Args: []string{}},
	},
	Fields: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"Name", &gti.Field{Name: "Name", Type: "string", Doc: "the name of the project", Directives: gti.Directives{}}},
		{"Desc", &gti.Field{Name: "Desc", Type: "string", Doc: "the description of the project", Directives: gti.Directives{}}},
		{"Version", &gti.Field{Name: "Version", Type: "string", Doc: "[def: v0.0.0]", Directives: gti.Directives{}}},
		{"Type", &gti.Field{Name: "Type", Type: "Types", Doc: "the type of the project (app/library)", Directives: gti.Directives{}}},
		{"Build", &gti.Field{Name: "Build", Type: "Build", Doc: "[view: add-fields]", Directives: gti.Directives{}}},
		{"Setup", &gti.Field{Name: "Setup", Type: "Setup", Doc: "[view: add-fields]", Directives: gti.Directives{}}},
		{"Log", &gti.Field{Name: "Log", Type: "Log", Doc: "[view: add-fields]", Directives: gti.Directives{}}},
		{"Release", &gti.Field{Name: "Release", Type: "Release", Doc: "[view: add-fields]", Directives: gti.Directives{}}},
		{"Generate", &gti.Field{Name: "Generate", Type: "Generate", Doc: "[view: add-fields]", Directives: gti.Directives{}}},
	}),
	Embeds:  ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{}),
	Methods: ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
})

var _ = gti.AddType(&gti.Type{
	Name:      "goki.dev/goki/config.Build",
	ShortName: "config.Build",
	IDName:    "build",
	Doc:       "",
	Directives: gti.Directives{
		&gti.Directive{Tool: "gti", Directive: "add", Args: []string{}},
	},
	Fields: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"Package", &gti.Field{Name: "Package", Type: "string", Doc: "[def: .]", Directives: gti.Directives{}}},
		{"Target", &gti.Field{Name: "Target", Type: "[]Platform", Doc: "the target platforms to build executables for", Directives: gti.Directives{}}},
		{"Output", &gti.Field{Name: "Output", Type: "string", Doc: "the output file name; if not specified, it depends on the package being built", Directives: gti.Directives{}}},
		{"ID", &gti.Field{Name: "ID", Type: "string", Doc: "the bundle / package ID to use for the app (required for mobile platforms and N/A otherwise); it is typically in the format com.org.app (eg: com.goki.widgets)", Directives: gti.Directives{}}},
		{"Debug", &gti.Field{Name: "Debug", Type: "bool", Doc: "whether to build/run the app in debug mode; this currently only works on mobile platforms", Directives: gti.Directives{}}},
		{"Rebuild", &gti.Field{Name: "Rebuild", Type: "bool", Doc: "force rebuilding of packages that are already up-to-date", Directives: gti.Directives{}}},
		{"Install", &gti.Field{Name: "Install", Type: "bool", Doc: "install the generated executable", Directives: gti.Directives{}}},
		{"PrintOnly", &gti.Field{Name: "PrintOnly", Type: "bool", Doc: "print the commands but do not run them", Directives: gti.Directives{}}},
		{"Print", &gti.Field{Name: "Print", Type: "bool", Doc: "print the commands", Directives: gti.Directives{}}},
		{"GCFlags", &gti.Field{Name: "GCFlags", Type: "[]string", Doc: "arguments to pass on each go tool compile invocation", Directives: gti.Directives{}}},
		{"LDFlags", &gti.Field{Name: "LDFlags", Type: "[]string", Doc: "arguments to pass on each go tool link invocation", Directives: gti.Directives{}}},
		{"Tags", &gti.Field{Name: "Tags", Type: "[]string", Doc: "a comma-separated list of additional build tags to consider satisfied during the build", Directives: gti.Directives{}}},
		{"Trimpath", &gti.Field{Name: "Trimpath", Type: "bool", Doc: "remove all file system paths from the resulting executable. Instead of absolute file system paths, the recorded file names will begin either a module path@version (when using modules), or a plain import path (when using the standard library, or GOPATH).", Directives: gti.Directives{}}},
		{"Work", &gti.Field{Name: "Work", Type: "bool", Doc: "print the name of the temporary work directory and do not delete it when exiting", Directives: gti.Directives{}}},
		{"IOSVersion", &gti.Field{Name: "IOSVersion", Type: "string", Doc: "[def: 13.0]", Directives: gti.Directives{}}},
		{"AndroidMinSDK", &gti.Field{Name: "AndroidMinSDK", Type: "int", Doc: "[def: 23] [min: 23]", Directives: gti.Directives{}}},
		{"AndroidTargetSDK", &gti.Field{Name: "AndroidTargetSDK", Type: "int", Doc: "[def: 29]", Directives: gti.Directives{}}},
	}),
	Embeds:  ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{}),
	Methods: ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
})

var _ = gti.AddType(&gti.Type{
	Name:      "goki.dev/goki/config.Setup",
	ShortName: "config.Setup",
	IDName:    "setup",
	Doc:       "",
	Directives: gti.Directives{
		&gti.Directive{Tool: "gti", Directive: "add", Args: []string{}},
	},
	Fields: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"Platform", &gti.Field{Name: "Platform", Type: "Platform", Doc: "the platform to set things up for", Directives: gti.Directives{}}},
	}),
	Embeds:  ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{}),
	Methods: ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
})

var _ = gti.AddType(&gti.Type{
	Name:      "goki.dev/goki/config.Log",
	ShortName: "config.Log",
	IDName:    "log",
	Doc:       "",
	Directives: gti.Directives{
		&gti.Directive{Tool: "gti", Directive: "add", Args: []string{}},
	},
	Fields: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"Target", &gti.Field{Name: "Target", Type: "string", Doc: "[def: android]", Directives: gti.Directives{}}},
		{"Keep", &gti.Field{Name: "Keep", Type: "bool", Doc: "[def: false]", Directives: gti.Directives{}}},
		{"All", &gti.Field{Name: "All", Type: "string", Doc: "[def: F]", Directives: gti.Directives{}}},
	}),
	Embeds:  ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{}),
	Methods: ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
})

var _ = gti.AddType(&gti.Type{
	Name:      "goki.dev/goki/config.Generate",
	ShortName: "config.Generate",
	IDName:    "generate",
	Doc:       "",
	Directives: gti.Directives{
		&gti.Directive{Tool: "gti", Directive: "add", Args: []string{}},
	},
	Fields: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"Enumgen", &gti.Field{Name: "Enumgen", Type: "enumgen.Config", Doc: "the enum generation configuration options passed to enumgen", Directives: gti.Directives{}}},
		{"Gtigen", &gti.Field{Name: "Gtigen", Type: "gtigen.Config", Doc: "the generation configuration options passed to gtigen", Directives: gti.Directives{}}},
		{"Dir", &gti.Field{Name: "Dir", Type: "string", Doc: "[def: .]", Directives: gti.Directives{}}},
		{"Output", &gti.Field{Name: "Output", Type: "string", Doc: "[def: gokigen.go]", Directives: gti.Directives{}}},
		{"AddKiTypes", &gti.Field{Name: "AddKiTypes", Type: "bool", Doc: "[def: true]", Directives: gti.Directives{}}},
	}),
	Embeds:  ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{}),
	Methods: ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
})
