// Code generated by "enumgen"; DO NOT EDIT.

package cursor

import (
	"errors"
	"strconv"
	"strings"

	"goki.dev/enums"
)

var _ShapesValues = []Shapes{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}

// ShapesN is the highest valid value
// for type Shapes, plus one.
const ShapesN Shapes = 17

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the enumgen command to generate them again.
func _ShapesNoOp() {
	var x [1]struct{}
	_ = x[Arrow-(0)]
	_ = x[Cross-(1)]
	_ = x[DragCopy-(2)]
	_ = x[DragMove-(3)]
	_ = x[DragLink-(4)]
	_ = x[HandPointing-(5)]
	_ = x[HandOpen-(6)]
	_ = x[HandClosed-(7)]
	_ = x[Help-(8)]
	_ = x[IBeam-(9)]
	_ = x[Not-(10)]
	_ = x[UpDown-(11)]
	_ = x[LeftRight-(12)]
	_ = x[UpRight-(13)]
	_ = x[UpLeft-(14)]
	_ = x[AllArrows-(15)]
	_ = x[Wait-(16)]
}

var _ShapesNameToValueMap = map[string]Shapes{
	`Arrow`:        0,
	`arrow`:        0,
	`Cross`:        1,
	`cross`:        1,
	`DragCopy`:     2,
	`dragcopy`:     2,
	`DragMove`:     3,
	`dragmove`:     3,
	`DragLink`:     4,
	`draglink`:     4,
	`HandPointing`: 5,
	`handpointing`: 5,
	`HandOpen`:     6,
	`handopen`:     6,
	`HandClosed`:   7,
	`handclosed`:   7,
	`Help`:         8,
	`help`:         8,
	`IBeam`:        9,
	`ibeam`:        9,
	`Not`:          10,
	`not`:          10,
	`UpDown`:       11,
	`updown`:       11,
	`LeftRight`:    12,
	`leftright`:    12,
	`UpRight`:      13,
	`upright`:      13,
	`UpLeft`:       14,
	`upleft`:       14,
	`AllArrows`:    15,
	`allarrows`:    15,
	`Wait`:         16,
	`wait`:         16,
}

var _ShapesDescMap = map[Shapes]string{
	0:  `Arrow is the standard arrow pointer`,
	1:  `Cross is a crosshair plus-like cursor -- typically used for precise actions.`,
	2:  `DragCopy indicates that the current drag operation will copy the dragged items`,
	3:  `DragMove indicates that the current drag operation will move the dragged items`,
	4:  `DragLink indicates that the current drag operation will link the dragged items`,
	5:  `HandPointing is a hand with a pointing index finger -- typically used to indicate a link is clickable.`,
	6:  `HandOpen is an open hand -- typically used to indicate ability to click and drag to move something.`,
	7:  `HandClosed is a closed hand -- typically used to indicate a dragging operation involving scrolling.`,
	8:  `Help is an arrow and question mark indicating help is available.`,
	9:  `IBeam is the standard text-entry symbol like a capital I.`,
	10: `Not is a slashed circle indicating operation not allowed (NO).`,
	11: `UpDown is Double-pointed arrow pointing up and down (SIZENS).`,
	12: `LeftRight is a Double-pointed arrow pointing west and east (SIZEWE).`,
	13: `UpRight is a Double-pointed arrow pointing up-right and down-left (SIZEWE).`,
	14: `UpLeft is a Double-pointed arrow pointing up-left and down-right (SIZEWE).`,
	15: `AllArrows is all four directions of arrow pointing.`,
	16: `Wait is a system-dependent busy / wait cursor (typically an hourglass).`,
}

var _ShapesMap = map[Shapes]string{
	0:  `Arrow`,
	1:  `Cross`,
	2:  `DragCopy`,
	3:  `DragMove`,
	4:  `DragLink`,
	5:  `HandPointing`,
	6:  `HandOpen`,
	7:  `HandClosed`,
	8:  `Help`,
	9:  `IBeam`,
	10: `Not`,
	11: `UpDown`,
	12: `LeftRight`,
	13: `UpRight`,
	14: `UpLeft`,
	15: `AllArrows`,
	16: `Wait`,
}

// String returns the string representation
// of this Shapes value.
func (i Shapes) String() string {
	if str, ok := _ShapesMap[i]; ok {
		return str
	}
	return strconv.FormatInt(int64(i), 10)
}

// SetString sets the Shapes value from its
// string representation, and returns an
// error if the string is invalid.
func (i *Shapes) SetString(s string) error {
	if val, ok := _ShapesNameToValueMap[s]; ok {
		*i = val
		return nil
	}
	if val, ok := _ShapesNameToValueMap[strings.ToLower(s)]; ok {
		*i = val
		return nil
	}
	return errors.New(s + " is not a valid value for type Shapes")
}

// Int64 returns the Shapes value as an int64.
func (i Shapes) Int64() int64 {
	return int64(i)
}

// SetInt64 sets the Shapes value from an int64.
func (i *Shapes) SetInt64(in int64) {
	*i = Shapes(in)
}

// Desc returns the description of the Shapes value.
func (i Shapes) Desc() string {
	if str, ok := _ShapesDescMap[i]; ok {
		return str
	}
	return i.String()
}

// ShapesValues returns all possible values
// for the type Shapes.
func ShapesValues() []Shapes {
	return _ShapesValues
}

// Values returns all possible values
// for the type Shapes.
func (i Shapes) Values() []enums.Enum {
	res := make([]enums.Enum, len(_ShapesValues))
	for i, d := range _ShapesValues {
		res[i] = d
	}
	return res
}

// IsValid returns whether the value is a
// valid option for type Shapes.
func (i Shapes) IsValid() bool {
	_, ok := _ShapesMap[i]
	return ok
}

// MarshalText implements the [encoding.TextMarshaler] interface.
func (i Shapes) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the [encoding.TextUnmarshaler] interface.
func (i *Shapes) UnmarshalText(text []byte) error {
	return i.SetString(string(text))
}
