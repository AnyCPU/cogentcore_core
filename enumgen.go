// Code generated by "enumgen "; DO NOT EDIT.

package grease

import (
	"errors"
	"strconv"
	"strings"

	"goki.dev/enums"
)

const _TestEnumName = "TestValue1TestValue2"

var _TestEnumIndex = [...]uint8{0, 10, 20}

const _TestEnumLowerName = "testvalue1testvalue2"

// String returns the string representation
// of this TestEnum value.
func (i TestEnum) String() string {
	if i < 0 || i >= TestEnum(len(_TestEnumIndex)-1) {
		return "TestEnum(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _TestEnumName[_TestEnumIndex[i]:_TestEnumIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the enumgen command to generate them again.
func _TestEnumNoOp() {
	var x [1]struct{}
	_ = x[TestValue1-(0)]
	_ = x[TestValue2-(1)]
}

var _TestEnumValues = []TestEnum{TestValue1, TestValue2}

// TestEnumN is the total number of
// enum values for type TestEnum.
const TestEnumN TestEnum = 2

var _TestEnumNameToValueMap = map[string]TestEnum{
	_TestEnumName[0:10]:       TestValue1,
	_TestEnumLowerName[0:10]:  TestValue1,
	_TestEnumName[10:20]:      TestValue2,
	_TestEnumLowerName[10:20]: TestValue2,
}

var _TestEnumNames = []string{
	_TestEnumName[0:10],
	_TestEnumName[10:20],
}

var _TestEnumDescMap = map[TestEnum]string{
	0: _TestEnumDescs[0],
	1: _TestEnumDescs[1],
}

var _TestEnumDescs = []string{
	``,
	``,
}

// SetString sets the TestEnum value from its
// string representation, and returns an
// error if the string is invalid.
func (i *TestEnum) SetString(s string) error {
	if val, ok := _TestEnumNameToValueMap[s]; ok {
		*i = val
		return nil
	}

	if val, ok := _TestEnumNameToValueMap[strings.ToLower(s)]; ok {
		*i = val
		return nil
	}
	return errors.New(s + " does not belong to TestEnum values")
}

// Int64 returns the TestEnum value as an int64.
func (i TestEnum) Int64() int64 {
	return int64(i)
}

// SetInt64 sets the TestEnum value from an int64.
func (i *TestEnum) SetInt64(in int64) {
	*i = TestEnum(in)
}

// Desc returns the description of the TestEnum value.
func (i TestEnum) Desc() string {
	if str, ok := _TestEnumDescMap[i]; ok {
		return str
	}
	return i.String()
}

// TestEnumValues returns all possible values of
// the type TestEnum. This slice will be in the
// same order as those returned by the Values,
// Strings, and Descs methods on TestEnum.
func TestEnumValues() []TestEnum {
	return _TestEnumValues
}

// Values returns all possible values of
// type TestEnum. This slice will be in the
// same order as those returned by Strings and Descs.
func (i TestEnum) Values() []enums.Enum {
	res := make([]enums.Enum, len(_TestEnumValues))
	for i, d := range _TestEnumValues {
		res[i] = &d
	}
	return res
}

// Strings returns the string representations of
// all possible values of type TestEnum.
// This slice will be in the same order as
// those returned by Values and Descs.
func (i TestEnum) Strings() []string {
	return _TestEnumNames
}

// Descs returns the descriptions of all
// possible values of type TestEnum.
// This slice will be in the same order as
// those returned by Values and Strings.
func (i TestEnum) Descs() []string {
	return _TestEnumDescs
}

// IsValid returns whether the value is a
// valid option for type TestEnum.
func (i TestEnum) IsValid() bool {
	for _, v := range _TestEnumValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalText implements the [encoding.TextMarshaler] interface.
func (i TestEnum) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the [encoding.TextUnmarshaler] interface.
func (i *TestEnum) UnmarshalText(text []byte) error {
	return i.SetString(string(text))
}
