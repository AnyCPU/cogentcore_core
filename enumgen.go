// Code generated by "enumgen.exe"; DO NOT EDIT.

package cursors

import (
	"errors"
	"strconv"
	"strings"

	"goki.dev/enums"
)

var _CursorValues = []Cursor{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38}

// CursorN is the highest valid value
// for type Cursor, plus one.
const CursorN Cursor = 39

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the enumgen command to generate them again.
func _CursorNoOp() {
	var x [1]struct{}
	_ = x[Default-(0)]
	_ = x[ContextMenu-(1)]
	_ = x[Help-(2)]
	_ = x[Pointer-(3)]
	_ = x[Progress-(4)]
	_ = x[Wait-(5)]
	_ = x[Cell-(6)]
	_ = x[Crosshair-(7)]
	_ = x[Text-(8)]
	_ = x[VerticalText-(9)]
	_ = x[Alias-(10)]
	_ = x[Copy-(11)]
	_ = x[Move-(12)]
	_ = x[NotAllowed-(13)]
	_ = x[Grab-(14)]
	_ = x[Grabbing-(15)]
	_ = x[ResizeCol-(16)]
	_ = x[ResizeRow-(17)]
	_ = x[ResizeUp-(18)]
	_ = x[ResizeRight-(19)]
	_ = x[ResizeDown-(20)]
	_ = x[ResizeLeft-(21)]
	_ = x[ResizeN-(22)]
	_ = x[ResizeE-(23)]
	_ = x[ResizeS-(24)]
	_ = x[ResizeW-(25)]
	_ = x[ResizeNE-(26)]
	_ = x[ResizeNW-(27)]
	_ = x[ResizeSE-(28)]
	_ = x[ResizeSW-(29)]
	_ = x[ResizeEW-(30)]
	_ = x[ResizeNS-(31)]
	_ = x[ResizeNESW-(32)]
	_ = x[ResizeNWSE-(33)]
	_ = x[ZoomIn-(34)]
	_ = x[ZoomOut-(35)]
	_ = x[ScreenshotSelection-(36)]
	_ = x[ScreenshotWindow-(37)]
	_ = x[Poof-(38)]
}

var _CursorNameToValueMap = map[string]Cursor{
	`default`:              0,
	`context-menu`:         1,
	`help`:                 2,
	`pointer`:              3,
	`progress`:             4,
	`wait`:                 5,
	`cell`:                 6,
	`crosshair`:            7,
	`text`:                 8,
	`vertical-text`:        9,
	`alias`:                10,
	`copy`:                 11,
	`move`:                 12,
	`not-allowed`:          13,
	`grab`:                 14,
	`grabbing`:             15,
	`resize-col`:           16,
	`resize-row`:           17,
	`resize-up`:            18,
	`resize-right`:         19,
	`resize-down`:          20,
	`resize-left`:          21,
	`resize-n`:             22,
	`resize-e`:             23,
	`resize-s`:             24,
	`resize-w`:             25,
	`resize-ne`:            26,
	`resize-nw`:            27,
	`resize-se`:            28,
	`resize-sw`:            29,
	`resize-ew`:            30,
	`resize-ns`:            31,
	`resize-nesw`:          32,
	`resize-nwse`:          33,
	`zoom-in`:              34,
	`zoom-out`:             35,
	`screenshot-selection`: 36,
	`screenshot-window`:    37,
	`poof`:                 38,
}

var _CursorDescMap = map[Cursor]string{
	0:  `Default is a default arrow cursor`,
	1:  `ContextMenu indicates that a context menu is available`,
	2:  `Help indicates that help information is available`,
	3:  `Pointer is a pointing hand that indicates a link or an interactive element`,
	4:  `Progress indicates that the app is busy in the background, but can still be interacted with (use [Wait] to indicate that it can&#39;t be interacted with)`,
	5:  `Wait indicates that the app is busy and can not be interacted with (use [Progress] to indicate that it can be interacted with)`,
	6:  `Cell indicates a table cell, especially one that can be selected`,
	7:  `Crosshair is a cross cursor that typically indicates precision selection, such as in an image`,
	8:  `Text is an I-Beam that indicates text that can be selected`,
	9:  `VerticalText is a sideways I-Beam that indicates vertical text that can be selected`,
	10: `Alias indicates that a shortcut or alias will be created`,
	11: `Copy indicates that a copy of something will be created`,
	12: `Move indicates that something is being moved`,
	13: `NotAllowed indicates that something can not be done`,
	14: `Grab indicates that something can be grabbed`,
	15: `Grabbing indicates that something is actively being grabbed`,
	16: `ResizeCol indicates that something can be resized in the horizontal direction`,
	17: `ResizeRow indicates that something can be resized in the vertical direction`,
	18: `ResizeUp indicates that something can be resized in the upper direction`,
	19: `ResizeRight indicates that something can be resized in the right direction`,
	20: `ResizeDown indicates that something can be resized in the downward direction`,
	21: `ResizeLeft indicates that something can be resized in the left direction`,
	22: `ResizeN indicates that something can be resized in the upper direction`,
	23: `ResizeE indicates that something can be resized in the right direction`,
	24: `ResizeS indicates that something can be resized in the downward direction`,
	25: `ResizeW indicates that something can be resized in the left direction`,
	26: `ResizeNE indicates that something can be resized in the upper-right direction`,
	27: `ResizeNW indicates that something can be resized in the upper-left direction`,
	28: `ResizeSE indicates that something can be resized in the lower-right direction`,
	29: `ResizeSW indicates that something can be resized in the lower-left direction`,
	30: `ResizeEW indicates that something can be resized bidirectionally in the right-left direction`,
	31: `ResizeNS indicates that something can be resized bidirectionally in the top-bottom direction`,
	32: `ResizeNESW indicates that something can be resized bidirectionally in the top-right to bottom-left direction`,
	33: `ResizeNWSE indicates that something can be resized bidirectionally in the top-left to bottom-right direction`,
	34: `ZoomIn indicates that something can be zoomed in`,
	35: `ZoomOut indicates that something can be zoomed out`,
	36: `ScreenshotSelection indicates that a screenshot selection box is being selected`,
	37: `ScreenshotWindow indicates that a screenshot is being taken of an entire window`,
	38: `Poof indicates that an item will dissapear when it is released`,
}

var _CursorMap = map[Cursor]string{
	0:  `default`,
	1:  `context-menu`,
	2:  `help`,
	3:  `pointer`,
	4:  `progress`,
	5:  `wait`,
	6:  `cell`,
	7:  `crosshair`,
	8:  `text`,
	9:  `vertical-text`,
	10: `alias`,
	11: `copy`,
	12: `move`,
	13: `not-allowed`,
	14: `grab`,
	15: `grabbing`,
	16: `resize-col`,
	17: `resize-row`,
	18: `resize-up`,
	19: `resize-right`,
	20: `resize-down`,
	21: `resize-left`,
	22: `resize-n`,
	23: `resize-e`,
	24: `resize-s`,
	25: `resize-w`,
	26: `resize-ne`,
	27: `resize-nw`,
	28: `resize-se`,
	29: `resize-sw`,
	30: `resize-ew`,
	31: `resize-ns`,
	32: `resize-nesw`,
	33: `resize-nwse`,
	34: `zoom-in`,
	35: `zoom-out`,
	36: `screenshot-selection`,
	37: `screenshot-window`,
	38: `poof`,
}

// String returns the string representation
// of this Cursor value.
func (i Cursor) String() string {
	if str, ok := _CursorMap[i]; ok {
		return str
	}
	return strconv.FormatInt(int64(i), 10)
}

// SetString sets the Cursor value from its
// string representation, and returns an
// error if the string is invalid.
func (i *Cursor) SetString(s string) error {
	if val, ok := _CursorNameToValueMap[s]; ok {
		*i = val
		return nil
	}
	if val, ok := _CursorNameToValueMap[strings.ToLower(s)]; ok {
		*i = val
		return nil
	}
	return errors.New(s + " is not a valid value for type Cursor")
}

// Int64 returns the Cursor value as an int64.
func (i Cursor) Int64() int64 {
	return int64(i)
}

// SetInt64 sets the Cursor value from an int64.
func (i *Cursor) SetInt64(in int64) {
	*i = Cursor(in)
}

// Desc returns the description of the Cursor value.
func (i Cursor) Desc() string {
	if str, ok := _CursorDescMap[i]; ok {
		return str
	}
	return i.String()
}

// CursorValues returns all possible values
// for the type Cursor.
func CursorValues() []Cursor {
	return _CursorValues
}

// Values returns all possible values
// for the type Cursor.
func (i Cursor) Values() []enums.Enum {
	res := make([]enums.Enum, len(_CursorValues))
	for i, d := range _CursorValues {
		res[i] = d
	}
	return res
}

// IsValid returns whether the value is a
// valid option for type Cursor.
func (i Cursor) IsValid() bool {
	_, ok := _CursorMap[i]
	return ok
}

// MarshalText implements the [encoding.TextMarshaler] interface.
func (i Cursor) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the [encoding.TextUnmarshaler] interface.
func (i *Cursor) UnmarshalText(text []byte) error {
	return i.SetString(string(text))
}
