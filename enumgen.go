// Code generated by "goki generate ./..."; DO NOT EDIT.

package colors

import (
	"errors"
	"log"
	"strconv"
	"strings"

	"goki.dev/enums"
)

var _GradientTypesValues = []GradientTypes{0, 1, 2}

// GradientTypesN is the highest valid value
// for type GradientTypes, plus one.
const GradientTypesN GradientTypes = 3

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the enumgen command to generate them again.
func _GradientTypesNoOp() {
	var x [1]struct{}
	_ = x[Linear-(0)]
	_ = x[Radial-(1)]
	_ = x[Conic-(2)]
}

var _GradientTypesNameToValueMap = map[string]GradientTypes{
	`Linear`: 0,
	`linear`: 0,
	`Radial`: 1,
	`radial`: 1,
	`Conic`:  2,
	`conic`:  2,
}

var _GradientTypesDescMap = map[GradientTypes]string{
	0: `Linear is a linear gradient`,
	1: `Radial is a radial gradient`,
	2: `Conic is a conic gradient`,
}

var _GradientTypesMap = map[GradientTypes]string{
	0: `Linear`,
	1: `Radial`,
	2: `Conic`,
}

// String returns the string representation
// of this GradientTypes value.
func (i GradientTypes) String() string {
	if str, ok := _GradientTypesMap[i]; ok {
		return str
	}
	return strconv.FormatInt(int64(i), 10)
}

// SetString sets the GradientTypes value from its
// string representation, and returns an
// error if the string is invalid.
func (i *GradientTypes) SetString(s string) error {
	if val, ok := _GradientTypesNameToValueMap[s]; ok {
		*i = val
		return nil
	}
	if val, ok := _GradientTypesNameToValueMap[strings.ToLower(s)]; ok {
		*i = val
		return nil
	}
	return errors.New(s + " is not a valid value for type GradientTypes")
}

// Int64 returns the GradientTypes value as an int64.
func (i GradientTypes) Int64() int64 {
	return int64(i)
}

// SetInt64 sets the GradientTypes value from an int64.
func (i *GradientTypes) SetInt64(in int64) {
	*i = GradientTypes(in)
}

// Desc returns the description of the GradientTypes value.
func (i GradientTypes) Desc() string {
	if str, ok := _GradientTypesDescMap[i]; ok {
		return str
	}
	return i.String()
}

// GradientTypesValues returns all possible values
// for the type GradientTypes.
func GradientTypesValues() []GradientTypes {
	return _GradientTypesValues
}

// Values returns all possible values
// for the type GradientTypes.
func (i GradientTypes) Values() []enums.Enum {
	res := make([]enums.Enum, len(_GradientTypesValues))
	for i, d := range _GradientTypesValues {
		res[i] = d
	}
	return res
}

// IsValid returns whether the value is a
// valid option for type GradientTypes.
func (i GradientTypes) IsValid() bool {
	_, ok := _GradientTypesMap[i]
	return ok
}

// MarshalText implements the [encoding.TextMarshaler] interface.
func (i GradientTypes) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the [encoding.TextUnmarshaler] interface.
func (i *GradientTypes) UnmarshalText(text []byte) error {
	if err := i.SetString(string(text)); err != nil {
		log.Println(err)
	}
	return nil
}

var _SpreadMethodsValues = []SpreadMethods{0, 1, 2}

// SpreadMethodsN is the highest valid value
// for type SpreadMethods, plus one.
const SpreadMethodsN SpreadMethods = 3

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the enumgen command to generate them again.
func _SpreadMethodsNoOp() {
	var x [1]struct{}
	_ = x[PadSpread-(0)]
	_ = x[ReflectSpread-(1)]
	_ = x[RepeatSpread-(2)]
}

var _SpreadMethodsNameToValueMap = map[string]SpreadMethods{
	`PadSpread`:     0,
	`padspread`:     0,
	`ReflectSpread`: 1,
	`reflectspread`: 1,
	`RepeatSpread`:  2,
	`repeatspread`:  2,
}

var _SpreadMethodsDescMap = map[SpreadMethods]string{
	0: `PadSpread indicates to have the final color of the gradient fill the object beyond the end of the gradient.`,
	1: `ReflectSpread indicates to have a gradient repeat in reverse order (offset 1 to 0) to fully fill an object beyond the end of the gradient.`,
	2: `RepeatSpread indicates to have a gradient continue in its original order (offset 0 to 1) by jumping back to the start to fully fill an object beyond the end of the gradient.`,
}

var _SpreadMethodsMap = map[SpreadMethods]string{
	0: `PadSpread`,
	1: `ReflectSpread`,
	2: `RepeatSpread`,
}

// String returns the string representation
// of this SpreadMethods value.
func (i SpreadMethods) String() string {
	if str, ok := _SpreadMethodsMap[i]; ok {
		return str
	}
	return strconv.FormatInt(int64(i), 10)
}

// SetString sets the SpreadMethods value from its
// string representation, and returns an
// error if the string is invalid.
func (i *SpreadMethods) SetString(s string) error {
	if val, ok := _SpreadMethodsNameToValueMap[s]; ok {
		*i = val
		return nil
	}
	if val, ok := _SpreadMethodsNameToValueMap[strings.ToLower(s)]; ok {
		*i = val
		return nil
	}
	return errors.New(s + " is not a valid value for type SpreadMethods")
}

// Int64 returns the SpreadMethods value as an int64.
func (i SpreadMethods) Int64() int64 {
	return int64(i)
}

// SetInt64 sets the SpreadMethods value from an int64.
func (i *SpreadMethods) SetInt64(in int64) {
	*i = SpreadMethods(in)
}

// Desc returns the description of the SpreadMethods value.
func (i SpreadMethods) Desc() string {
	if str, ok := _SpreadMethodsDescMap[i]; ok {
		return str
	}
	return i.String()
}

// SpreadMethodsValues returns all possible values
// for the type SpreadMethods.
func SpreadMethodsValues() []SpreadMethods {
	return _SpreadMethodsValues
}

// Values returns all possible values
// for the type SpreadMethods.
func (i SpreadMethods) Values() []enums.Enum {
	res := make([]enums.Enum, len(_SpreadMethodsValues))
	for i, d := range _SpreadMethodsValues {
		res[i] = d
	}
	return res
}

// IsValid returns whether the value is a
// valid option for type SpreadMethods.
func (i SpreadMethods) IsValid() bool {
	_, ok := _SpreadMethodsMap[i]
	return ok
}

// MarshalText implements the [encoding.TextMarshaler] interface.
func (i SpreadMethods) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the [encoding.TextUnmarshaler] interface.
func (i *SpreadMethods) UnmarshalText(text []byte) error {
	if err := i.SetString(string(text)); err != nil {
		log.Println(err)
	}
	return nil
}

var _GradientUnitsValues = []GradientUnits{0, 1}

// GradientUnitsN is the highest valid value
// for type GradientUnits, plus one.
const GradientUnitsN GradientUnits = 2

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the enumgen command to generate them again.
func _GradientUnitsNoOp() {
	var x [1]struct{}
	_ = x[ObjectBoundingBox-(0)]
	_ = x[UserSpaceOnUse-(1)]
}

var _GradientUnitsNameToValueMap = map[string]GradientUnits{
	`ObjectBoundingBox`: 0,
	`objectboundingbox`: 0,
	`UserSpaceOnUse`:    1,
	`userspaceonuse`:    1,
}

var _GradientUnitsDescMap = map[GradientUnits]string{
	0: `ObjectBoundingBox indicates that coordinate values are scaled relative to the size of the object and are specified in the range of 0 to 1.`,
	1: `UserSpaceOnUse indicates that coordinate values are specified in the current user coordinate system when the gradient is used.`,
}

var _GradientUnitsMap = map[GradientUnits]string{
	0: `ObjectBoundingBox`,
	1: `UserSpaceOnUse`,
}

// String returns the string representation
// of this GradientUnits value.
func (i GradientUnits) String() string {
	if str, ok := _GradientUnitsMap[i]; ok {
		return str
	}
	return strconv.FormatInt(int64(i), 10)
}

// SetString sets the GradientUnits value from its
// string representation, and returns an
// error if the string is invalid.
func (i *GradientUnits) SetString(s string) error {
	if val, ok := _GradientUnitsNameToValueMap[s]; ok {
		*i = val
		return nil
	}
	if val, ok := _GradientUnitsNameToValueMap[strings.ToLower(s)]; ok {
		*i = val
		return nil
	}
	return errors.New(s + " is not a valid value for type GradientUnits")
}

// Int64 returns the GradientUnits value as an int64.
func (i GradientUnits) Int64() int64 {
	return int64(i)
}

// SetInt64 sets the GradientUnits value from an int64.
func (i *GradientUnits) SetInt64(in int64) {
	*i = GradientUnits(in)
}

// Desc returns the description of the GradientUnits value.
func (i GradientUnits) Desc() string {
	if str, ok := _GradientUnitsDescMap[i]; ok {
		return str
	}
	return i.String()
}

// GradientUnitsValues returns all possible values
// for the type GradientUnits.
func GradientUnitsValues() []GradientUnits {
	return _GradientUnitsValues
}

// Values returns all possible values
// for the type GradientUnits.
func (i GradientUnits) Values() []enums.Enum {
	res := make([]enums.Enum, len(_GradientUnitsValues))
	for i, d := range _GradientUnitsValues {
		res[i] = d
	}
	return res
}

// IsValid returns whether the value is a
// valid option for type GradientUnits.
func (i GradientUnits) IsValid() bool {
	_, ok := _GradientUnitsMap[i]
	return ok
}

// MarshalText implements the [encoding.TextMarshaler] interface.
func (i GradientUnits) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the [encoding.TextUnmarshaler] interface.
func (i *GradientUnits) UnmarshalText(text []byte) error {
	if err := i.SetString(string(text)); err != nil {
		log.Println(err)
	}
	return nil
}

var _BlendTypesValues = []BlendTypes{0, 1, 2}

// BlendTypesN is the highest valid value
// for type BlendTypes, plus one.
const BlendTypesN BlendTypes = 3

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the enumgen command to generate them again.
func _BlendTypesNoOp() {
	var x [1]struct{}
	_ = x[HCT-(0)]
	_ = x[RGB-(1)]
	_ = x[CAM16-(2)]
}

var _BlendTypesNameToValueMap = map[string]BlendTypes{
	`HCT`:   0,
	`hct`:   0,
	`RGB`:   1,
	`rgb`:   1,
	`CAM16`: 2,
	`cam16`: 2,
}

var _BlendTypesDescMap = map[BlendTypes]string{
	0: `HCT uses hue, chroma, tone space and generally produces the best results`,
	1: `RGB uses raw RGB space and was used in v1 and is used in most other colormap software, so to reproduce existing results, select this option.`,
	2: `CAM16 is an alternative colorspace, similar to HCT, but not quite as good.`,
}

var _BlendTypesMap = map[BlendTypes]string{
	0: `HCT`,
	1: `RGB`,
	2: `CAM16`,
}

// String returns the string representation
// of this BlendTypes value.
func (i BlendTypes) String() string {
	if str, ok := _BlendTypesMap[i]; ok {
		return str
	}
	return strconv.FormatInt(int64(i), 10)
}

// SetString sets the BlendTypes value from its
// string representation, and returns an
// error if the string is invalid.
func (i *BlendTypes) SetString(s string) error {
	if val, ok := _BlendTypesNameToValueMap[s]; ok {
		*i = val
		return nil
	}
	if val, ok := _BlendTypesNameToValueMap[strings.ToLower(s)]; ok {
		*i = val
		return nil
	}
	return errors.New(s + " is not a valid value for type BlendTypes")
}

// Int64 returns the BlendTypes value as an int64.
func (i BlendTypes) Int64() int64 {
	return int64(i)
}

// SetInt64 sets the BlendTypes value from an int64.
func (i *BlendTypes) SetInt64(in int64) {
	*i = BlendTypes(in)
}

// Desc returns the description of the BlendTypes value.
func (i BlendTypes) Desc() string {
	if str, ok := _BlendTypesDescMap[i]; ok {
		return str
	}
	return i.String()
}

// BlendTypesValues returns all possible values
// for the type BlendTypes.
func BlendTypesValues() []BlendTypes {
	return _BlendTypesValues
}

// Values returns all possible values
// for the type BlendTypes.
func (i BlendTypes) Values() []enums.Enum {
	res := make([]enums.Enum, len(_BlendTypesValues))
	for i, d := range _BlendTypesValues {
		res[i] = d
	}
	return res
}

// IsValid returns whether the value is a
// valid option for type BlendTypes.
func (i BlendTypes) IsValid() bool {
	_, ok := _BlendTypesMap[i]
	return ok
}

// MarshalText implements the [encoding.TextMarshaler] interface.
func (i BlendTypes) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the [encoding.TextUnmarshaler] interface.
func (i *BlendTypes) UnmarshalText(text []byte) error {
	if err := i.SetString(string(text)); err != nil {
		log.Println(err)
	}
	return nil
}
