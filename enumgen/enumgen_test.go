// Copyright (c) 2023, The GoKi Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package enumgen

import (
	"os"
	"strings"
	"testing"

	"goki.dev/enums/enumgen/config"
	"goki.dev/enums/enumgen/testdata"
	"goki.dev/grease"
)

func TestGenerate(t *testing.T) {
	c := &config.Config{}
	err := grease.SetFromDefaults(c)
	if err != nil {
		t.Errorf("programmer error: error setting config from default tags: %v", err)
	}
	c.Dir = "./testdata"
	c.Output = "./testdata/enumgen.go"
	c.JSON = true
	err = Generate(c)
	if err != nil {
		t.Errorf("error while generating: %v", err)
	}
	have, err := os.ReadFile("testdata/enumgen.go")
	if err != nil {
		t.Errorf("error while reading generated file: %v", err)
	}
	want, err := os.ReadFile("testdata/enumgen.golden")
	if err != nil {
		t.Errorf("error while reading golden file: %v", err)
	}
	// ignore first line, which has "Code generated by" message
	// that can change based on where go test is ran.
	_, shave, got := strings.Cut(string(have), "\n")
	if !got {
		t.Errorf("expected string with newline in testdata/enumgen.go, but got %q", have)
	}
	_, swant, got := strings.Cut(string(want), "\n")
	if !got {
		t.Errorf("expected string with newline in testdata/enumgen.golden, but got %q", want)
	}
	if shave != swant {
		t.Errorf("expected generated file and expected file to be the same after the first line, but they are not (compare ./testdata/enumgen.go and ./testdata/enumgen.golden to see the difference)")
	}
}

func TestStringSetString(t *testing.T) {
	var val testdata.States
	val.SetFlag(true, testdata.Active, testdata.Hovered, testdata.Focused)
	orig := val
	want := "focused|vered|currently-being-pressed-by-user"
	have := val.String()
	if have != want {
		t.Errorf("expected string value for %d to be %q but got %q", val, want, have)
	}
	err := val.SetString(have)
	if err != nil {
		t.Errorf("error setting value from string %q: %v", have, err)
	}
	if val != orig {
		t.Errorf("new value %v after going to and from string not the same as old value %v", val, orig)
	}
}

func TestSetStringString(t *testing.T) {
	src := "enabled|focused|selected"
	var want testdata.States
	want.SetFlag(true, testdata.Enabled, testdata.Focused, testdata.Selected)
	var have testdata.States
	err := have.SetString(src)
	if err != nil {
		t.Errorf("error setting value from string %q: %v", src, err)
	}
	if have != want {
		t.Errorf("expected value %v from string %q, not %v", want, src, have)
	}
	str := have.String()
	if str != src {
		t.Errorf("expected string value for %d to be %q but got %q", have, src, str)
	}
}

func TestLanguagesString(t *testing.T) {
	var val testdata.Languages
	val.SetFlag(true, testdata.Dart, testdata.Go, testdata.Kotlin, testdata.JavaScript)
	want := "Go|JavaScript|Dart|Kotlin"
	have := val.String()
	if have != want {
		t.Errorf("expected string value for %d to be %q but got %q", val, want, have)
	}
}
