// Code generated by "gtigen"; DO NOT EDIT.

package enumgen

import (
	"goki.dev/gti"
	"goki.dev/ordmap"
)

var _ = gti.AddType(&gti.Type{
	Name:      "goki.dev/enums/enumgen.Config",
	ShortName: "enumgen.Config",
	IDName:    "config",
	Doc:       "Config contains the configuration information\nused by enumgen",
	Directives: gti.Directives{
		&gti.Directive{Tool: "gti", Directive: "add", Args: []string{}},
	},
	Fields: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"Dir", &gti.Field{Name: "Dir", Type: "string", LocalType: "string", Doc: "the source directory to run enumgen on (can be set to multiple through paths like ./...)", Directives: gti.Directives{}, Tag: "def:\".\" posarg:\"0\" required:\"-\""}},
		{"Output", &gti.Field{Name: "Output", Type: "string", LocalType: "string", Doc: "the output file location relative to the package on which enumgen is being called", Directives: gti.Directives{}, Tag: "def:\"enumgen.go\""}},
		{"Transform", &gti.Field{Name: "Transform", Type: "string", LocalType: "string", Doc: "if specified, the enum item transformation method (upper, lower, snake, snake-upper, kebab, kebab-upper,\ncamel, camel-lower, title, title-lower, first, first-upper, first-lower, or whitespace)", Directives: gti.Directives{}, Tag: ""}},
		{"TrimPrefix", &gti.Field{Name: "TrimPrefix", Type: "string", LocalType: "string", Doc: "if specified, a comma-separated list of prefixes to trim from each item", Directives: gti.Directives{}, Tag: ""}},
		{"AddPrefix", &gti.Field{Name: "AddPrefix", Type: "string", LocalType: "string", Doc: "if specified, the prefix to add to each item", Directives: gti.Directives{}, Tag: ""}},
		{"LineComment", &gti.Field{Name: "LineComment", Type: "bool", LocalType: "bool", Doc: "whether to use line comment text as printed text when present", Directives: gti.Directives{}, Tag: "def:\"true\""}},
		{"AcceptLower", &gti.Field{Name: "AcceptLower", Type: "bool", LocalType: "bool", Doc: "whether to accept lowercase versions of enum names in SetString", Directives: gti.Directives{}, Tag: "def:\"true\""}},
		{"Text", &gti.Field{Name: "Text", Type: "bool", LocalType: "bool", Doc: "whether to generate text marshaling methods", Directives: gti.Directives{}, Tag: "def:\"true\""}},
		{"JSON", &gti.Field{Name: "JSON", Type: "bool", LocalType: "bool", Doc: "whether to generate JSON marshaling methods (note that text marshaling methods will also work for JSON, so this should be unnecessary in almost all cases; see the text option)", Directives: gti.Directives{}, Tag: ""}},
		{"YAML", &gti.Field{Name: "YAML", Type: "bool", LocalType: "bool", Doc: "whether to generate YAML marshaling methods", Directives: gti.Directives{}, Tag: ""}},
		{"SQL", &gti.Field{Name: "SQL", Type: "bool", LocalType: "bool", Doc: "whether to generate methods that implement the SQL Scanner and Valuer interfaces", Directives: gti.Directives{}, Tag: ""}},
		{"GQL", &gti.Field{Name: "GQL", Type: "bool", LocalType: "bool", Doc: "whether to generate GraphQL marshaling methods for gqlgen", Directives: gti.Directives{}, Tag: ""}},
		{"Extend", &gti.Field{Name: "Extend", Type: "bool", LocalType: "bool", Doc: "whether to allow enums to extend other enums; this should be on in almost all circumstances,\nbut can be turned off for specific enum types that extend non-enum types", Directives: gti.Directives{}, Tag: "def:\"true\""}},
	}),
	Embeds:  ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{}),
	Methods: ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
})

var _ = gti.AddFunc(&gti.Func{
	Name: "goki.dev/enums/enumgen.Generate",
	Doc:  "Generate generates enum methods, using the\nconfiguration information, loading the packages from the\nconfiguration source directory, and writing the result\nto the configuration output file.\n\nIt is a simple entry point to enumgen that does all\nof the steps; for more specific functionality, create\na new [Generator] with [NewGenerator] and call methods on it.",
	Directives: gti.Directives{
		&gti.Directive{Tool: "grease", Directive: "cmd", Args: []string{"-root"}},
		&gti.Directive{Tool: "gti", Directive: "add", Args: []string{}},
	},
	Args: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"cfg", &gti.Field{Name: "cfg", Type: "*goki.dev/enums/enumgen.Config", LocalType: "*Config", Doc: "", Directives: gti.Directives{}, Tag: ""}},
	}),
	Returns: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"error", &gti.Field{Name: "error", Type: "error", LocalType: "error", Doc: "", Directives: gti.Directives{}, Tag: ""}},
	}),
})
