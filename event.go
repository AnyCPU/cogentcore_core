// Copyright (c) 2018, The GoKi Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package goosi

import (
	"fmt"
	"image"
	"time"

	"goki.dev/enums"
	"goki.dev/glop/nptime"
)

// GoGi event structure is derived from go.wde and golang/x/mobile/event
//
// GoGi requires event type enum for widgets to request what events to
// receive, and we add an overall interface with base support for time and
// marking events as processed, which is critical for simplifying logic and
// preventing unintended multiple effects
//
// Goosi deals exclusively in raw "dot" pixel integer coordinates (as in
// go.wde) -- abstraction to different DPI etc takes place higher up in the
// system

// Copyright 2015 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

/*
   Copyright 2012 the go.wde authors

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/

// EventTypes determines the type of GUI event.
// Within the same Type, different situations are also typically
// conveyed by an Action parameter.  Types are organized by the
// differing frequency and uniqueness properties of the event.
// Most events use the same EventBase type and only need
// to set relevant fields and the type.
// EventTypes is used both as a mutually-exclusive event type ID,
// (like a standard enum, in its BitIndex role), and as a
// bitflag for filtering events of interest.
type EventTypes int64 //enums:bitflag

const (
	// MouseButtonEvent includes all mouse button actions (but not move or drag)
	MouseButtonEvent EventTypes = iota

	// MouseMoveEvent is when the mouse is moving but no button is down.
	// Typically these are ignored except to determine hover conditions,
	// and mouse Focus events.
	MouseMoveEvent

	// MouseDragEvent is when the mouse is moving and there is a button down.
	// The start pos indicates where (and when) button first was pressed.
	MouseDragEvent

	// MouseScrollEvent is for mouse scroll wheel events.
	// These are not unique and delta is updated when compressed to reflect
	// net delta.
	MouseScrollEvent

	// MouseFocusEvent is for mouse focus (enter / exit of widget area).
	// Must be generated by GUI based on mouse move events.
	MouseFocusEvent

	// MouseHoverEvent is for mouse hover over a widget.
	// Must be generated by GUI as function of mouse move and widget locations.
	MouseHoverEvent

	// KeyEvent for key pressed or released, as Unique events.
	// This provides fine-grained data about each key as it happens.
	KeyEvent

	// KeyChordEvent is only generated when a non-modifier key is released,
	// and it also contains a string representation of the full chord,
	// suitable for translation into keyboard commands, emacs-style etc.
	// It can be somewhat delayed relative to the KeyEvent.  Is Unique.
	KeyChordEvent

	// TouchEvent is a generic touch-based event.
	TouchEvent

	// MagnifyEvent is a touch-based magnify event (e.g., pinch)
	MagnifyEvent

	// RotateEvent is a touch-based rotate event
	RotateEvent

	// WindowEvent reports on changes in the window position,
	// visibility (iconify), focus changes, screen update, and closing.
	// These are only sent once per event (Unique).
	WindowEvent

	// WindowResizeEvent indicates the window has been resized,
	// which can happen continuously during a user resizing
	// episode, and thus are not unique events.
	WindowResizeEvent

	// WindowPaintEvent is sent continuously at FPS frequency
	// (60 frames per second by default) to drive updating check
	// on the window.  Not unique.
	WindowPaintEvent

	// DNDEvent is for the Drag-n-Drop (DND) drop final event
	// It can be generated by the OS but also internally within a window
	// by the GUI.  It is Unique.
	DNDEvent

	// DNDMoveEvent is when the DND position has changed.  Not Unique.
	DNDMoveEvent

	// DNDFocusEvent is for Enter / Exit events of the DND into /
	// out of a given widget.  It is Unique.
	DNDFocusEvent

	// OSEvent is an operating system generated event (app level typically)
	OSEvent

	// OSOpenFilesEvent is an event telling app to open given files
	OSOpenFilesEvent

	// CustomEventTypes is a user-defined event with a data any field
	CustomEventTypes
)

// EventFlags encode boolean event properties
type EventFlags int64 //enums:bitflag

const (
	// EventHandled indicates that the event has been handled
	EventHandled EventFlags = iota

	// EventUnique indicates that the event is Unique and not
	// to be compressed with like events.
	EventUnique
)

// Event is the interface for goosi GUI events.  also includes Stringer
// to get a string description of the event
type Event interface {
	fmt.Stringer

	// Type returns the type of event associated with given event
	Type() EventTypes

	// IsUnique returns true if this event must always be sent,
	// even if the last event sent is of the same type.
	// This is true for Key, MouseButton,
	// Otherwise, events of the same type are compressed
	// such that if the last one written to the queue is of
	// the same type, it is replaced instead of adding a new one.
	IsUnique() bool

	// HasPos returns true if the event has a window position where it takes place
	HasPos() bool

	// Pos returns the original window-based position in raw display dots
	// (pixels) where event took place.
	Pos() image.Point

	// SetLocalOff sets the offset subtracted from window-based positions
	// to compute Local versions of positions, which are updated.
	SetLocalOff(off image.Point)

	// LocalOff returns the offset subtracted from window-based positions
	// to compute Local versions of positions.
	LocalOff() image.Point

	// LocalPos returns the local position, which can be adjusted from the window pos
	// via SubLocalOffset based on a local top-left coordinate for a region within
	// the window.
	LocalPos() image.Point

	// StartPos returns the original starting window-based position.
	StartPos() image.Point

	// LocalStartPos returns the local starting position
	LocalStartPos() image.Point

	// PrevPos returns the original previous window-based position.
	PrevPos() image.Point

	// LocalPrevPos returns the local previous position
	LocalPrevPos() image.Point

	// OnFocus returns true if the event operates only on focus item (e.g., keyboard events)
	OnFocus() bool

	// OnWinFocus returns true if the event operates only when the window has focus
	OnWinFocus() bool

	// Time returns the time at which the event was generated, in UnixNano nanosecond units
	Time() time.Time

	// StartTime returns time of StartPos, or other starting time of relevance to the event,
	// in UnixNano nanosecond units.
	StartTime() time.Time

	// PrevTime returns time of PrevPos, or other earlier time of relevance to the event,
	// in UnixNano nanosecond units.
	PrevTime() time.Time

	// IsHandled returns whether this event has already been processed
	IsHandled() bool

	// SetHandled marks the event as having been processed
	SetHandled()

	// Init sets the time to now, and any other init -- done just prior to event delivery
	Init()

	// SetTime sets the event time to Now
	SetTime()

	// IsSame returns true if the current event is the same as other.
	// Checks Type and, where relevant, Action.
	IsSame(oth Event) bool
}

//////////////////////////////////////////////////////////////////////
// EventBase

// EventBase is the base type for events.
// It is designed to support most event types so no further subtypes
// are needed.
type EventBase struct {
	// Typ is the type of event, returned as Type()
	Typ EventTypes

	// Flags records event boolean state, using atomic flag operations
	Flags EventFlags

	// GenTime records the time when the event was first generated, using more
	// efficient nptime struct
	GenTime nptime.Time

	// Key Modifiers present when event occurred: for Key, Mouse, Touch events
	Mods Modifiers

	// Where is the window-based position in raw display dots
	// (pixels) where event took place.
	Where image.Point

	// Start is the window-based starting position in raw display dots
	// (pixels) where event started.
	Start image.Point

	// Prev is the window-based previous position in raw display dots
	// (pixels) -- e.g., for mouse dragging.
	Prev image.Point

	// StTime is the starting time, using more efficient nptime struct
	StTime nptime.Time

	// PrvTime is the time of the previous event, using more efficient nptime struct
	PrvTime nptime.Time

	// LocalOffset is the offset subtracted from original window coordinates
	// to compute the local coordinates.
	LocalOffset image.Point

	// WhereLocal is the local position, which can be adjusted from the window pos
	// via SubLocalOffset based on a local top-left coordinate for a region within
	// the window.
	WhereLocal image.Point

	// StartLocal is the local starting position
	StartLocal image.Point

	// PrevLocal is the local previous position
	PrevLocal image.Point
}

// SetTime sets the event time to Now
func (ev *EventBase) SetTime() {
	ev.GenTime.Now()
}

func (ev *EventBase) Init() {
	ev.SetTime()
	ev.SetLocalOff(image.Point{}) // ensure local is copied
}

func (ev EventBase) Type() EventTypes {
	return ev.Typ
}

func (ev EventBase) IsSame(oth Event) bool {
	return ev.Typ == oth.Type() // basic check.  redefine in subtypes
}

func (ev EventBase) IsUnique() bool {
	return ev.Flags.HasFlag(EventUnique)
}

func (ev EventBase) SetUnique() {
	ev.Flags.SetFlag(true, EventUnique)
}

func (ev EventBase) Time() time.Time {
	return ev.GenTime.Time()
}

func (ev EventBase) StartTime() time.Time {
	return ev.StTime.Time()
}

func (ev EventBase) PrevTime() time.Time {
	return ev.PrvTime.Time()
}

func (ev EventBase) IsHandled() bool {
	return ev.Flags.HasFlag(EventHandled)
}

func (ev *EventBase) SetHandled() {
	ev.Flags.SetFlag(true, EventHandled)
}

func (ev *EventBase) ClearHandled() {
	ev.Flags.SetFlag(false, EventHandled)
}

func (ev EventBase) String() string {
	return fmt.Sprintf("Event at Time: %v", ev.Time())
}

func (ev EventBase) OnWinFocus() bool {
	return true
}

// SetModifiers sets the bitflags based on a list of key.Modifiers
func (ev *EventBase) SetModifiers(mods ...enums.BitFlag) {
	ev.Mods.SetFlag(true, mods...)
}

// HasAllModifiers tests whether all of given modifier(s) were set
func (ev EventBase) HasAllModifiers(mods ...enums.BitFlag) bool {
	return HasAnyModifier(ev.Mods, mods...)
}

func (ev EventBase) HasAnyModifier(mods ...enums.BitFlag) bool {
	return HasAnyModifier(ev.Mods, mods...)
}

func (ev EventBase) HasPos() bool {
	return false
}

func (ev EventBase) Pos() image.Point {
	return ev.Where
}

func (ev EventBase) StartPos() image.Point {
	return ev.Start
}

func (ev EventBase) PrevPos() image.Point {
	return ev.Prev
}

// Delta returns the amount of mouse movement (Where - Prev)
func (ev EventBase) Delta() image.Point {
	return ev.Where.Sub(ev.Prev)
}

func (ev *EventBase) SetLocalOff(off image.Point) {
	ev.LocalOffset = off
	ev.WhereLocal = ev.Where.Sub(off)
	ev.StartLocal = ev.Start.Sub(off)
	ev.PrevLocal = ev.Prev.Sub(off)
}

func (ev EventBase) LocalOff() image.Point {
	return ev.LocalOffset
}

func (ev EventBase) LocalPos() image.Point {
	return ev.WhereLocal
}

func (ev EventBase) LocalStartPos() image.Point {
	return ev.StartLocal
}

func (ev EventBase) LocalPrevPos() image.Point {
	return ev.PrevLocal
}

//////////////////////////////////////////////////////////////////////
// CustomEvent

// CustomEvent is a user-specified event that can be sent and received
// as needed, and contains a Data field for arbitrary data, and
// optional position and focus parameters
type CustomEvent struct {
	EventBase

	Data any

	// set to true if position is available
	PosAvail bool `desc:"set to true if position is available"`

	// set to true if this event should be sent to widget in focus
	Focus bool `desc:"set to true if this event should be sent to widget in focus"`
}

func (ce CustomEvent) Type() EventTypes {
	return CustomEventTypes
}

func (ce CustomEvent) String() string {
	return fmt.Sprintf("Type: %v Data: %v  Time: %v", ce.Type(), ce.Data, ce.Time())
}

func (ce CustomEvent) HasPos() bool {
	return ce.PosAvail
}

func (ce CustomEvent) Pos() image.Point {
	return ce.Where
}

func (ce CustomEvent) OnFocus() bool {
	return ce.Focus
}

func (ce CustomEvent) OnWinFocus() bool {
	return false
}

// SendCustomEvent sends a new custom event to given window, with
// given data -- constructs the event and sends it. For other params
// you can follow these steps yourself..
func SendCustomEvent(win Window, data any) {
	ce := &CustomEvent{Data: data}
	ce.Init()
	win.Send(ce)
}

//////////////////////////////////////////////////////////////////////
// EventDeque

// EventDeque is an infinitely buffered double-ended queue of events.
// If an event is not marked as Unique, and the last
// event in the queue is of the same type, then the new one
// replaces the last one.  This automatically implements
// event compression to manage the common situation where
// event processing is slower than event generation,
// such as with Mouse movement and Paint events.
type EventDeque interface {
	// Send adds an event to the end of the deque,
	// replacing the last of the same type unless marked
	// as Unique.
	// They are returned by NextEvent in FIFO order.
	Send(event Event)

	// SendFirst adds an event to the start of the deque.
	// They are returned by NextEvent in LIFO order,
	// and have priority over events sent via Send.
	SendFirst(event Event)

	// NextEvent returns the next event in the deque.
	// It blocks until such an event has been sent.
	NextEvent() Event

	// PollEvent returns the next event in the deque if available,
	// and returns true.
	// If none are available, it returns false immediately.
	PollEvent() (Event, bool)
}
