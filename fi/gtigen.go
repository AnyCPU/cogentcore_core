// Code generated by "goki generate"; DO NOT EDIT.

package fi

import (
	"goki.dev/gti"
	"goki.dev/ordmap"
)

var _ = gti.AddType(&gti.Type{
	Name:      "goki.dev/fi.FileInfo",
	ShortName: "fi.FileInfo",
	IDName:    "file-info",
	Doc:       "FileInfo represents the information about a given file / directory,\nincluding icon, mimetype, etc",
	Directives: gti.Directives{
		&gti.Directive{Tool: "gti", Directive: "add", Args: []string{}},
	},
	Fields: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"Ic", &gti.Field{Name: "Ic", Type: "goki.dev/icons.Icon", LocalType: "icons.Icon", Doc: "icon for file", Directives: gti.Directives{}, Tag: "tableview:\"no-header\""}},
		{"Name", &gti.Field{Name: "Name", Type: "string", LocalType: "string", Doc: "name of the file, without any path", Directives: gti.Directives{}, Tag: "width:\"40\""}},
		{"Size", &gti.Field{Name: "Size", Type: "goki.dev/fi.FileSize", LocalType: "FileSize", Doc: "size of the file in bytes", Directives: gti.Directives{}, Tag: ""}},
		{"Kind", &gti.Field{Name: "Kind", Type: "string", LocalType: "string", Doc: "type of file / directory -- shorter, more user-friendly version of mime type, based on category", Directives: gti.Directives{}, Tag: "width:\"20\" max-width:\"20\""}},
		{"Mime", &gti.Field{Name: "Mime", Type: "string", LocalType: "string", Doc: "full official mime type of the contents", Directives: gti.Directives{}, Tag: "tableview:\"-\""}},
		{"Cat", &gti.Field{Name: "Cat", Type: "goki.dev/fi.Cat", LocalType: "Cat", Doc: "functional category of the file, based on mime data etc", Directives: gti.Directives{}, Tag: "tableview:\"-\""}},
		{"Known", &gti.Field{Name: "Known", Type: "goki.dev/fi.Known", LocalType: "Known", Doc: "known file type", Directives: gti.Directives{}, Tag: "tableview:\"-\""}},
		{"Mode", &gti.Field{Name: "Mode", Type: "io/fs.FileMode", LocalType: "os.FileMode", Doc: "file mode bits", Directives: gti.Directives{}, Tag: ""}},
		{"ModTime", &gti.Field{Name: "ModTime", Type: "goki.dev/fi.FileTime", LocalType: "FileTime", Doc: "time that contents (only) were last modified", Directives: gti.Directives{}, Tag: ""}},
		{"Vcs", &gti.Field{Name: "Vcs", Type: "goki.dev/vci.FileStatus", LocalType: "vci.FileStatus", Doc: "version control system status, when enabled", Directives: gti.Directives{}, Tag: "tableview:\"-\""}},
		{"Path", &gti.Field{Name: "Path", Type: "string", LocalType: "string", Doc: "full path to file, including name -- for file functions", Directives: gti.Directives{}, Tag: "tableview:\"-\""}},
	}),
	Embeds: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{}),
	Methods: ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{
		{"Duplicate", &gti.Method{Name: "Duplicate", Doc: "Duplicate creates a copy of given file -- only works for regular files, not\ndirectories.", Directives: gti.Directives{
			&gti.Directive{Tool: "gti", Directive: "add", Args: []string{}},
		}, Args: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{}), Returns: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
			{"string", &gti.Field{Name: "string", Type: "string", LocalType: "string", Doc: "", Directives: gti.Directives{}, Tag: ""}},
			{"error", &gti.Field{Name: "error", Type: "error", LocalType: "error", Doc: "", Directives: gti.Directives{}, Tag: ""}},
		})}},
		{"Delete", &gti.Method{Name: "Delete", Doc: "Delete deletes the file or if a directory the directory and all files and subdirectories", Directives: gti.Directives{
			&gti.Directive{Tool: "gti", Directive: "add", Args: []string{}},
		}, Args: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{}), Returns: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
			{"error", &gti.Field{Name: "error", Type: "error", LocalType: "error", Doc: "", Directives: gti.Directives{}, Tag: ""}},
		})}},
		{"Rename", &gti.Method{Name: "Rename", Doc: "Rename renames (moves) this file to given new path name.\nUpdates the FileInfo setting to the new name, although it might\nbe out of scope if it moved into a new path", Directives: gti.Directives{
			&gti.Directive{Tool: "gti", Directive: "add", Args: []string{}},
		}, Args: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
			{"path", &gti.Field{Name: "path", Type: "string", LocalType: "string", Doc: "", Directives: gti.Directives{}, Tag: ""}},
		}), Returns: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
			{"newpath", &gti.Field{Name: "newpath", Type: "string", LocalType: "string", Doc: "", Directives: gti.Directives{}, Tag: ""}},
			{"err", &gti.Field{Name: "err", Type: "error", LocalType: "error", Doc: "", Directives: gti.Directives{}, Tag: ""}},
		})}},
	}),
})
