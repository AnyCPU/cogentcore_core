// Code generated by "stringer -type=Support"; DO NOT EDIT.

package filecat

import (
	"errors"
	"strconv"
)

var _ = errors.New("dummy error")

const _Support_name = "NoSupportTarZipGZipSevenZXzDmgSharAdaBashCCshCSharpDDiffEiffelErlangForthFortranFSharpGoHaskellJavaJavaScriptLuaMakefileMathematicaMatlabObjCOCamlPascalPerlPhpPrologPythonRRubyScalaTclBibtexTexTexinfoTroffHtmlCssMarkdownRtfMSWordOpenTextOpenPresMSPowerpointMSExcelOpenSheetCsvJsonXmlProtobufIniTsvPlainTextICalVCalVCardPdfPostscriptGimpGraphVisGifJpegPngSvgTiffPnmPbmPgmPpmXbmXpmVrmlX3dFlacMp3OggMidiWavMpegMp4MovOgvWmvAviSupportN"

var _Support_index = [...]uint16{0, 9, 12, 15, 19, 25, 27, 30, 34, 37, 41, 42, 45, 51, 52, 56, 62, 68, 73, 80, 86, 88, 95, 99, 109, 112, 120, 131, 137, 141, 146, 152, 156, 159, 165, 171, 172, 176, 181, 184, 190, 193, 200, 205, 209, 212, 220, 223, 229, 237, 245, 257, 264, 273, 276, 280, 283, 291, 294, 297, 306, 310, 314, 319, 322, 332, 336, 344, 347, 351, 354, 357, 361, 364, 367, 370, 373, 376, 379, 383, 386, 390, 393, 396, 400, 403, 407, 410, 413, 416, 419, 422, 430}

func (i Support) String() string {
	if i < 0 || i >= Support(len(_Support_index)-1) {
		return "Support(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _Support_name[_Support_index[i]:_Support_index[i+1]]
}

func (i *Support) FromString(s string) error {
	for j := 0; j < len(_Support_index)-1; j++ {
		if s == _Support_name[_Support_index[j]:_Support_index[j+1]] {
			*i = Support(j)
			return nil
		}
	}
	return errors.New("String: " + s + " is not a valid option for type: Support")
}
