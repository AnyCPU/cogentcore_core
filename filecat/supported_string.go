// Code generated by "stringer -type=Supported"; DO NOT EDIT.

package filecat

import (
	"errors"
	"strconv"
)

var _ = errors.New("dummy error")

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[NoSupport-0]
	_ = x[Any-1]
	_ = x[AnySupported-2]
	_ = x[AnyFolder-3]
	_ = x[AnyArchive-4]
	_ = x[Multipart-5]
	_ = x[Tar-6]
	_ = x[Zip-7]
	_ = x[GZip-8]
	_ = x[SevenZ-9]
	_ = x[Xz-10]
	_ = x[BZip-11]
	_ = x[Dmg-12]
	_ = x[Shar-13]
	_ = x[AnyBackup-14]
	_ = x[Trash-15]
	_ = x[AnyCode-16]
	_ = x[Ada-17]
	_ = x[Bash-18]
	_ = x[Csh-19]
	_ = x[C-20]
	_ = x[CSharp-21]
	_ = x[D-22]
	_ = x[Diff-23]
	_ = x[Eiffel-24]
	_ = x[Erlang-25]
	_ = x[Forth-26]
	_ = x[Fortran-27]
	_ = x[FSharp-28]
	_ = x[Go-29]
	_ = x[Haskell-30]
	_ = x[Java-31]
	_ = x[JavaScript-32]
	_ = x[Lisp-33]
	_ = x[Lua-34]
	_ = x[Makefile-35]
	_ = x[Mathematica-36]
	_ = x[Matlab-37]
	_ = x[ObjC-38]
	_ = x[OCaml-39]
	_ = x[Pascal-40]
	_ = x[Perl-41]
	_ = x[Php-42]
	_ = x[Prolog-43]
	_ = x[Python-44]
	_ = x[R-45]
	_ = x[Ruby-46]
	_ = x[Rust-47]
	_ = x[Scala-48]
	_ = x[Tcl-49]
	_ = x[AnyDoc-50]
	_ = x[BibTeX-51]
	_ = x[TeX-52]
	_ = x[Texinfo-53]
	_ = x[Troff-54]
	_ = x[Html-55]
	_ = x[Css-56]
	_ = x[Markdown-57]
	_ = x[Rtf-58]
	_ = x[MSWord-59]
	_ = x[OpenText-60]
	_ = x[OpenPres-61]
	_ = x[MSPowerpoint-62]
	_ = x[EBook-63]
	_ = x[EPub-64]
	_ = x[AnySheet-65]
	_ = x[MSExcel-66]
	_ = x[OpenSheet-67]
	_ = x[AnyData-68]
	_ = x[Csv-69]
	_ = x[Json-70]
	_ = x[Xml-71]
	_ = x[Protobuf-72]
	_ = x[Ini-73]
	_ = x[Tsv-74]
	_ = x[Uri-75]
	_ = x[Color-76]
	_ = x[GoGi-77]
	_ = x[Yaml-78]
	_ = x[AnyText-79]
	_ = x[PlainText-80]
	_ = x[ICal-81]
	_ = x[VCal-82]
	_ = x[VCard-83]
	_ = x[AnyImage-84]
	_ = x[Pdf-85]
	_ = x[Postscript-86]
	_ = x[Gimp-87]
	_ = x[GraphVis-88]
	_ = x[Gif-89]
	_ = x[Jpeg-90]
	_ = x[Png-91]
	_ = x[Svg-92]
	_ = x[Tiff-93]
	_ = x[Pnm-94]
	_ = x[Pbm-95]
	_ = x[Pgm-96]
	_ = x[Ppm-97]
	_ = x[Xbm-98]
	_ = x[Xpm-99]
	_ = x[AnyModel-100]
	_ = x[Vrml-101]
	_ = x[X3d-102]
	_ = x[AnyAudio-103]
	_ = x[Aac-104]
	_ = x[Flac-105]
	_ = x[Mp3-106]
	_ = x[Ogg-107]
	_ = x[Midi-108]
	_ = x[Wav-109]
	_ = x[AnyVideo-110]
	_ = x[Mpeg-111]
	_ = x[Mp4-112]
	_ = x[Mov-113]
	_ = x[Ogv-114]
	_ = x[Wmv-115]
	_ = x[Avi-116]
	_ = x[AnyFont-117]
	_ = x[TrueType-118]
	_ = x[WebOpenFont-119]
	_ = x[AnyExe-120]
	_ = x[AnyBin-121]
	_ = x[SupportedN-122]
}

const _Supported_name = "NoSupportAnyAnySupportedAnyFolderAnyArchiveMultipartTarZipGZipSevenZXzBZipDmgSharAnyBackupTrashAnyCodeAdaBashCshCCSharpDDiffEiffelErlangForthFortranFSharpGoHaskellJavaJavaScriptLispLuaMakefileMathematicaMatlabObjCOCamlPascalPerlPhpPrologPythonRRubyRustScalaTclAnyDocBibTeXTeXTexinfoTroffHtmlCssMarkdownRtfMSWordOpenTextOpenPresMSPowerpointEBookEPubAnySheetMSExcelOpenSheetAnyDataCsvJsonXmlProtobufIniTsvUriColorGoGiYamlAnyTextPlainTextICalVCalVCardAnyImagePdfPostscriptGimpGraphVisGifJpegPngSvgTiffPnmPbmPgmPpmXbmXpmAnyModelVrmlX3dAnyAudioAacFlacMp3OggMidiWavAnyVideoMpegMp4MovOgvWmvAviAnyFontTrueTypeWebOpenFontAnyExeAnyBinSupportedN"

var _Supported_index = [...]uint16{0, 9, 12, 24, 33, 43, 52, 55, 58, 62, 68, 70, 74, 77, 81, 90, 95, 102, 105, 109, 112, 113, 119, 120, 124, 130, 136, 141, 148, 154, 156, 163, 167, 177, 181, 184, 192, 203, 209, 213, 218, 224, 228, 231, 237, 243, 244, 248, 252, 257, 260, 266, 272, 275, 282, 287, 291, 294, 302, 305, 311, 319, 327, 339, 344, 348, 356, 363, 372, 379, 382, 386, 389, 397, 400, 403, 406, 411, 415, 419, 426, 435, 439, 443, 448, 456, 459, 469, 473, 481, 484, 488, 491, 494, 498, 501, 504, 507, 510, 513, 516, 524, 528, 531, 539, 542, 546, 549, 552, 556, 559, 567, 571, 574, 577, 580, 583, 586, 593, 601, 612, 618, 624, 634}

func (i Supported) String() string {
	if i < 0 || i >= Supported(len(_Supported_index)-1) {
		return "Supported(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _Supported_name[_Supported_index[i]:_Supported_index[i+1]]
}

func (i *Supported) FromString(s string) error {
	for j := 0; j < len(_Supported_index)-1; j++ {
		if s == _Supported_name[_Supported_index[j]:_Supported_index[j+1]] {
			*i = Supported(j)
			return nil
		}
	}
	return errors.New("String: " + s + " is not a valid option for type: Supported")
}
