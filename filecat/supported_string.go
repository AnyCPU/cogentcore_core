// Code generated by "stringer -type=Supported"; DO NOT EDIT.

package filecat

import (
	"errors"
	"strconv"
)

var _ = errors.New("dummy error")

const _Supported_name = "NoSupportAnyAnySupportedAnyFolderAnyArchiveMultipartTarZipGZipSevenZXzBZipDmgSharAnyBackupTrashAnyCodeAdaBashCshCCSharpDDiffEiffelErlangForthFortranFSharpGoHaskellJavaJavaScriptLispLuaMakefileMathematicaMatlabObjCOCamlPascalPerlPhpPrologPythonRRubyRustScalaTclAnyDocBibTeXTeXTexinfoTroffHtmlCssMarkdownRtfMSWordOpenTextOpenPresMSPowerpointEBookEPubAnySheetMSExcelOpenSheetAnyDataCsvJsonXmlProtobufIniTsvUriColorGoGiAnyTextPlainTextICalVCalVCardAnyImagePdfPostscriptGimpGraphVisGifJpegPngSvgTiffPnmPbmPgmPpmXbmXpmAnyModelVrmlX3dAnyAudioAacFlacMp3OggMidiWavAnyVideoMpegMp4MovOgvWmvAviAnyFontTrueTypeWebOpenFontAnyExeAnyBinSupportedN"

var _Supported_index = [...]uint16{0, 9, 12, 24, 33, 43, 52, 55, 58, 62, 68, 70, 74, 77, 81, 90, 95, 102, 105, 109, 112, 113, 119, 120, 124, 130, 136, 141, 148, 154, 156, 163, 167, 177, 181, 184, 192, 203, 209, 213, 218, 224, 228, 231, 237, 243, 244, 248, 252, 257, 260, 266, 272, 275, 282, 287, 291, 294, 302, 305, 311, 319, 327, 339, 344, 348, 356, 363, 372, 379, 382, 386, 389, 397, 400, 403, 406, 411, 415, 422, 431, 435, 439, 444, 452, 455, 465, 469, 477, 480, 484, 487, 490, 494, 497, 500, 503, 506, 509, 512, 520, 524, 527, 535, 538, 542, 545, 548, 552, 555, 563, 567, 570, 573, 576, 579, 582, 589, 597, 608, 614, 620, 630}

func (i Supported) String() string {
	if i < 0 || i >= Supported(len(_Supported_index)-1) {
		return "Supported(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _Supported_name[_Supported_index[i]:_Supported_index[i+1]]
}

func (i *Supported) FromString(s string) error {
	for j := 0; j < len(_Supported_index)-1; j++ {
		if s == _Supported_name[_Supported_index[j]:_Supported_index[j+1]] {
			*i = Supported(j)
			return nil
		}
	}
	return errors.New("String: " + s + " is not a valid option for type: Supported")
}
