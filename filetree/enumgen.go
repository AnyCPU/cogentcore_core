// Code generated by "core generate"; DO NOT EDIT.

package filetree

import (
	"cogentcore.org/core/enums"
	"cogentcore.org/core/giv"
)

var _DirFlagsValues = []DirFlags{0, 1, 2, 3}

// DirFlagsN is the highest valid value for type DirFlags, plus one.
const DirFlagsN DirFlags = 4

var _DirFlagsValueMap = map[string]DirFlags{`Mark`: 0, `IsOpen`: 1, `SortByName`: 2, `SortByModTime`: 3}

var _DirFlagsDescMap = map[DirFlags]string{0: `DirMark means directory is marked -- unmarked entries are deleted post-update`, 1: `DirIsOpen means directory is open -- else closed`, 2: `DirSortByName means sort the directory entries by name. this is mutex with other sorts -- keeping option open for non-binary sort choices.`, 3: `DirSortByModTime means sort the directory entries by modification time`}

var _DirFlagsMap = map[DirFlags]string{0: `Mark`, 1: `IsOpen`, 2: `SortByName`, 3: `SortByModTime`}

// String returns the string representation of this DirFlags value.
func (i DirFlags) String() string { return enums.BitFlagString(i, _DirFlagsValues) }

// BitIndexString returns the string representation of this DirFlags value
// if it is a bit index value (typically an enum constant), and
// not an actual bit flag value.
func (i DirFlags) BitIndexString() string { return enums.String(i, _DirFlagsMap) }

// SetString sets the DirFlags value from its string representation,
// and returns an error if the string is invalid.
func (i *DirFlags) SetString(s string) error { *i = 0; return i.SetStringOr(s) }

// SetStringOr sets the DirFlags value from its string representation
// while preserving any bit flags already set, and returns an
// error if the string is invalid.
func (i *DirFlags) SetStringOr(s string) error {
	return enums.SetStringOr(i, s, _DirFlagsValueMap, "DirFlags")
}

// Int64 returns the DirFlags value as an int64.
func (i DirFlags) Int64() int64 { return int64(i) }

// SetInt64 sets the DirFlags value from an int64.
func (i *DirFlags) SetInt64(in int64) { *i = DirFlags(in) }

// Desc returns the description of the DirFlags value.
func (i DirFlags) Desc() string { return enums.Desc(i, _DirFlagsDescMap) }

// DirFlagsValues returns all possible values for the type DirFlags.
func DirFlagsValues() []DirFlags { return _DirFlagsValues }

// Values returns all possible values for the type DirFlags.
func (i DirFlags) Values() []enums.Enum { return enums.Values(_DirFlagsValues) }

// HasFlag returns whether these bit flags have the given bit flag set.
func (i DirFlags) HasFlag(f enums.BitFlag) bool { return enums.HasFlag((*int64)(&i), f) }

// SetFlag sets the value of the given flags in these flags to the given value.
func (i *DirFlags) SetFlag(on bool, f ...enums.BitFlag) { enums.SetFlag((*int64)(i), on, f...) }

// MarshalText implements the [encoding.TextMarshaler] interface.
func (i DirFlags) MarshalText() ([]byte, error) { return []byte(i.String()), nil }

// UnmarshalText implements the [encoding.TextUnmarshaler] interface.
func (i *DirFlags) UnmarshalText(text []byte) error { return enums.UnmarshalText(i, text, "DirFlags") }

var _NodeFlagsValues = []NodeFlags{11, 12}

// NodeFlagsN is the highest valid value for type NodeFlags, plus one.
const NodeFlagsN NodeFlags = 13

var _NodeFlagsValueMap = map[string]NodeFlags{`Open`: 11, `SymLink`: 12}

var _NodeFlagsDescMap = map[NodeFlags]string{11: `NodeOpen means file is open. For directories, this means that sub-files should be / have been loaded. For files, means that they have been opened e.g., for editing.`, 12: `NodeSymLink indicates that file is a symbolic link. File info is all for the target of the symlink.`}

var _NodeFlagsMap = map[NodeFlags]string{11: `Open`, 12: `SymLink`}

// String returns the string representation of this NodeFlags value.
func (i NodeFlags) String() string {
	return enums.BitFlagStringExtended(i, _NodeFlagsValues, giv.TreeViewFlagsValues())
}

// BitIndexString returns the string representation of this NodeFlags value
// if it is a bit index value (typically an enum constant), and
// not an actual bit flag value.
func (i NodeFlags) BitIndexString() string {
	return enums.BitIndexStringExtended[NodeFlags, giv.TreeViewFlags](i, _NodeFlagsMap)
}

// SetString sets the NodeFlags value from its string representation,
// and returns an error if the string is invalid.
func (i *NodeFlags) SetString(s string) error { *i = 0; return i.SetStringOr(s) }

// SetStringOr sets the NodeFlags value from its string representation
// while preserving any bit flags already set, and returns an
// error if the string is invalid.
func (i *NodeFlags) SetStringOr(s string) error {
	return enums.SetStringOrExtended(i, (*giv.TreeViewFlags)(i), s, _NodeFlagsValueMap)
}

// Int64 returns the NodeFlags value as an int64.
func (i NodeFlags) Int64() int64 { return int64(i) }

// SetInt64 sets the NodeFlags value from an int64.
func (i *NodeFlags) SetInt64(in int64) { *i = NodeFlags(in) }

// Desc returns the description of the NodeFlags value.
func (i NodeFlags) Desc() string {
	return enums.DescExtended[NodeFlags, giv.TreeViewFlags](i, _NodeFlagsDescMap)
}

// NodeFlagsValues returns all possible values for the type NodeFlags.
func NodeFlagsValues() []NodeFlags {
	return enums.ValuesGlobalExtended(_NodeFlagsValues, giv.TreeViewFlagsValues())
}

// Values returns all possible values for the type NodeFlags.
func (i NodeFlags) Values() []enums.Enum {
	return enums.ValuesExtended(_NodeFlagsValues, giv.TreeViewFlagsValues())
}

// HasFlag returns whether these bit flags have the given bit flag set.
func (i NodeFlags) HasFlag(f enums.BitFlag) bool { return enums.HasFlag((*int64)(&i), f) }

// SetFlag sets the value of the given flags in these flags to the given value.
func (i *NodeFlags) SetFlag(on bool, f ...enums.BitFlag) { enums.SetFlag((*int64)(i), on, f...) }

// MarshalText implements the [encoding.TextMarshaler] interface.
func (i NodeFlags) MarshalText() ([]byte, error) { return []byte(i.String()), nil }

// UnmarshalText implements the [encoding.TextUnmarshaler] interface.
func (i *NodeFlags) UnmarshalText(text []byte) error {
	return enums.UnmarshalText(i, text, "NodeFlags")
}
