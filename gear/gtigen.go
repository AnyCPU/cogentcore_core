// Code generated by "goki generate"; DO NOT EDIT.

package gear

import (
	"goki.dev/gi"
	"goki.dev/gti"
	"goki.dev/ki"
)

// AppType is the [gti.Type] for [App]
var AppType = gti.AddType(&gti.Type{Name: "goki.dev/gear.App", IDName: "app", Doc: "App is a GUI view of a gear command.", Embeds: []gti.Field{{Name: "Frame"}}, Fields: []gti.Field{{Name: "Cmd", Doc: "Cmd is the root command associated with this app."}, {Name: "CurCmd", Doc: "CurCmd is the current root command being typed in."}, {Name: "Dir", Doc: "Dir is the current directory of the app."}}, Instance: &App{}})

// NewApp adds a new [App] with
// the given name to the given parent:
// // App is a GUI view of a gear command.
func NewApp(par ki.Ki, name ...string) *App {
	return par.NewChild(AppType, name...).(*App)
}

// KiType returns the [*gti.Type] of [App]
func (t *App) KiType() *gti.Type {
	return AppType
}

// New returns a new [*App] value
func (t *App) New() ki.Ki {
	return &App{}
}

// SetCmd sets the [App.Cmd]:
// Cmd is the root command associated with this app.
func (t *App) SetCmd(v *Cmd) *App { t.Cmd = v; return t }

// SetCurCmd sets the [App.CurCmd]:
// CurCmd is the current root command being typed in.
func (t *App) SetCurCmd(v string) *App { t.CurCmd = v; return t }

// SetDir sets the [App.Dir]:
// Dir is the current directory of the app.
func (t *App) SetDir(v string) *App { t.Dir = v; return t }

// SetTooltip sets the [App.Tooltip]
func (t *App) SetTooltip(v string) *App { t.Tooltip = v; return t }

// SetStackTop sets the [App.StackTop]
func (t *App) SetStackTop(v int) *App { t.StackTop = v; return t }

// SetStripes sets the [App.Stripes]
func (t *App) SetStripes(v gi.Stripes) *App { t.Stripes = v; return t }
