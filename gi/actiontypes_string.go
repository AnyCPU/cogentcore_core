// Code generated by "stringer -type=ActionTypes"; DO NOT EDIT.

package gi

import (
	"errors"
	"strconv"
)

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[ActionMenu-0]
	_ = x[ActionMenuBar-1]
	_ = x[ActionToolBar-2]
	_ = x[ActionTypesN-3]
}

const _ActionTypes_name = "ActionMenuActionMenuBarActionToolBarActionTypesN"

var _ActionTypes_index = [...]uint8{0, 10, 23, 36, 48}

func (i ActionTypes) String() string {
	if i < 0 || i >= ActionTypes(len(_ActionTypes_index)-1) {
		return "ActionTypes(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _ActionTypes_name[_ActionTypes_index[i]:_ActionTypes_index[i+1]]
}

func (i *ActionTypes) FromString(s string) error {
	for j := 0; j < len(_ActionTypes_index)-1; j++ {
		if s == _ActionTypes_name[_ActionTypes_index[j]:_ActionTypes_index[j+1]] {
			*i = ActionTypes(j)
			return nil
		}
	}
	return errors.New("String: " + s + " is not a valid option for type: ActionTypes")
}

var _ActionTypes_descMap = map[ActionTypes]string{
	0: `ActionMenu is an action contained within a popup menu`,
	1: `ActionMenuBar is an action contained within a menu bar`,
	2: `ActionToolBar is an action contained within a toolbar`,
	3: ``,
}

func (i ActionTypes) Desc() string {
	if str, ok := _ActionTypes_descMap[i]; ok {
		return str
	}
	return "ActionTypes(" + strconv.FormatInt(int64(i), 10) + ")"
}
