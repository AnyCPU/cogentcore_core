// Code generated by "stringer -type=ButtonTypes"; DO NOT EDIT.

package gi

import (
	"errors"
	"strconv"
)

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[ButtonFilled-0]
	_ = x[ButtonTonal-1]
	_ = x[ButtonElevated-2]
	_ = x[ButtonOutlined-3]
	_ = x[ButtonText-4]
	_ = x[ButtonTypesN-5]
}

const _ButtonTypes_name = "ButtonFilledButtonTonalButtonElevatedButtonOutlinedButtonTextButtonTypesN"

var _ButtonTypes_index = [...]uint8{0, 12, 23, 37, 51, 61, 73}

func (i ButtonTypes) String() string {
	if i < 0 || i >= ButtonTypes(len(_ButtonTypes_index)-1) {
		return "ButtonTypes(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _ButtonTypes_name[_ButtonTypes_index[i]:_ButtonTypes_index[i+1]]
}

func (i *ButtonTypes) FromString(s string) error {
	for j := 0; j < len(_ButtonTypes_index)-1; j++ {
		if s == _ButtonTypes_name[_ButtonTypes_index[j]:_ButtonTypes_index[j+1]] {
			*i = ButtonTypes(j)
			return nil
		}
	}
	return errors.New("String: " + s + " is not a valid option for type: ButtonTypes")
}

var _ButtonTypes_descMap = map[ButtonTypes]string{
	0: `ButtonFilled is a filled button with a contrasting background color. It should be used for prominent actions, typically those that are the final in a sequence. It is equivalent to Material Design&#39;s filled button.`,
	1: `ButtonTonal is a filled button, similar to [ButtonFilled]. It is used for the same purposes, but it has a lighter background color and less emphasis. It is equivalent to Material Design&#39;s filled tonal button.`,
	2: `ButtonElevated is an elevated button with a light background color and a shadow. It is equivalent to Material Design&#39;s elevated button.`,
	3: `ButtonOutlined is an outlined button that is used for secondary actions that are still important. It is equivalent to Material Design&#39;s outlined button.`,
	4: `ButtonText is a low-importance button with only text and/or an icon and no border, background color, or shadow. They should only be used for low emphasis actions, and you must ensure they stand out from the surrounding context sufficiently. It is equivalent to Material Design&#39;s text and icon buttons.`,
	5: ``,
}

func (i ButtonTypes) Desc() string {
	if str, ok := _ButtonTypes_descMap[i]; ok {
		return str
	}
	return "ButtonTypes(" + strconv.FormatInt(int64(i), 10) + ")"
}
