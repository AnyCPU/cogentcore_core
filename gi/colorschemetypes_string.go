// Code generated by "stringer -type=ColorSchemeTypes"; DO NOT EDIT.

package gi

import (
	"errors"
	"strconv"
)

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[ColorSchemeLight-0]
	_ = x[ColorSchemeDark-1]
	_ = x[ColorSchemesN-2]
}

const _ColorSchemeTypes_name = "ColorSchemeLightColorSchemeDarkColorSchemesN"

var _ColorSchemeTypes_index = [...]uint8{0, 16, 31, 44}

func (i ColorSchemeTypes) String() string {
	if i < 0 || i >= ColorSchemeTypes(len(_ColorSchemeTypes_index)-1) {
		return "ColorSchemeTypes(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _ColorSchemeTypes_name[_ColorSchemeTypes_index[i]:_ColorSchemeTypes_index[i+1]]
}

func (i *ColorSchemeTypes) FromString(s string) error {
	for j := 0; j < len(_ColorSchemeTypes_index)-1; j++ {
		if s == _ColorSchemeTypes_name[_ColorSchemeTypes_index[j]:_ColorSchemeTypes_index[j+1]] {
			*i = ColorSchemeTypes(j)
			return nil
		}
	}
	return errors.New("String: " + s + " is not a valid option for type: ColorSchemeTypes")
}

var _ColorSchemeTypes_descMap = map[ColorSchemeTypes]string{
	0: `ColorSchemeLight is a light color scheme
`,
	1: `ColorSchemeDark is a dark color scheme
`,
	2: ``,
}

func (i ColorSchemeTypes) Desc() string {
	if str, ok := _ColorSchemeTypes_descMap[i]; ok {
		return str
	}
	return "ColorSchemeTypes(" + strconv.FormatInt(int64(i), 10) + ")"
}
