// Code generated by "stringer -type=ComboBoxTypes"; DO NOT EDIT.

package gi

import (
	"errors"
	"strconv"
)

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[ComboBoxFilled-0]
	_ = x[ComboBoxOutlined-1]
	_ = x[ComboBoxTypesN-2]
}

const _ComboBoxTypes_name = "ComboBoxFilledComboBoxOutlinedComboBoxTypesN"

var _ComboBoxTypes_index = [...]uint8{0, 14, 30, 44}

func (i ComboBoxTypes) String() string {
	if i < 0 || i >= ComboBoxTypes(len(_ComboBoxTypes_index)-1) {
		return "ComboBoxTypes(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _ComboBoxTypes_name[_ComboBoxTypes_index[i]:_ComboBoxTypes_index[i+1]]
}

func (i *ComboBoxTypes) FromString(s string) error {
	for j := 0; j < len(_ComboBoxTypes_index)-1; j++ {
		if s == _ComboBoxTypes_name[_ComboBoxTypes_index[j]:_ComboBoxTypes_index[j+1]] {
			*i = ComboBoxTypes(j)
			return nil
		}
	}
	return errors.New("String: " + s + " is not a valid option for type: ComboBoxTypes")
}

var _ComboBoxTypes_descMap = map[ComboBoxTypes]string{
	0: `ComboBoxFilled represents a filled ComboBox with a background color and a bottom border`,
	1: `ComboBoxOutlined represents an outlined ComboBox with a border on all sides and no background color`,
	2: ``,
}

func (i ComboBoxTypes) Desc() string {
	if str, ok := _ComboBoxTypes_descMap[i]; ok {
		return str
	}
	return "ComboBoxTypes(" + strconv.FormatInt(int64(i), 10) + ")"
}
