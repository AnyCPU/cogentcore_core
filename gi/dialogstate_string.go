// Code generated by "stringer -type=DialogState"; DO NOT EDIT.

package gi

import (
	"errors"
	"strconv"
)

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[DialogExists-0]
	_ = x[DialogOpenModal-1]
	_ = x[DialogOpenModeless-2]
	_ = x[DialogAccepted-3]
	_ = x[DialogCanceled-4]
	_ = x[DialogStateN-5]
}

const _DialogState_name = "DialogExistsDialogOpenModalDialogOpenModelessDialogAcceptedDialogCanceledDialogStateN"

var _DialogState_index = [...]uint8{0, 12, 27, 45, 59, 73, 85}

func (i DialogState) String() string {
	if i < 0 || i >= DialogState(len(_DialogState_index)-1) {
		return "DialogState(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _DialogState_name[_DialogState_index[i]:_DialogState_index[i+1]]
}

func (i *DialogState) FromString(s string) error {
	for j := 0; j < len(_DialogState_index)-1; j++ {
		if s == _DialogState_name[_DialogState_index[j]:_DialogState_index[j+1]] {
			*i = DialogState(j)
			return nil
		}
	}
	return errors.New("String: " + s + " is not a valid option for type: DialogState")
}

var _DialogState_descMap = map[DialogState]string{
	0: `DialogExists is the existential state -- struct exists and is likely
being constructed.
`,
	1: `DialogOpenModal means dialog is open in a modal state, blocking all other input.
`,
	2: `DialogOpenModeless means dialog is open in a modeless state, allowing other input.
`,
	3: `DialogAccepted means Ok was pressed -- dialog accepted.
`,
	4: `DialogCanceled means Cancel was pressed -- button canceled.
`,
	5: ``,
}

func (i DialogState) Desc() string {
	if str, ok := _DialogState_descMap[i]; ok {
		return str
	}
	return "DialogState(" + strconv.FormatInt(int64(i), 10) + ")"
}
