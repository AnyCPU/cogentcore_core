// Code generated by "stringer -type=FocusChanges"; DO NOT EDIT.

package gi

import (
	"errors"
	"strconv"
)

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[FocusLost-0]
	_ = x[FocusGot-1]
	_ = x[FocusInactive-2]
	_ = x[FocusActive-3]
	_ = x[FocusChangesN-4]
}

const _FocusChanges_name = "FocusLostFocusGotFocusInactiveFocusActiveFocusChangesN"

var _FocusChanges_index = [...]uint8{0, 9, 17, 30, 41, 54}

func (i FocusChanges) String() string {
	if i < 0 || i >= FocusChanges(len(_FocusChanges_index)-1) {
		return "FocusChanges(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _FocusChanges_name[_FocusChanges_index[i]:_FocusChanges_index[i+1]]
}

func (i *FocusChanges) FromString(s string) error {
	for j := 0; j < len(_FocusChanges_index)-1; j++ {
		if s == _FocusChanges_name[_FocusChanges_index[j]:_FocusChanges_index[j+1]] {
			*i = FocusChanges(j)
			return nil
		}
	}
	return errors.New("String: " + s + " is not a valid option for type: FocusChanges")
}

var _FocusChanges_descMap = map[FocusChanges]string{
	0: `FocusLost means that keyboard focus is on a different widget (typically) and this one lost focus`,
	1: `FocusGot means that this widget just got keyboard focus`,
	2: `FocusInactive means that although this widget retains keyboard focus (nobody else has it), the user has clicked on something else and therefore the focus should be considered inactive (distracted), and any changes should be applied as this other action could result in closing of a dialog etc.  Keyboard events will still be sent to the focus widget, but it is up to the widget if or how to process them (e.g., it could reactivate on its own).`,
	3: `FocusActive means that the user has moved the mouse back into the focused widget to resume active keyboard focus.`,
	4: ``,
}

func (i FocusChanges) Desc() string {
	if str, ok := _FocusChanges_descMap[i]; ok {
		return str
	}
	return "FocusChanges(" + strconv.FormatInt(int64(i), 10) + ")"
}
