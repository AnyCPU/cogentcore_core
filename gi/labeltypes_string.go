// Code generated by "stringer -type=LabelTypes"; DO NOT EDIT.

package gi

import (
	"errors"
	"strconv"
)

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[LabelP-0]
	_ = x[LabelLabel-1]
	_ = x[LabelH1-2]
	_ = x[LabelH2-3]
	_ = x[LabelH3-4]
	_ = x[LabelH4-5]
	_ = x[LabelH5-6]
	_ = x[LabelH6-7]
	_ = x[LabelTypesN-8]
}

const _LabelTypes_name = "LabelPLabelLabelLabelH1LabelH2LabelH3LabelH4LabelH5LabelH6LabelTypesN"

var _LabelTypes_index = [...]uint8{0, 6, 16, 23, 30, 37, 44, 51, 58, 69}

func (i LabelTypes) String() string {
	if i < 0 || i >= LabelTypes(len(_LabelTypes_index)-1) {
		return "LabelTypes(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _LabelTypes_name[_LabelTypes_index[i]:_LabelTypes_index[i+1]]
}

func (i *LabelTypes) FromString(s string) error {
	for j := 0; j < len(_LabelTypes_index)-1; j++ {
		if s == _LabelTypes_name[_LabelTypes_index[j]:_LabelTypes_index[j+1]] {
			*i = LabelTypes(j)
			return nil
		}
	}
	return errors.New("String: " + s + " is not a valid option for type: LabelTypes")
}

var _LabelTypes_descMap = map[LabelTypes]string{
	0: `LabelP is a default paragraph-style label,
similar to HTML's <p> element
`,
	1: `LabelLabel is a label that labels something else
like an input, similar to HTML's <label> element
`,
	2: `LabelH1 is a large heading-style label,
similar to HTML's <h1> element
`,
	3: `LabelH2 is a heading-style label slightly
smaller than H1, similar to HTML's <h2> element
`,
	4: `LabelH3 is a heading-style label slightly
smaller than H2, similar to HTML's <h3> element
`,
	5: `LabelH4 is a heading-style label slightly
smaller than H3, similar to HTML's <h4> element
`,
	6: `LabelH5 is a heading-style label slightly
smaller than H4, similar to HTML's <h5> element
`,
	7: `LabelH6 is a heading-style label slightly
smaller than H5, similar to HTML's <h6> element
`,
	8: ``,
}

func (i LabelTypes) Desc() string {
	if str, ok := _LabelTypes_descMap[i]; ok {
		return str
	}
	return "LabelTypes(" + strconv.FormatInt(int64(i), 10) + ")"
}
