// Code generated by "stringer -type=NodeFlags"; DO NOT EDIT.

package gi

import (
	"errors"
	"strconv"
)

var _ = errors.New("dummy error")

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[NoLayout-12]
	_ = x[EventsConnected-13]
	_ = x[CanFocus-14]
	_ = x[HasFocus-15]
	_ = x[FullReRender-16]
	_ = x[ReRenderAnchor-17]
	_ = x[Invisible-18]
	_ = x[Inactive-19]
	_ = x[Selected-20]
	_ = x[MouseHasEntered-21]
	_ = x[DNDHasEntered-22]
	_ = x[NodeDragging-23]
	_ = x[InstaDrag-24]
	_ = x[NodeFlagsN-25]
	_ = x[TextFieldFocusActive-25]
}

const _NodeFlags_name = "NoLayoutEventsConnectedCanFocusHasFocusFullReRenderReRenderAnchorInvisibleInactiveSelectedMouseHasEnteredDNDHasEnteredNodeDraggingInstaDragNodeFlagsN"

var _NodeFlags_index = [...]uint8{0, 8, 23, 31, 39, 51, 65, 74, 82, 90, 105, 118, 130, 139, 149}

func (i NodeFlags) String() string {
	i -= 12
	if i < 0 || i >= NodeFlags(len(_NodeFlags_index)-1) {
		return "NodeFlags(" + strconv.FormatInt(int64(i+12), 10) + ")"
	}
	return _NodeFlags_name[_NodeFlags_index[i]:_NodeFlags_index[i+1]]
}

func StringToNodeFlags(s string) (NodeFlags, error) {
	for i := 0; i < len(_NodeFlags_index)-1; i++ {
		if s == _NodeFlags_name[_NodeFlags_index[i]:_NodeFlags_index[i+1]] {
			return NodeFlags(i + 12), nil
		}
	}
	return 0, errors.New("String: " + s + " is not a valid option for type: NodeFlags")
}
