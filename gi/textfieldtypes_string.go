// Code generated by "stringer -type=TextFieldTypes"; DO NOT EDIT.

package gi

import (
	"errors"
	"strconv"
)

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[TextFieldFilled-0]
	_ = x[TextFieldOutlined-1]
	_ = x[TextFieldTypesN-2]
}

const _TextFieldTypes_name = "TextFieldFilledTextFieldOutlinedTextFieldTypesN"

var _TextFieldTypes_index = [...]uint8{0, 15, 32, 47}

func (i TextFieldTypes) String() string {
	if i < 0 || i >= TextFieldTypes(len(_TextFieldTypes_index)-1) {
		return "TextFieldTypes(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _TextFieldTypes_name[_TextFieldTypes_index[i]:_TextFieldTypes_index[i+1]]
}

func (i *TextFieldTypes) FromString(s string) error {
	for j := 0; j < len(_TextFieldTypes_index)-1; j++ {
		if s == _TextFieldTypes_name[_TextFieldTypes_index[j]:_TextFieldTypes_index[j+1]] {
			*i = TextFieldTypes(j)
			return nil
		}
	}
	return errors.New("String: " + s + " is not a valid option for type: TextFieldTypes")
}

var _TextFieldTypes_descMap = map[TextFieldTypes]string{
	0: `TextFieldFilled represents a filled TextField with a background color and a bottom border`,
	1: `TextFieldOutlined represents an outlined TextField with a border on all sides and no background color`,
	2: ``,
}

func (i TextFieldTypes) Desc() string {
	if str, ok := _TextFieldTypes_descMap[i]; ok {
		return str
	}
	return "TextFieldTypes(" + strconv.FormatInt(int64(i), 10) + ")"
}
