// Code generated by "stringer -type=WidgetStates"; DO NOT EDIT.

package gi

import (
	"errors"
	"strconv"
)

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[WidgetActive-0]
	_ = x[WidgetChecked-1]
	_ = x[WidgetDisabled-2]
	_ = x[WidgetEmpty-3]
	_ = x[WidgetEnabled-4]
	_ = x[WidgetFirstChild-5]
	_ = x[WidgetFirstOfType-6]
	_ = x[WidgetFocus-7]
	_ = x[WidgetHover-8]
	_ = x[WidgetInRange-9]
	_ = x[WidgetInvalid-10]
	_ = x[WidgetLastChild-11]
	_ = x[WidgetLastOfType-12]
	_ = x[WidgetLink-13]
	_ = x[WidgetOnlyOfType-14]
	_ = x[WidgetOnlyChild-15]
	_ = x[WidgetOptional-16]
	_ = x[WidgetOutOfRange-17]
	_ = x[WidgetReadOnly-18]
	_ = x[WidgetReadWrite-19]
	_ = x[WidgetRequired-20]
	_ = x[WidgetRoot-21]
	_ = x[WidgetTarget-22]
	_ = x[WidgetValid-23]
	_ = x[WidgetVisited-24]
	_ = x[WidgetStatesN-25]
}

const _WidgetStates_name = "WidgetActiveWidgetCheckedWidgetDisabledWidgetEmptyWidgetEnabledWidgetFirstChildWidgetFirstOfTypeWidgetFocusWidgetHoverWidgetInRangeWidgetInvalidWidgetLastChildWidgetLastOfTypeWidgetLinkWidgetOnlyOfTypeWidgetOnlyChildWidgetOptionalWidgetOutOfRangeWidgetReadOnlyWidgetReadWriteWidgetRequiredWidgetRootWidgetTargetWidgetValidWidgetVisitedWidgetStatesN"

var _WidgetStates_index = [...]uint16{0, 12, 25, 39, 50, 63, 79, 96, 107, 118, 131, 144, 159, 175, 185, 201, 216, 230, 246, 260, 275, 289, 299, 311, 322, 335, 348}

func (i WidgetStates) String() string {
	if i < 0 || i >= WidgetStates(len(_WidgetStates_index)-1) {
		return "WidgetStates(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _WidgetStates_name[_WidgetStates_index[i]:_WidgetStates_index[i+1]]
}

func (i *WidgetStates) FromString(s string) error {
	for j := 0; j < len(_WidgetStates_index)-1; j++ {
		if s == _WidgetStates_name[_WidgetStates_index[j]:_WidgetStates_index[j+1]] {
			*i = WidgetStates(j)
			return nil
		}
	}
	return errors.New("String: " + s + " is not a valid option for type: WidgetStates")
}

var _WidgetStates_descMap = map[WidgetStates]string{
	0:  `WidgetActive is applied to widgets that are currently being interacted with (pressed down) by the user`,
	1:  `WidgetChecked is applied to widgets that are currently checked (only applies to checkboxes)`,
	2:  `WidgetDisabled is applied to widgets that are disabled`,
	3:  `WidgetEmpty is applied to widgets that have no children`,
	4:  `WidgetEnabled is applied to widgets that are enabled`,
	5:  `WidgetFirstChild is applied to widgets that are the first child of their parent`,
	6:  `WidgetFirstOfType is applied to widgets that are the first child of their parent with their type`,
	7:  `WidgetFocus is applied to widgets that have focus (ie: by keyboard navigation)`,
	8:  `WidgetHover is applied to widgets that are being hovered over by a mouse cursor or have been long-pressed on mobile`,
	9:  `WidgetInRange is applied to widgets with a value that is in the range specified by the Min and Max fields (only applies to inputs)`,
	10: `WidgetInvalid is applied to widgets with an invalid value (only applies to inputs)`,
	11: `WidgetLastChild is applied to widgets that are the last child of their parent`,
	12: `WidgetLastOfType is applied to widgets that are the last child of their parent with their type`,
	13: `WidgetLink is applied to widgets that are previously unvisited links`,
	14: `WidgetOnlyOfType is applied to widgets that are the only child of their parent with their type`,
	15: `WidgetOnlyChild is applied to widgets that are the only child of their parent`,
	16: `WidgetOptional is applied to widgets that have a false Required field (only applies to inputs)`,
	17: `WidgetOutOfRange is applied to widgets with a value that is not in the range specified by the Min and Max fields (only applies to inputs)`,
	18: `WidgetReadOnly is applied to widgets that are read-only; applies to inputs that have a true ReadOnly field and other read-only elements like text and buttons`,
	19: `WidgetReadWrite is applied to widgets that are both readable and writeable; only applies to inputs that have a false ReadOnly field and aren&#39;t disabled`,
	20: `WidgetRequired is applied to widgets that a true Required field (only applies to inputs)`,
	21: `WidgetRoot is applied to widgets that are the root element of the GUI`,
	22: `WidgetTarget is applied to widgets that have been navigated to by a URL containing their anchor name (ie: a targeted heading)`,
	23: `WidgetValid is applied to widgets with a valid value (only applies to inputs)`,
	24: `WidgetVisited is applied to widgets that are previously visited links`,
	25: ``,
}

func (i WidgetStates) Desc() string {
	if str, ok := _WidgetStates_descMap[i]; ok {
		return str
	}
	return "WidgetStates(" + strconv.FormatInt(int64(i), 10) + ")"
}
