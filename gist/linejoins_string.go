// Code generated by "stringer -type=LineJoins"; DO NOT EDIT.

package gist

import (
	"errors"
	"strconv"
)

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[LineJoinMiter-0]
	_ = x[LineJoinMiterClip-1]
	_ = x[LineJoinRound-2]
	_ = x[LineJoinBevel-3]
	_ = x[LineJoinArcs-4]
	_ = x[LineJoinArcsClip-5]
	_ = x[LineJoinsN-6]
}

const _LineJoins_name = "LineJoinMiterLineJoinMiterClipLineJoinRoundLineJoinBevelLineJoinArcsLineJoinArcsClipLineJoinsN"

var _LineJoins_index = [...]uint8{0, 13, 30, 43, 56, 68, 84, 94}

func (i LineJoins) String() string {
	if i < 0 || i >= LineJoins(len(_LineJoins_index)-1) {
		return "LineJoins(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _LineJoins_name[_LineJoins_index[i]:_LineJoins_index[i+1]]
}

func (i *LineJoins) FromString(s string) error {
	for j := 0; j < len(_LineJoins_index)-1; j++ {
		if s == _LineJoins_name[_LineJoins_index[j]:_LineJoins_index[j+1]] {
			*i = LineJoins(j)
			return nil
		}
	}
	return errors.New("String: " + s + " is not a valid option for type: LineJoins")
}

var _LineJoins_descMap = map[LineJoins]string{
	0: ``,
	1: ``,
	2: ``,
	3: ``,
	4: ``,
	5: `rasterx extension`,
	6: ``,
}

func (i LineJoins) Desc() string {
	if str, ok := _LineJoins_descMap[i]; ok {
		return str
	}
	return "LineJoins(" + strconv.FormatInt(int64(i), 10) + ")"
}
