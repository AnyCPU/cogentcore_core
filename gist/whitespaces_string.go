// Code generated by "stringer -type=WhiteSpaces"; DO NOT EDIT.

package gist

import (
	"errors"
	"strconv"
)

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[WhiteSpaceNormal-0]
	_ = x[WhiteSpaceNowrap-1]
	_ = x[WhiteSpacePre-2]
	_ = x[WhiteSpacePreLine-3]
	_ = x[WhiteSpacePreWrap-4]
	_ = x[WhiteSpacesN-5]
}

const _WhiteSpaces_name = "WhiteSpaceNormalWhiteSpaceNowrapWhiteSpacePreWhiteSpacePreLineWhiteSpacePreWrapWhiteSpacesN"

var _WhiteSpaces_index = [...]uint8{0, 16, 32, 45, 62, 79, 91}

func (i WhiteSpaces) String() string {
	if i < 0 || i >= WhiteSpaces(len(_WhiteSpaces_index)-1) {
		return "WhiteSpaces(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _WhiteSpaces_name[_WhiteSpaces_index[i]:_WhiteSpaces_index[i+1]]
}

func (i *WhiteSpaces) FromString(s string) error {
	for j := 0; j < len(_WhiteSpaces_index)-1; j++ {
		if s == _WhiteSpaces_name[_WhiteSpaces_index[j]:_WhiteSpaces_index[j+1]] {
			*i = WhiteSpaces(j)
			return nil
		}
	}
	return errors.New("String: " + s + " is not a valid option for type: WhiteSpaces")
}

var _WhiteSpaces_descMap = map[WhiteSpaces]string{
	0: `WhiteSpaceNormal means that all white space is collapsed to a single space, and text wraps when necessary`,
	1: `WhiteSpaceNowrap means that sequences of whitespace will collapse into a single whitespace. Text will never wrap to the next line. The text continues on the same line until a &lt;br&gt; tag is encountered`,
	2: `WhiteSpacePre means that whitespace is preserved by the browser. Text will only wrap on line breaks. Acts like the &lt;pre&gt; tag in HTML. This invokes a different hand-written parser because the default golang parser automatically throws away whitespace`,
	3: `WhiteSpacePreLine means that sequences of whitespace will collapse into a single whitespace. Text will wrap when necessary, and on line breaks`,
	4: `WhiteSpacePreWrap means that whitespace is preserved by the browser. Text will wrap when necessary, and on line breaks`,
	5: ``,
}

func (i WhiteSpaces) Desc() string {
	if str, ok := _WhiteSpaces_descMap[i]; ok {
		return str
	}
	return "WhiteSpaces(" + strconv.FormatInt(int64(i), 10) + ")"
}
