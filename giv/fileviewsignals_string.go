// Code generated by "stringer -type=FileViewSignals"; DO NOT EDIT.

package giv

import (
	"errors"
	"strconv"
)

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[FileViewDoubleClicked-0]
	_ = x[FileViewWillUpdate-1]
	_ = x[FileViewUpdated-2]
	_ = x[FileViewNewFolder-3]
	_ = x[FileViewFavAdded-4]
	_ = x[FileViewSignalsN-5]
}

const _FileViewSignals_name = "FileViewDoubleClickedFileViewWillUpdateFileViewUpdatedFileViewNewFolderFileViewFavAddedFileViewSignalsN"

var _FileViewSignals_index = [...]uint8{0, 21, 39, 54, 71, 87, 103}

func (i FileViewSignals) String() string {
	if i < 0 || i >= FileViewSignals(len(_FileViewSignals_index)-1) {
		return "FileViewSignals(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _FileViewSignals_name[_FileViewSignals_index[i]:_FileViewSignals_index[i+1]]
}

func (i *FileViewSignals) FromString(s string) error {
	for j := 0; j < len(_FileViewSignals_index)-1; j++ {
		if s == _FileViewSignals_name[_FileViewSignals_index[j]:_FileViewSignals_index[j+1]] {
			*i = FileViewSignals(j)
			return nil
		}
	}
	return errors.New("String: " + s + " is not a valid option for type: FileViewSignals")
}

var _FileViewSignals_descMap = map[FileViewSignals]string{
	0: `FileViewDoubleClicked emitted for double-click on a non-directory file in table view (data is full selected file name w/ path) -- typically closes dialog.`,
	1: `FileViewWillUpdate emitted when list of files is about to be updated based on user action (data is current path) -- current DirPath will be used -- can intervene here if needed.`,
	2: `FileViewUpdated emitted after list of files has been updated (data is current path).`,
	3: `FileViewNewFolder emitted when a new folder was created (data is current path).`,
	4: `FileViewFavAdded emitted when a new favorite was added (data is new favorite path).`,
	5: ``,
}

func (i FileViewSignals) Desc() string {
	if str, ok := _FileViewSignals_descMap[i]; ok {
		return str
	}
	return "FileViewSignals(" + strconv.FormatInt(int64(i), 10) + ")"
}
