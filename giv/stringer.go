// Code generated by "stringer -output stringer.go -type=FileNodeFlags,DirFlags,FileViewSignals,MapViewSignals,MethViewFlags,ArgDataFlags,SliceViewSignals,TextBufSignals,TextBufFlags,TextViewSignals,TextViewStates,TextViewFlags,TreeViewSignals,TreeViewFlags,TreeViewStates"; DO NOT EDIT.

package giv

import (
	"errors"
	"strconv"
)

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[FileNodeOpen-11]
	_ = x[FileNodeSymLink-12]
	_ = x[FileNodeFlagsN-13]
}

const _FileNodeFlags_name = "FileNodeOpenFileNodeSymLinkFileNodeFlagsN"

var _FileNodeFlags_index = [...]uint8{0, 12, 27, 41}

func (i FileNodeFlags) String() string {
	i -= 11
	if i < 0 || i >= FileNodeFlags(len(_FileNodeFlags_index)-1) {
		return "FileNodeFlags(" + strconv.FormatInt(int64(i+11), 10) + ")"
	}
	return _FileNodeFlags_name[_FileNodeFlags_index[i]:_FileNodeFlags_index[i+1]]
}

func StringToFileNodeFlags(s string) (FileNodeFlags, error) {
	for i := 0; i < len(_FileNodeFlags_index)-1; i++ {
		if s == _FileNodeFlags_name[_FileNodeFlags_index[i]:_FileNodeFlags_index[i+1]] {
			return FileNodeFlags(i + 11), nil
		}
	}
	return 0, errors.New("String: " + s + " is not a valid option for type: FileNodeFlags")
}

var _FileNodeFlags_descMap = map[FileNodeFlags]string{
	11: `FileNodeOpen means file is open -- for directories, this means that sub-files should be / have been loaded -- for files, means that they have been opened e.g., for editing`,
	12: `FileNodeSymLink indicates that file is a symbolic link -- file info is all for the target of the symlink`,
	13: ``,
}

func (i FileNodeFlags) Desc() string {
	if str, ok := _FileNodeFlags_descMap[i]; ok {
		return str
	}
	return "FileNodeFlags(" + strconv.FormatInt(int64(i), 10) + ")"
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[DirMark-0]
	_ = x[DirIsOpen-1]
	_ = x[DirSortByName-2]
	_ = x[DirSortByModTime-3]
	_ = x[DirFlagsN-4]
}

const _DirFlags_name = "DirMarkDirIsOpenDirSortByNameDirSortByModTimeDirFlagsN"

var _DirFlags_index = [...]uint8{0, 7, 16, 29, 45, 54}

func (i DirFlags) String() string {
	if i < 0 || i >= DirFlags(len(_DirFlags_index)-1) {
		return "DirFlags(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _DirFlags_name[_DirFlags_index[i]:_DirFlags_index[i+1]]
}

func (i *DirFlags) FromString(s string) error {
	for j := 0; j < len(_DirFlags_index)-1; j++ {
		if s == _DirFlags_name[_DirFlags_index[j]:_DirFlags_index[j+1]] {
			*i = DirFlags(j)
			return nil
		}
	}
	return errors.New("String: " + s + " is not a valid option for type: DirFlags")
}

var _DirFlags_descMap = map[DirFlags]string{
	0: `DirMark means directory is marked -- unmarked entries are deleted post-update`,
	1: `DirIsOpen means directory is open -- else closed`,
	2: `DirSortByName means sort the directory entries by name. this is mutex with other sorts -- keeping option open for non-binary sort choices.`,
	3: `DirSortByModTime means sort the directory entries by modification time`,
	4: ``,
}

func (i DirFlags) Desc() string {
	if str, ok := _DirFlags_descMap[i]; ok {
		return str
	}
	return "DirFlags(" + strconv.FormatInt(int64(i), 10) + ")"
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[FileViewDoubleClicked-0]
	_ = x[FileViewWillUpdate-1]
	_ = x[FileViewUpdated-2]
	_ = x[FileViewNewFolder-3]
	_ = x[FileViewFavAdded-4]
	_ = x[FileViewSignalsN-5]
}

const _FileViewSignals_name = "FileViewDoubleClickedFileViewWillUpdateFileViewUpdatedFileViewNewFolderFileViewFavAddedFileViewSignalsN"

var _FileViewSignals_index = [...]uint8{0, 21, 39, 54, 71, 87, 103}

func (i FileViewSignals) String() string {
	if i < 0 || i >= FileViewSignals(len(_FileViewSignals_index)-1) {
		return "FileViewSignals(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _FileViewSignals_name[_FileViewSignals_index[i]:_FileViewSignals_index[i+1]]
}

func (i *FileViewSignals) FromString(s string) error {
	for j := 0; j < len(_FileViewSignals_index)-1; j++ {
		if s == _FileViewSignals_name[_FileViewSignals_index[j]:_FileViewSignals_index[j+1]] {
			*i = FileViewSignals(j)
			return nil
		}
	}
	return errors.New("String: " + s + " is not a valid option for type: FileViewSignals")
}

var _FileViewSignals_descMap = map[FileViewSignals]string{
	0: `FileViewDoubleClicked emitted for double-click on a non-directory file in table view (data is full selected file name w/ path) -- typically closes dialog.`,
	1: `FileViewWillUpdate emitted when list of files is about to be updated based on user action (data is current path) -- current DirPath will be used -- can intervene here if needed.`,
	2: `FileViewUpdated emitted after list of files has been updated (data is current path).`,
	3: `FileViewNewFolder emitted when a new folder was created (data is current path).`,
	4: `FileViewFavAdded emitted when a new favorite was added (data is new favorite path).`,
	5: ``,
}

func (i FileViewSignals) Desc() string {
	if str, ok := _FileViewSignals_descMap[i]; ok {
		return str
	}
	return "FileViewSignals(" + strconv.FormatInt(int64(i), 10) + ")"
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[MapViewDoubleClicked-0]
	_ = x[MapViewAdded-1]
	_ = x[MapViewDeleted-2]
	_ = x[MapViewSignalsN-3]
}

const _MapViewSignals_name = "MapViewDoubleClickedMapViewAddedMapViewDeletedMapViewSignalsN"

var _MapViewSignals_index = [...]uint8{0, 20, 32, 46, 61}

func (i MapViewSignals) String() string {
	if i < 0 || i >= MapViewSignals(len(_MapViewSignals_index)-1) {
		return "MapViewSignals(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _MapViewSignals_name[_MapViewSignals_index[i]:_MapViewSignals_index[i+1]]
}

func (i *MapViewSignals) FromString(s string) error {
	for j := 0; j < len(_MapViewSignals_index)-1; j++ {
		if s == _MapViewSignals_name[_MapViewSignals_index[j]:_MapViewSignals_index[j+1]] {
			*i = MapViewSignals(j)
			return nil
		}
	}
	return errors.New("String: " + s + " is not a valid option for type: MapViewSignals")
}

var _MapViewSignals_descMap = map[MapViewSignals]string{
	0: `MapViewDoubleClicked emitted during inactive mode when item double-clicked -- can be used for accepting dialog.`,
	1: `MapViewAdded emitted when a new blank item is added -- no data is sent.`,
	2: `MapViewDeleted emitted when an item is deleted -- data is key of item deleted`,
	3: ``,
}

func (i MapViewSignals) Desc() string {
	if str, ok := _MapViewSignals_descMap[i]; ok {
		return str
	}
	return "MapViewSignals(" + strconv.FormatInt(int64(i), 10) + ")"
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[MethViewConfirm-0]
	_ = x[MethViewShowReturn-1]
	_ = x[MethViewNoUpdateAfter-2]
	_ = x[MethViewHasSubMenu-3]
	_ = x[MethViewHasSubMenuVal-4]
	_ = x[MethViewKeyFun-5]
	_ = x[MethViewFlagsN-6]
}

const _MethViewFlags_name = "MethViewConfirmMethViewShowReturnMethViewNoUpdateAfterMethViewHasSubMenuMethViewHasSubMenuValMethViewKeyFunMethViewFlagsN"

var _MethViewFlags_index = [...]uint8{0, 15, 33, 54, 72, 93, 107, 121}

func (i MethViewFlags) String() string {
	if i < 0 || i >= MethViewFlags(len(_MethViewFlags_index)-1) {
		return "MethViewFlags(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _MethViewFlags_name[_MethViewFlags_index[i]:_MethViewFlags_index[i+1]]
}

func (i *MethViewFlags) FromString(s string) error {
	for j := 0; j < len(_MethViewFlags_index)-1; j++ {
		if s == _MethViewFlags_name[_MethViewFlags_index[j]:_MethViewFlags_index[j+1]] {
			*i = MethViewFlags(j)
			return nil
		}
	}
	return errors.New("String: " + s + " is not a valid option for type: MethViewFlags")
}

var _MethViewFlags_descMap = map[MethViewFlags]string{
	0: `MethViewConfirm confirms action before proceeding`,
	1: `MethViewShowReturn shows the return value from the method`,
	2: `MethViewNoUpdateAfter means do not update window after method runs (default is to do so)`,
	3: `MethViewHasSubMenu means that this action has a submenu option -- argument values will be selected from the auto-generated submenu`,
	4: `MethViewHasSubMenuVal means that this action was called using a submenu and the SubMenuVal has the selected value`,
	5: `MethViewKeyFun means this action&#39;s only function is to emit the key fun`,
	6: ``,
}

func (i MethViewFlags) Desc() string {
	if str, ok := _MethViewFlags_descMap[i]; ok {
		return str
	}
	return "MethViewFlags(" + strconv.FormatInt(int64(i), 10) + ")"
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[ArgDataHasDef-0]
	_ = x[ArgDataValSet-1]
	_ = x[ArgDataFlagsN-2]
}

const _ArgDataFlags_name = "ArgDataHasDefArgDataValSetArgDataFlagsN"

var _ArgDataFlags_index = [...]uint8{0, 13, 26, 39}

func (i ArgDataFlags) String() string {
	if i < 0 || i >= ArgDataFlags(len(_ArgDataFlags_index)-1) {
		return "ArgDataFlags(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _ArgDataFlags_name[_ArgDataFlags_index[i]:_ArgDataFlags_index[i+1]]
}

func (i *ArgDataFlags) FromString(s string) error {
	for j := 0; j < len(_ArgDataFlags_index)-1; j++ {
		if s == _ArgDataFlags_name[_ArgDataFlags_index[j]:_ArgDataFlags_index[j+1]] {
			*i = ArgDataFlags(j)
			return nil
		}
	}
	return errors.New("String: " + s + " is not a valid option for type: ArgDataFlags")
}

var _ArgDataFlags_descMap = map[ArgDataFlags]string{
	0: `ArgDataHasDef means that there was a Default value set`,
	1: `ArgDataValSet means that there is a fixed value for this arg, given in the config props and set in the Default, so it does not need to be prompted for`,
	2: ``,
}

func (i ArgDataFlags) Desc() string {
	if str, ok := _ArgDataFlags_descMap[i]; ok {
		return str
	}
	return "ArgDataFlags(" + strconv.FormatInt(int64(i), 10) + ")"
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[SliceViewDoubleClicked-0]
	_ = x[SliceViewInserted-1]
	_ = x[SliceViewDeleted-2]
	_ = x[SliceViewSignalsN-3]
}

const _SliceViewSignals_name = "SliceViewDoubleClickedSliceViewInsertedSliceViewDeletedSliceViewSignalsN"

var _SliceViewSignals_index = [...]uint8{0, 22, 39, 55, 72}

func (i SliceViewSignals) String() string {
	if i < 0 || i >= SliceViewSignals(len(_SliceViewSignals_index)-1) {
		return "SliceViewSignals(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _SliceViewSignals_name[_SliceViewSignals_index[i]:_SliceViewSignals_index[i+1]]
}

func (i *SliceViewSignals) FromString(s string) error {
	for j := 0; j < len(_SliceViewSignals_index)-1; j++ {
		if s == _SliceViewSignals_name[_SliceViewSignals_index[j]:_SliceViewSignals_index[j+1]] {
			*i = SliceViewSignals(j)
			return nil
		}
	}
	return errors.New("String: " + s + " is not a valid option for type: SliceViewSignals")
}

var _SliceViewSignals_descMap = map[SliceViewSignals]string{
	0: `SliceViewDoubleClicked emitted during inactive mode when item double-clicked -- can be used for accepting dialog.`,
	1: `SliceViewInserted emitted when a new item is inserted -- data is index of new item`,
	2: `SliceViewDeleted emitted when an item is deleted -- data is index of item deleted`,
	3: ``,
}

func (i SliceViewSignals) Desc() string {
	if str, ok := _SliceViewSignals_descMap[i]; ok {
		return str
	}
	return "SliceViewSignals(" + strconv.FormatInt(int64(i), 10) + ")"
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[TextBufDone-0]
	_ = x[TextBufNew-1]
	_ = x[TextBufInsert-2]
	_ = x[TextBufDelete-3]
	_ = x[TextBufMarkUpdt-4]
	_ = x[TextBufClosed-5]
	_ = x[TextBufSignalsN-6]
}

const _TextBufSignals_name = "TextBufDoneTextBufNewTextBufInsertTextBufDeleteTextBufMarkUpdtTextBufClosedTextBufSignalsN"

var _TextBufSignals_index = [...]uint8{0, 11, 21, 34, 47, 62, 75, 90}

func (i TextBufSignals) String() string {
	if i < 0 || i >= TextBufSignals(len(_TextBufSignals_index)-1) {
		return "TextBufSignals(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _TextBufSignals_name[_TextBufSignals_index[i]:_TextBufSignals_index[i+1]]
}

func (i *TextBufSignals) FromString(s string) error {
	for j := 0; j < len(_TextBufSignals_index)-1; j++ {
		if s == _TextBufSignals_name[_TextBufSignals_index[j]:_TextBufSignals_index[j+1]] {
			*i = TextBufSignals(j)
			return nil
		}
	}
	return errors.New("String: " + s + " is not a valid option for type: TextBufSignals")
}

var _TextBufSignals_descMap = map[TextBufSignals]string{
	0: `TextBufDone means that editing was completed and applied to Txt field -- data is Txt bytes`,
	1: `TextBufNew signals that entirely new text is present -- all views update -- data is Txt bytes.`,
	2: `TextBufInsert signals that some text was inserted -- data is textbuf.Edit describing change -- the TextBuf always reflects the current state *after* the edit.`,
	3: `TextBufDelete signals that some text was deleted -- data is textbuf.Edit describing change -- the TextBuf always reflects the current state *after* the edit.`,
	4: `TextBufMarkUpdt signals that the Markup text has been updated -- this signal is typically sent from a separate goroutine so should be used with a mutex`,
	5: `TextBufClosed signals that the textbuf was closed`,
	6: ``,
}

func (i TextBufSignals) Desc() string {
	if str, ok := _TextBufSignals_descMap[i]; ok {
		return str
	}
	return "TextBufSignals(" + strconv.FormatInt(int64(i), 10) + ")"
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[TextBufAutoSaving-26]
	_ = x[TextBufMarkingUp-27]
	_ = x[TextBufChanged-28]
	_ = x[TextBufFileModOk-29]
	_ = x[TextBufFlagsN-30]
}

const _TextBufFlags_name = "TextBufAutoSavingTextBufMarkingUpTextBufChangedTextBufFileModOkTextBufFlagsN"

var _TextBufFlags_index = [...]uint8{0, 17, 33, 47, 63, 76}

func (i TextBufFlags) String() string {
	i -= 26
	if i < 0 || i >= TextBufFlags(len(_TextBufFlags_index)-1) {
		return "TextBufFlags(" + strconv.FormatInt(int64(i+26), 10) + ")"
	}
	return _TextBufFlags_name[_TextBufFlags_index[i]:_TextBufFlags_index[i+1]]
}

func StringToTextBufFlags(s string) (TextBufFlags, error) {
	for i := 0; i < len(_TextBufFlags_index)-1; i++ {
		if s == _TextBufFlags_name[_TextBufFlags_index[i]:_TextBufFlags_index[i+1]] {
			return TextBufFlags(i + 26), nil
		}
	}
	return 0, errors.New("String: " + s + " is not a valid option for type: TextBufFlags")
}

var _TextBufFlags_descMap = map[TextBufFlags]string{
	26: `TextBufAutoSaving is used in atomically safe way to protect autosaving`,
	27: `TextBufMarkingUp indicates current markup operation in progress -- don&#39;t redo`,
	28: `TextBufChanged indicates if the text has been changed (edited) relative to the original, since last save`,
	29: `TextBufFileModOk have already asked about fact that file has changed since being opened, user is ok`,
	30: ``,
}

func (i TextBufFlags) Desc() string {
	if str, ok := _TextBufFlags_descMap[i]; ok {
		return str
	}
	return "TextBufFlags(" + strconv.FormatInt(int64(i), 10) + ")"
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[TextViewDone-0]
	_ = x[TextViewSelected-1]
	_ = x[TextViewCursorMoved-2]
	_ = x[TextViewISearch-3]
	_ = x[TextViewQReplace-4]
	_ = x[TextViewSignalsN-5]
}

const _TextViewSignals_name = "TextViewDoneTextViewSelectedTextViewCursorMovedTextViewISearchTextViewQReplaceTextViewSignalsN"

var _TextViewSignals_index = [...]uint8{0, 12, 28, 47, 62, 78, 94}

func (i TextViewSignals) String() string {
	if i < 0 || i >= TextViewSignals(len(_TextViewSignals_index)-1) {
		return "TextViewSignals(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _TextViewSignals_name[_TextViewSignals_index[i]:_TextViewSignals_index[i+1]]
}

func (i *TextViewSignals) FromString(s string) error {
	for j := 0; j < len(_TextViewSignals_index)-1; j++ {
		if s == _TextViewSignals_name[_TextViewSignals_index[j]:_TextViewSignals_index[j+1]] {
			*i = TextViewSignals(j)
			return nil
		}
	}
	return errors.New("String: " + s + " is not a valid option for type: TextViewSignals")
}

var _TextViewSignals_descMap = map[TextViewSignals]string{
	0: `TextViewDone signal indicates return was pressed and an edit was completed -- data is the text`,
	1: `TextViewSelected signal indicates some text was selected (for Inactive state, selection is via WidgetSig)`,
	2: `TextViewCursorMoved signal indicates cursor moved emitted for every cursor movement -- e.g., for displaying cursor pos`,
	3: `TextViewISearch is emitted for every update of interactive search process -- see ISearch.* members for current state`,
	4: `TextViewQReplace is emitted for every update of query-replace process -- see QReplace.* members for current state`,
	5: `TextViewSignalsN is the number of TextViewSignals`,
}

func (i TextViewSignals) Desc() string {
	if str, ok := _TextViewSignals_descMap[i]; ok {
		return str
	}
	return "TextViewSignals(" + strconv.FormatInt(int64(i), 10) + ")"
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[TextViewActive-0]
	_ = x[TextViewFocus-1]
	_ = x[TextViewInactive-2]
	_ = x[TextViewSel-3]
	_ = x[TextViewHighlight-4]
	_ = x[TextViewStatesN-5]
}

const _TextViewStates_name = "TextViewActiveTextViewFocusTextViewInactiveTextViewSelTextViewHighlightTextViewStatesN"

var _TextViewStates_index = [...]uint8{0, 14, 27, 43, 54, 71, 86}

func (i TextViewStates) String() string {
	if i < 0 || i >= TextViewStates(len(_TextViewStates_index)-1) {
		return "TextViewStates(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _TextViewStates_name[_TextViewStates_index[i]:_TextViewStates_index[i+1]]
}

func (i *TextViewStates) FromString(s string) error {
	for j := 0; j < len(_TextViewStates_index)-1; j++ {
		if s == _TextViewStates_name[_TextViewStates_index[j]:_TextViewStates_index[j+1]] {
			*i = TextViewStates(j)
			return nil
		}
	}
	return errors.New("String: " + s + " is not a valid option for type: TextViewStates")
}

var _TextViewStates_descMap = map[TextViewStates]string{
	0: `TextViewActive is the normal state -- there but not being interacted with`,
	1: `TextViewFocus states means textvieww is the focus -- will respond to keyboard input`,
	2: `TextViewInactive means the textview is inactive -- not editable`,
	3: `TextViewSel means the text region is selected`,
	4: `TextViewHighlight means the text region is highlighted`,
	5: `TextViewStatesN is the number of textview states`,
}

func (i TextViewStates) Desc() string {
	if str, ok := _TextViewStates_descMap[i]; ok {
		return str
	}
	return "TextViewStates(" + strconv.FormatInt(int64(i), 10) + ")"
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[TextViewNeedsRefresh-26]
	_ = x[TextViewInReLayout-27]
	_ = x[TextViewRenderScrolls-28]
	_ = x[TextViewFocusActive-29]
	_ = x[TextViewHasLineNos-30]
	_ = x[TextViewLastWasTabAI-31]
	_ = x[TextViewLastWasUndo-32]
	_ = x[TextViewFlagsN-33]
}

const _TextViewFlags_name = "TextViewNeedsRefreshTextViewInReLayoutTextViewRenderScrollsTextViewFocusActiveTextViewHasLineNosTextViewLastWasTabAITextViewLastWasUndoTextViewFlagsN"

var _TextViewFlags_index = [...]uint8{0, 20, 38, 59, 78, 96, 116, 135, 149}

func (i TextViewFlags) String() string {
	i -= 26
	if i < 0 || i >= TextViewFlags(len(_TextViewFlags_index)-1) {
		return "TextViewFlags(" + strconv.FormatInt(int64(i+26), 10) + ")"
	}
	return _TextViewFlags_name[_TextViewFlags_index[i]:_TextViewFlags_index[i+1]]
}

func StringToTextViewFlags(s string) (TextViewFlags, error) {
	for i := 0; i < len(_TextViewFlags_index)-1; i++ {
		if s == _TextViewFlags_name[_TextViewFlags_index[i]:_TextViewFlags_index[i+1]] {
			return TextViewFlags(i + 26), nil
		}
	}
	return 0, errors.New("String: " + s + " is not a valid option for type: TextViewFlags")
}

var _TextViewFlags_descMap = map[TextViewFlags]string{
	26: `TextViewNeedsRefresh indicates when refresh is required`,
	27: `TextViewInReLayout indicates that we are currently resizing ourselves via parent layout`,
	28: `TextViewRenderScrolls indicates that parent layout scrollbars need to be re-rendered at next rerender`,
	29: `TextViewFocusActive is set if the keyboard focus is active -- when we lose active focus we apply changes`,
	30: `TextViewHasLineNos indicates that this view has line numbers (per TextBuf option)`,
	31: `TextViewLastWasTabAI indicates that last key was a Tab auto-indent`,
	32: `TextViewLastWasUndo indicates that last key was an undo`,
	33: ``,
}

func (i TextViewFlags) Desc() string {
	if str, ok := _TextViewFlags_descMap[i]; ok {
		return str
	}
	return "TextViewFlags(" + strconv.FormatInt(int64(i), 10) + ")"
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[TreeViewSelected-0]
	_ = x[TreeViewUnselected-1]
	_ = x[TreeViewAllSelected-2]
	_ = x[TreeViewAllUnselected-3]
	_ = x[TreeViewOpened-4]
	_ = x[TreeViewClosed-5]
	_ = x[TreeViewChanged-6]
	_ = x[TreeViewInserted-7]
	_ = x[TreeViewDeleted-8]
	_ = x[TreeViewSignalsN-9]
}

const _TreeViewSignals_name = "TreeViewSelectedTreeViewUnselectedTreeViewAllSelectedTreeViewAllUnselectedTreeViewOpenedTreeViewClosedTreeViewChangedTreeViewInsertedTreeViewDeletedTreeViewSignalsN"

var _TreeViewSignals_index = [...]uint8{0, 16, 34, 53, 74, 88, 102, 117, 133, 148, 164}

func (i TreeViewSignals) String() string {
	if i < 0 || i >= TreeViewSignals(len(_TreeViewSignals_index)-1) {
		return "TreeViewSignals(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _TreeViewSignals_name[_TreeViewSignals_index[i]:_TreeViewSignals_index[i+1]]
}

func (i *TreeViewSignals) FromString(s string) error {
	for j := 0; j < len(_TreeViewSignals_index)-1; j++ {
		if s == _TreeViewSignals_name[_TreeViewSignals_index[j]:_TreeViewSignals_index[j+1]] {
			*i = TreeViewSignals(j)
			return nil
		}
	}
	return errors.New("String: " + s + " is not a valid option for type: TreeViewSignals")
}

var _TreeViewSignals_descMap = map[TreeViewSignals]string{
	0: `node was selected`,
	1: `TreeView unselected`,
	2: `TreeView all items were selected`,
	3: `TreeView all items were unselected`,
	4: `closed TreeView was opened`,
	5: `open TreeView was closed -- children not visible`,
	6: `means that some kind of edit operation has taken place by the user via the gui -- we don&#39;t track the details, just that changes have happened`,
	7: `a node was inserted into the tree (Paste, DND) in this case, the data is the *source node* that was inserted`,
	8: `a node was deleted from the tree (Cut, DND Move)`,
	9: ``,
}

func (i TreeViewSignals) Desc() string {
	if str, ok := _TreeViewSignals_descMap[i]; ok {
		return str
	}
	return "TreeViewSignals(" + strconv.FormatInt(int64(i), 10) + ")"
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[TreeViewFlagClosed-26]
	_ = x[TreeViewFlagChanged-27]
	_ = x[TreeViewFlagNoTemplate-28]
	_ = x[TreeViewFlagUpdtRoot-29]
	_ = x[TreeViewFlagsN-30]
}

const _TreeViewFlags_name = "TreeViewFlagClosedTreeViewFlagChangedTreeViewFlagNoTemplateTreeViewFlagUpdtRootTreeViewFlagsN"

var _TreeViewFlags_index = [...]uint8{0, 18, 37, 59, 79, 93}

func (i TreeViewFlags) String() string {
	i -= 26
	if i < 0 || i >= TreeViewFlags(len(_TreeViewFlags_index)-1) {
		return "TreeViewFlags(" + strconv.FormatInt(int64(i+26), 10) + ")"
	}
	return _TreeViewFlags_name[_TreeViewFlags_index[i]:_TreeViewFlags_index[i+1]]
}

func StringToTreeViewFlags(s string) (TreeViewFlags, error) {
	for i := 0; i < len(_TreeViewFlags_index)-1; i++ {
		if s == _TreeViewFlags_name[_TreeViewFlags_index[i]:_TreeViewFlags_index[i+1]] {
			return TreeViewFlags(i + 26), nil
		}
	}
	return 0, errors.New("String: " + s + " is not a valid option for type: TreeViewFlags")
}

var _TreeViewFlags_descMap = map[TreeViewFlags]string{
	26: `TreeViewFlagClosed means node is toggled closed (children not visible)`,
	27: `TreeViewFlagChanged is updated on the root node whenever a gui edit is made through the tree view on the tree -- this does not track any other changes that might have occurred in the tree itself. Also emits a TreeViewChanged signal on the root node.`,
	28: `TreeViewFlagNoTemplate -- this node is not using a style template -- should be restyled on any full re-render change`,
	29: `TreeViewFlagUpdtRoot -- for any update signal that comes from the source root node, do a full update of the treeview. This increases responsiveness of the updating and makes it easy to trigger a full update by updating the root node, but can be slower when not needed`,
	30: ``,
}

func (i TreeViewFlags) Desc() string {
	if str, ok := _TreeViewFlags_descMap[i]; ok {
		return str
	}
	return "TreeViewFlags(" + strconv.FormatInt(int64(i), 10) + ")"
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[TreeViewActive-0]
	_ = x[TreeViewSel-1]
	_ = x[TreeViewFocus-2]
	_ = x[TreeViewInactive-3]
	_ = x[TreeViewStatesN-4]
}

const _TreeViewStates_name = "TreeViewActiveTreeViewSelTreeViewFocusTreeViewInactiveTreeViewStatesN"

var _TreeViewStates_index = [...]uint8{0, 14, 25, 38, 54, 69}

func (i TreeViewStates) String() string {
	if i < 0 || i >= TreeViewStates(len(_TreeViewStates_index)-1) {
		return "TreeViewStates(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _TreeViewStates_name[_TreeViewStates_index[i]:_TreeViewStates_index[i+1]]
}

func (i *TreeViewStates) FromString(s string) error {
	for j := 0; j < len(_TreeViewStates_index)-1; j++ {
		if s == _TreeViewStates_name[_TreeViewStates_index[j]:_TreeViewStates_index[j+1]] {
			*i = TreeViewStates(j)
			return nil
		}
	}
	return errors.New("String: " + s + " is not a valid option for type: TreeViewStates")
}

var _TreeViewStates_descMap = map[TreeViewStates]string{
	0: `TreeViewActive is normal state -- there but not being interacted with`,
	1: `TreeViewSel is selected`,
	2: `TreeViewFocus is in focus -- will respond to keyboard input`,
	3: `TreeViewInactive is inactive -- if SrcNode is nil, or source has &#34;inactive&#34; property set, or treeview node has inactive property set directly`,
	4: ``,
}

func (i TreeViewStates) Desc() string {
	if str, ok := _TreeViewStates_descMap[i]; ok {
		return str
	}
	return "TreeViewStates(" + strconv.FormatInt(int64(i), 10) + ")"
}
