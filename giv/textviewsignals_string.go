// Code generated by "stringer -type=TextViewSignals"; DO NOT EDIT.

package giv

import (
	"errors"
	"strconv"
)

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[TextViewDone-0]
	_ = x[TextViewSelected-1]
	_ = x[TextViewCursorMoved-2]
	_ = x[TextViewISearch-3]
	_ = x[TextViewQReplace-4]
	_ = x[TextViewSignalsN-5]
}

const _TextViewSignals_name = "TextViewDoneTextViewSelectedTextViewCursorMovedTextViewISearchTextViewQReplaceTextViewSignalsN"

var _TextViewSignals_index = [...]uint8{0, 12, 28, 47, 62, 78, 94}

func (i TextViewSignals) String() string {
	if i < 0 || i >= TextViewSignals(len(_TextViewSignals_index)-1) {
		return "TextViewSignals(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _TextViewSignals_name[_TextViewSignals_index[i]:_TextViewSignals_index[i+1]]
}

func (i *TextViewSignals) FromString(s string) error {
	for j := 0; j < len(_TextViewSignals_index)-1; j++ {
		if s == _TextViewSignals_name[_TextViewSignals_index[j]:_TextViewSignals_index[j+1]] {
			*i = TextViewSignals(j)
			return nil
		}
	}
	return errors.New("String: " + s + " is not a valid option for type: TextViewSignals")
}

var _TextViewSignals_descMap = map[TextViewSignals]string{
	0: `TextViewDone signal indicates return was pressed and an edit was completed -- data is the text`,
	1: `TextViewSelected signal indicates some text was selected (for Inactive state, selection is via WidgetSig)`,
	2: `TextViewCursorMoved signal indicates cursor moved emitted for every cursor movement -- e.g., for displaying cursor pos`,
	3: `TextViewISearch is emitted for every update of interactive search process -- see ISearch.* members for current state`,
	4: `TextViewQReplace is emitted for every update of query-replace process -- see QReplace.* members for current state`,
	5: `TextViewSignalsN is the number of TextViewSignals`,
}

func (i TextViewSignals) Desc() string {
	if str, ok := _TextViewSignals_descMap[i]; ok {
		return str
	}
	return "TextViewSignals(" + strconv.FormatInt(int64(i), 10) + ")"
}
