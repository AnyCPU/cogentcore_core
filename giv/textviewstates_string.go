// Code generated by "stringer -type=TextViewStates"; DO NOT EDIT.

package giv

import (
	"errors"
	"strconv"
)

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[TextViewActive-0]
	_ = x[TextViewFocus-1]
	_ = x[TextViewInactive-2]
	_ = x[TextViewSel-3]
	_ = x[TextViewHighlight-4]
	_ = x[TextViewStatesN-5]
}

const _TextViewStates_name = "TextViewActiveTextViewFocusTextViewInactiveTextViewSelTextViewHighlightTextViewStatesN"

var _TextViewStates_index = [...]uint8{0, 14, 27, 43, 54, 71, 86}

func (i TextViewStates) String() string {
	if i < 0 || i >= TextViewStates(len(_TextViewStates_index)-1) {
		return "TextViewStates(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _TextViewStates_name[_TextViewStates_index[i]:_TextViewStates_index[i+1]]
}

func (i *TextViewStates) FromString(s string) error {
	for j := 0; j < len(_TextViewStates_index)-1; j++ {
		if s == _TextViewStates_name[_TextViewStates_index[j]:_TextViewStates_index[j+1]] {
			*i = TextViewStates(j)
			return nil
		}
	}
	return errors.New("String: " + s + " is not a valid option for type: TextViewStates")
}

var _TextViewStates_descMap = map[TextViewStates]string{
	0: `TextViewActive is the normal state -- there but not being interacted with`,
	1: `TextViewFocus states means textvieww is the focus -- will respond to keyboard input`,
	2: `TextViewInactive means the textview is inactive -- not editable`,
	3: `TextViewSel means the text region is selected`,
	4: `TextViewHighlight means the text region is highlighted`,
	5: `TextViewStatesN is the number of textview states`,
}

func (i TextViewStates) Desc() string {
	if str, ok := _TextViewStates_descMap[i]; ok {
		return str
	}
	return "TextViewStates(" + strconv.FormatInt(int64(i), 10) + ")"
}
