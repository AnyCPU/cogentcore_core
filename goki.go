// Copyright (c) 2023, The GoKi Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package main

import (
	"fmt"

	"goki.dev/goki/config"
	"goki.dev/goki/generate"
	"goki.dev/goki/packman"
	"goki.dev/goki/tools"
	"goki.dev/grease"
	"goki.dev/greasi"
)

// App is the main app type that handles
// the logic for the GoKi tool
type App struct{}

// BuildCmd builds executables for a local
// package for one or more platforms.
func (a *App) BuildCmd(cfg *config.Config) error {
	return packman.Build(cfg)
}

// ColorgenCmd generates a Go color scheme
// declaration file from a Material Theme
// Builder Android Views XML file.
func (a *App) ColorgenCmd(cfg *config.Config) error {
	return packman.GenerateColorScheme(cfg)
}

// GenerateCmd generates useful methods,
// variables, and constans for GoKi code.
func (a *App) GenerateCmd(cfg *config.Config) error {
	return generate.Generate(cfg)
}

// InitCmd initializes the ".goki" directory
// and the configuration file in the current directory
func (a *App) InitCmd(cfg *config.Config) error {
	return tools.Init(cfg)
}

// InstallCmd installs a local or global GoKi
// package to your device or mobile emulator
func (a *App) InstallCmd(cfg *config.Config) error {
	return packman.Install(cfg)
}

// LogCmd shows logs generated by your app
// through Android Studio and/or XCode
func (a *App) LogCmd(cfg *config.Config) error {
	return packman.Log(cfg)
}

// ReleaseCmd releases the project
// by pushing a release with Git
// and releasing it on app stores
// if it is an executable app.
func (a *App) ReleaseCmd(cfg *config.Config) error {
	return packman.Release(cfg)
}

// VersionCmd updates the version file
// of the project and commits and pushes
// the changes.
func (a *App) VersionCmd(cfg *config.Config) error {
	return packman.UpdateVersion(cfg)
}

func main() {
	grease.AppName = "goki"
	grease.AppTitle = "GoKi"
	grease.AppAbout = "Command line and GUI tools for developing apps and libraries using the GoKi framework."
	grease.DefaultFiles = []string{".goki/config.toml"}
	grease.SearchUp = true
	err := greasi.Run(&App{}, &config.Config{})
	if err != nil {
		fmt.Println(err)
	}
}
