// Code generated by "goki generate ./..."; DO NOT EDIT.

package gradient

import (
	"goki.dev/colors"
	"goki.dev/gti"
	"goki.dev/mat32/v2"
	"goki.dev/ordmap"
)

var _ = gti.AddType(&gti.Type{
	Name:      "goki.dev/colors/gradient.Base",
	ShortName: "gradient.Base",
	IDName:    "base",
	Doc:       "Base contains the data and logic common to all gradient types.",
	Directives: gti.Directives{
		&gti.Directive{Tool: "gti", Directive: "add", Args: []string{}},
	},
	Fields: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"Stops", &gti.Field{Name: "Stops", Type: "[]goki.dev/colors/gradient.Stop", LocalType: "[]Stop", Doc: "the stops for the gradient; use AddStop to add stops", Directives: gti.Directives{}, Tag: "set:\"-\""}},
		{"Spread", &gti.Field{Name: "Spread", Type: "goki.dev/colors/gradient.SpreadMethods", LocalType: "SpreadMethods", Doc: "the spread method used for the gradient if it stops before the end", Directives: gti.Directives{}, Tag: ""}},
		{"Blend", &gti.Field{Name: "Blend", Type: "goki.dev/colors.BlendTypes", LocalType: "colors.BlendTypes", Doc: "the colorspace algorithm to use for blending colors", Directives: gti.Directives{}, Tag: ""}},
	}),
	Embeds:  ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{}),
	Methods: ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
})

var _ = gti.AddType(&gti.Type{
	Name:      "goki.dev/colors/gradient.Gradient",
	ShortName: "gradient.Gradient",
	IDName:    "gradient",
	Doc:       "Gradient represents a linear or radial gradient.",
	Directives: gti.Directives{
		&gti.Directive{Tool: "gti", Directive: "add", Args: []string{"-setters"}},
	},
	Fields: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"Type", &gti.Field{Name: "Type", Type: "invalid type", LocalType: "GradientTypes", Doc: "the type of gradient (linear, radial, or conic)", Directives: gti.Directives{}, Tag: ""}},
		{"Start", &gti.Field{Name: "Start", Type: "goki.dev/mat32/v2.Vec2", LocalType: "mat32.Vec2", Doc: "the starting point for linear gradients (x1 and y1 in SVG)", Directives: gti.Directives{}, Tag: ""}},
		{"End", &gti.Field{Name: "End", Type: "goki.dev/mat32/v2.Vec2", LocalType: "mat32.Vec2", Doc: "the ending point for linear gradients (x2 and y2 in SVG)", Directives: gti.Directives{}, Tag: ""}},
		{"Center", &gti.Field{Name: "Center", Type: "goki.dev/mat32/v2.Vec2", LocalType: "mat32.Vec2", Doc: "the center point for radial and conic gradients (cx and cy in SVG)", Directives: gti.Directives{}, Tag: ""}},
		{"Focal", &gti.Field{Name: "Focal", Type: "goki.dev/mat32/v2.Vec2", LocalType: "mat32.Vec2", Doc: "the focal point for radial gradients (fx and fy in SVG)", Directives: gti.Directives{}, Tag: ""}},
		{"Radius", &gti.Field{Name: "Radius", Type: "float32", LocalType: "float32", Doc: "the radius for radial gradients (r in SVG)", Directives: gti.Directives{}, Tag: ""}},
		{"Rotation", &gti.Field{Name: "Rotation", Type: "float32", LocalType: "float32", Doc: "the starting clockwise rotation of conic gradients (0-1) (<angle> in css)", Directives: gti.Directives{}, Tag: ""}},
		{"Stops", &gti.Field{Name: "Stops", Type: "[]goki.dev/colors/gradient.Stop", LocalType: "[]Stop", Doc: "the stops of the gradient", Directives: gti.Directives{}, Tag: ""}},
		{"Spread", &gti.Field{Name: "Spread", Type: "goki.dev/colors/gradient.SpreadMethods", LocalType: "SpreadMethods", Doc: "the spread method used for the gradient", Directives: gti.Directives{}, Tag: ""}},
		{"Units", &gti.Field{Name: "Units", Type: "goki.dev/colors/gradient.GradientUnits", LocalType: "GradientUnits", Doc: "the units used for the gradient", Directives: gti.Directives{}, Tag: ""}},
		{"Blend", &gti.Field{Name: "Blend", Type: "invalid type", LocalType: "BlendTypes", Doc: "the colorspace algorithm to use for blending colors", Directives: gti.Directives{}, Tag: ""}},
		{"Bounds", &gti.Field{Name: "Bounds", Type: "goki.dev/mat32/v2.Box2", LocalType: "mat32.Box2", Doc: "the bounds of the gradient; this should typically not be set by end-users", Directives: gti.Directives{}, Tag: ""}},
		{"Matrix", &gti.Field{Name: "Matrix", Type: "goki.dev/mat32/v2.Mat2", LocalType: "mat32.Mat2", Doc: "the matrix for the gradient; this should typically not be set by end-users", Directives: gti.Directives{}, Tag: ""}},
	}),
	Embeds:  ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{}),
	Methods: ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
})

// SetType sets the [Gradient.Type]:
// the type of gradient (linear, radial, or conic)
func (t *Gradient) SetType(v GradientTypes) *Gradient {
	t.Type = v
	return t
}

// SetStart sets the [Gradient.Start]:
// the starting point for linear gradients (x1 and y1 in SVG)
func (t *Gradient) SetStart(v mat32.Vec2) *Gradient {
	t.Start = v
	return t
}

// SetEnd sets the [Gradient.End]:
// the ending point for linear gradients (x2 and y2 in SVG)
func (t *Gradient) SetEnd(v mat32.Vec2) *Gradient {
	t.End = v
	return t
}

// SetCenter sets the [Gradient.Center]:
// the center point for radial and conic gradients (cx and cy in SVG)
func (t *Gradient) SetCenter(v mat32.Vec2) *Gradient {
	t.Center = v
	return t
}

// SetFocal sets the [Gradient.Focal]:
// the focal point for radial gradients (fx and fy in SVG)
func (t *Gradient) SetFocal(v mat32.Vec2) *Gradient {
	t.Focal = v
	return t
}

// SetRadius sets the [Gradient.Radius]:
// the radius for radial gradients (r in SVG)
func (t *Gradient) SetRadius(v float32) *Gradient {
	t.Radius = v
	return t
}

// SetRotation sets the [Gradient.Rotation]:
// the starting clockwise rotation of conic gradients (0-1) (<angle> in css)
func (t *Gradient) SetRotation(v float32) *Gradient {
	t.Rotation = v
	return t
}

// SetStops sets the [Gradient.Stops]:
// the stops of the gradient
func (t *Gradient) SetStops(v []Stop) *Gradient {
	t.Stops = v
	return t
}

// SetSpread sets the [Gradient.Spread]:
// the spread method used for the gradient
func (t *Gradient) SetSpread(v SpreadMethods) *Gradient {
	t.Spread = v
	return t
}

// SetUnits sets the [Gradient.Units]:
// the units used for the gradient
func (t *Gradient) SetUnits(v GradientUnits) *Gradient {
	t.Units = v
	return t
}

// SetBlend sets the [Gradient.Blend]:
// the colorspace algorithm to use for blending colors
func (t *Gradient) SetBlend(v BlendTypes) *Gradient {
	t.Blend = v
	return t
}

// SetBounds sets the [Gradient.Bounds]:
// the bounds of the gradient; this should typically not be set by end-users
func (t *Gradient) SetBounds(v mat32.Box2) *Gradient {
	t.Bounds = v
	return t
}

// SetMatrix sets the [Gradient.Matrix]:
// the matrix for the gradient; this should typically not be set by end-users
func (t *Gradient) SetMatrix(v mat32.Mat2) *Gradient {
	t.Matrix = v
	return t
}

var _ = gti.AddType(&gti.Type{
	Name:      "goki.dev/colors/gradient.Linear",
	ShortName: "gradient.Linear",
	IDName:    "linear",
	Doc:       "Linear represents a linear gradient. It implements the [image.Image] interface.",
	Directives: gti.Directives{
		&gti.Directive{Tool: "gti", Directive: "add", Args: []string{"-setters"}},
	},
	Fields: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"Start", &gti.Field{Name: "Start", Type: "goki.dev/mat32/v2.Vec2", LocalType: "mat32.Vec2", Doc: "the starting point of the gradient (x1 and y1 in SVG)", Directives: gti.Directives{}, Tag: ""}},
		{"End", &gti.Field{Name: "End", Type: "goki.dev/mat32/v2.Vec2", LocalType: "mat32.Vec2", Doc: "the ending point of the gradient (x2 and y2 in SVG)", Directives: gti.Directives{}, Tag: ""}},
	}),
	Embeds: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"Base", &gti.Field{Name: "Base", Type: "goki.dev/colors/gradient.Base", LocalType: "Base", Doc: "", Directives: gti.Directives{}, Tag: ""}},
	}),
	Methods: ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
})

// SetStart sets the [Linear.Start]:
// the starting point of the gradient (x1 and y1 in SVG)
func (t *Linear) SetStart(v mat32.Vec2) *Linear {
	t.Start = v
	return t
}

// SetEnd sets the [Linear.End]:
// the ending point of the gradient (x2 and y2 in SVG)
func (t *Linear) SetEnd(v mat32.Vec2) *Linear {
	t.End = v
	return t
}

// SetSpread sets the [Linear.Spread]
func (t *Linear) SetSpread(v SpreadMethods) *Linear {
	t.Spread = v
	return t
}

// SetBlend sets the [Linear.Blend]
func (t *Linear) SetBlend(v colors.BlendTypes) *Linear {
	t.Blend = v
	return t
}

var _ = gti.AddType(&gti.Type{
	Name:      "goki.dev/colors/gradient.Radial",
	ShortName: "gradient.Radial",
	IDName:    "radial",
	Doc:       "Radial represents a radial gradient. It implements the [image.Image] interface.",
	Directives: gti.Directives{
		&gti.Directive{Tool: "gti", Directive: "add", Args: []string{"-setters"}},
	},
	Fields: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"Center", &gti.Field{Name: "Center", Type: "goki.dev/mat32/v2.Vec2", LocalType: "mat32.Vec2", Doc: "the center point of the gradient (cx and cy in SVG)", Directives: gti.Directives{}, Tag: ""}},
		{"Focal", &gti.Field{Name: "Focal", Type: "goki.dev/mat32/v2.Vec2", LocalType: "mat32.Vec2", Doc: "the focal point of the gradient (fx and fy in SVG)", Directives: gti.Directives{}, Tag: ""}},
		{"Radius", &gti.Field{Name: "Radius", Type: "goki.dev/mat32/v2.Vec2", LocalType: "mat32.Vec2", Doc: "the radius of the gradient (rx and ry in SVG)", Directives: gti.Directives{}, Tag: ""}},
	}),
	Embeds: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"Base", &gti.Field{Name: "Base", Type: "goki.dev/colors/gradient.Base", LocalType: "Base", Doc: "", Directives: gti.Directives{}, Tag: ""}},
	}),
	Methods: ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
})

// SetCenter sets the [Radial.Center]:
// the center point of the gradient (cx and cy in SVG)
func (t *Radial) SetCenter(v mat32.Vec2) *Radial {
	t.Center = v
	return t
}

// SetFocal sets the [Radial.Focal]:
// the focal point of the gradient (fx and fy in SVG)
func (t *Radial) SetFocal(v mat32.Vec2) *Radial {
	t.Focal = v
	return t
}

// SetRadius sets the [Radial.Radius]:
// the radius of the gradient (rx and ry in SVG)
func (t *Radial) SetRadius(v mat32.Vec2) *Radial {
	t.Radius = v
	return t
}

// SetSpread sets the [Radial.Spread]
func (t *Radial) SetSpread(v SpreadMethods) *Radial {
	t.Spread = v
	return t
}

// SetBlend sets the [Radial.Blend]
func (t *Radial) SetBlend(v colors.BlendTypes) *Radial {
	t.Blend = v
	return t
}
