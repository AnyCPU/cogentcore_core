// Code generated by "goki generate"; DO NOT EDIT.

package ki

import (
	"goki.dev/gti"
)

// NodeType is the [gti.Type] for [Node]
var NodeType = gti.AddType(&gti.Type{Name: "goki.dev/ki.Node", IDName: "node", Doc: "The Node implements the Ki interface and provides the core functionality\nfor the Goki tree -- use the Node as an embedded struct or as a struct\nfield -- the embedded version supports full JSON save / load.\n\nThe desc: key for fields is used by the GoGi GUI viewer for help / tooltip\ninfo -- add these to all your derived struct's fields.  See relevant docs\nfor other such tags controlling a wide range of GUI and other functionality\n-- Ki makes extensive use of such tags.", Fields: []gti.Field{{Name: "Nm", Doc: "Ki.Name() user-supplied name of this node -- can be empty or non-unique"}, {Name: "Flags", Doc: "bit flags for internal node state -- can extend this using enums package"}, {Name: "Props", Doc: "Ki.Properties() property map for arbitrary extensible properties, including style properties"}, {Name: "Par", Doc: "Ki.Parent() parent of this node -- set automatically when this node is added as a child of parent"}, {Name: "Kids", Doc: "Ki.Children() list of children of this node -- all are set to have this node as their parent -- can reorder etc but generally use Ki Node methods to Add / Delete to ensure proper usage"}, {Name: "Ths", Doc: "we need a pointer to ourselves as a Ki, which can always be used to extract the true underlying type of object when Node is embedded in other structs -- function receivers do not have this ability so this is necessary.  This is set to nil when deleted.  Typically use This() convenience accessor which protects against concurrent access."}, {Name: "NumLifetimeKids", Doc: "the number of children that have ever been added to this node, which is used for unique naming"}, {Name: "index", Doc: "last value of our index -- used as a starting point for finding us in our parent next time -- is not guaranteed to be accurate!  use IndexInParent() method"}, {Name: "depth", Doc: "optional depth parameter of this node -- only valid during specific contexts, not generally -- e.g., used in WalkBreadth function"}}, Instance: &Node{}})

// NewNode adds a new [Node] with the given name to the given parent:
// The Node implements the Ki interface and provides the core functionality
// for the Goki tree -- use the Node as an embedded struct or as a struct
// field -- the embedded version supports full JSON save / load.
//
// The desc: key for fields is used by the GoGi GUI viewer for help / tooltip
// info -- add these to all your derived struct's fields.  See relevant docs
// for other such tags controlling a wide range of GUI and other functionality
// -- Ki makes extensive use of such tags.
func NewNode(par Ki, name ...string) *Node {
	return par.NewChild(NodeType, name...).(*Node)
}

// KiType returns the [*gti.Type] of [Node]
func (t *Node) KiType() *gti.Type { return NodeType }

// New returns a new [*Node] value
func (t *Node) New() Ki { return &Node{} }
