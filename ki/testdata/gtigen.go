// Code generated by "core generate ./testdata"; DO NOT EDIT.

package testdata

import (
	"cogentcore.org/core/gti"
	"cogentcore.org/core/ki"
)

// TestNodeType is the [gti.Type] for [TestNode]
var TestNodeType = gti.AddType(&gti.Type{Name: "cogentcore.org/core/ki/testdata.TestNode", IDName: "test-node", Embeds: []gti.Field{{Name: "Node"}}, Instance: &TestNode{}})

// NewTestNode adds a new [TestNode] with the given name to the given parent:
func NewTestNode(par ki.Ki, name ...string) *TestNode {
	return par.NewChild(TestNodeType, name...).(*TestNode)
}

// KiType returns the [*gti.Type] of [TestNode]
func (t *TestNode) KiType() *gti.Type { return TestNodeType }

// New returns a new [*TestNode] value
func (t *TestNode) New() ki.Ki { return &TestNode{} }

// NodeEmbedType is the [gti.Type] for [NodeEmbed]
var NodeEmbedType = gti.AddType(&gti.Type{Name: "cogentcore.org/core/ki/testdata.NodeEmbed", IDName: "node-embed", Doc: "NodeEmbed embeds ki.Node and adds a couple of fields.\nAlso has a directive processed by gti", Directives: []gti.Directive{{Tool: "direct", Directive: "value"}}, Embeds: []gti.Field{{Name: "Node"}}, Fields: []gti.Field{{Name: "Mbr1"}, {Name: "Mbr2"}}, Instance: &NodeEmbed{}})

// NewNodeEmbed adds a new [NodeEmbed] with the given name to the given parent:
// NodeEmbed embeds ki.Node and adds a couple of fields.
// Also has a directive processed by gti
func NewNodeEmbed(par ki.Ki, name ...string) *NodeEmbed {
	return par.NewChild(NodeEmbedType, name...).(*NodeEmbed)
}

// KiType returns the [*gti.Type] of [NodeEmbed]
func (t *NodeEmbed) KiType() *gti.Type { return NodeEmbedType }

// New returns a new [*NodeEmbed] value
func (t *NodeEmbed) New() ki.Ki { return &NodeEmbed{} }

// SetMbr1 sets the [NodeEmbed.Mbr1]
func (t *NodeEmbed) SetMbr1(v string) *NodeEmbed { t.Mbr1 = v; return t }

// SetMbr2 sets the [NodeEmbed.Mbr2]
func (t *NodeEmbed) SetMbr2(v int) *NodeEmbed { t.Mbr2 = v; return t }

// NodeFieldType is the [gti.Type] for [NodeField]
var NodeFieldType = gti.AddType(&gti.Type{Name: "cogentcore.org/core/ki/testdata.NodeField", IDName: "node-field", Embeds: []gti.Field{{Name: "NodeEmbed"}}, Fields: []gti.Field{{Name: "Field1"}}, Instance: &NodeField{}})

// NewNodeField adds a new [NodeField] with the given name to the given parent:
func NewNodeField(par ki.Ki, name ...string) *NodeField {
	return par.NewChild(NodeFieldType, name...).(*NodeField)
}

// KiType returns the [*gti.Type] of [NodeField]
func (t *NodeField) KiType() *gti.Type { return NodeFieldType }

// New returns a new [*NodeField] value
func (t *NodeField) New() ki.Ki { return &NodeField{} }

// SetField1 sets the [NodeField.Field1]
func (t *NodeField) SetField1(v NodeEmbed) *NodeField { t.Field1 = v; return t }

// SetMbr1 sets the [NodeField.Mbr1]
func (t *NodeField) SetMbr1(v string) *NodeField { t.Mbr1 = v; return t }

// SetMbr2 sets the [NodeField.Mbr2]
func (t *NodeField) SetMbr2(v int) *NodeField { t.Mbr2 = v; return t }

// NodeField2Type is the [gti.Type] for [NodeField2]
var NodeField2Type = gti.AddType(&gti.Type{Name: "cogentcore.org/core/ki/testdata.NodeField2", IDName: "node-field-2", Embeds: []gti.Field{{Name: "NodeField"}}, Fields: []gti.Field{{Name: "Field2"}}, Instance: &NodeField2{}})

// NewNodeField2 adds a new [NodeField2] with the given name to the given parent:
func NewNodeField2(par ki.Ki, name ...string) *NodeField2 {
	return par.NewChild(NodeField2Type, name...).(*NodeField2)
}

// KiType returns the [*gti.Type] of [NodeField2]
func (t *NodeField2) KiType() *gti.Type { return NodeField2Type }

// New returns a new [*NodeField2] value
func (t *NodeField2) New() ki.Ki { return &NodeField2{} }

// SetField2 sets the [NodeField2.Field2]
func (t *NodeField2) SetField2(v NodeEmbed) *NodeField2 { t.Field2 = v; return t }

// SetMbr1 sets the [NodeField2.Mbr1]
func (t *NodeField2) SetMbr1(v string) *NodeField2 { t.Mbr1 = v; return t }

// SetMbr2 sets the [NodeField2.Mbr2]
func (t *NodeField2) SetMbr2(v int) *NodeField2 { t.Mbr2 = v; return t }

// SetField1 sets the [NodeField2.Field1]
func (t *NodeField2) SetField1(v NodeEmbed) *NodeField2 { t.Field1 = v; return t }
