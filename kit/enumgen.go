// Code generated by "goki generate"; DO NOT EDIT.

package kit

import (
	"errors"
	"strconv"
	"strings"

	"goki.dev/enums"
)

const _TestFlagsName = "FlagsNilFlag1Flag2"

var _TestFlagsIndex = [...]uint8{0, 8, 13, 18}

const _TestFlagsLowerName = "flagsnilflag1flag2"

// String returns the string representation
// of this TestFlags value.
func (i TestFlags) String() string {
	if i < 0 || i >= TestFlags(len(_TestFlagsIndex)-1) {
		return "TestFlags(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _TestFlagsName[_TestFlagsIndex[i]:_TestFlagsIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the enumgen command to generate them again.
func _TestFlagsNoOp() {
	var x [1]struct{}
	_ = x[TestFlagsNil-(0)]
	_ = x[TestFlag1-(1)]
	_ = x[TestFlag2-(2)]
}

var _TestFlagsValues = []TestFlags{TestFlagsNil, TestFlag1, TestFlag2}

// TestFlagsN is the highest valid value
// for type TestFlags, plus one.
const TestFlagsN TestFlags = 3

var _TestFlagsNameToValueMap = map[string]TestFlags{
	_TestFlagsName[0:8]:        TestFlagsNil,
	_TestFlagsLowerName[0:8]:   TestFlagsNil,
	_TestFlagsName[8:13]:       TestFlag1,
	_TestFlagsLowerName[8:13]:  TestFlag1,
	_TestFlagsName[13:18]:      TestFlag2,
	_TestFlagsLowerName[13:18]: TestFlag2,
}

var _TestFlagsNames = []string{
	_TestFlagsName[0:8],
	_TestFlagsName[8:13],
	_TestFlagsName[13:18],
}

var _TestFlagsDescMap = map[TestFlags]string{
	0: _TestFlagsDescs[0],
	1: _TestFlagsDescs[1],
	2: _TestFlagsDescs[2],
}

var _TestFlagsDescs = []string{
	``,
	``,
	``,
}

// SetString sets the TestFlags value from its
// string representation, and returns an
// error if the string is invalid.
func (i *TestFlags) SetString(s string) error {
	if val, ok := _TestFlagsNameToValueMap[s]; ok {
		*i = val
		return nil
	}

	if val, ok := _TestFlagsNameToValueMap[strings.ToLower(s)]; ok {
		*i = val
		return nil
	}
	return errors.New(s + " does not belong to TestFlags values")
}

// Int64 returns the TestFlags value as an int64.
func (i TestFlags) Int64() int64 {
	return int64(i)
}

// SetInt64 sets the TestFlags value from an int64.
func (i *TestFlags) SetInt64(in int64) {
	*i = TestFlags(in)
}

// Desc returns the description of the TestFlags value.
func (i TestFlags) Desc() string {
	if str, ok := _TestFlagsDescMap[i]; ok {
		return str
	}
	return i.String()
}

// TestFlagsValues returns all possible values of
// the type TestFlags. This slice will be in the
// same order as those returned by the Values,
// Strings, and Descs methods on TestFlags.
func TestFlagsValues() []TestFlags {
	return _TestFlagsValues
}

// Values returns all possible values of
// type TestFlags. This slice will be in the
// same order as those returned by Strings and Descs.
func (i TestFlags) Values() []enums.Enum {
	res := make([]enums.Enum, len(_TestFlagsValues))
	for i, d := range _TestFlagsValues {
		res[i] = d
	}
	return res
}

// Strings returns the string representations of
// all possible values of type TestFlags.
// This slice will be in the same order as
// those returned by Values and Descs.
func (i TestFlags) Strings() []string {
	return _TestFlagsNames
}

// Descs returns the descriptions of all
// possible values of type TestFlags.
// This slice will be in the same order as
// those returned by Values and Strings.
func (i TestFlags) Descs() []string {
	return _TestFlagsDescs
}

// IsValid returns whether the value is a
// valid option for type TestFlags.
func (i TestFlags) IsValid() bool {
	for _, v := range _TestFlagsValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalText implements the [encoding.TextMarshaler] interface.
func (i TestFlags) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the [encoding.TextUnmarshaler] interface.
func (i *TestFlags) UnmarshalText(text []byte) error {
	return i.SetString(string(text))
}
