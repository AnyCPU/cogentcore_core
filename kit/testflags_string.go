// Code generated by "stringer -type=TestFlags"; DO NOT EDIT.

package kit

import (
	"errors"
	"strconv"
)

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[TestFlagsNil-0]
	_ = x[TestFlag1-1]
	_ = x[TestFlag2-2]
	_ = x[TestFlagsN-3]
}

const _TestFlags_name = "TestFlagsNilTestFlag1TestFlag2TestFlagsN"

var _TestFlags_index = [...]uint8{0, 12, 21, 30, 40}

func (i TestFlags) String() string {
	if i < 0 || i >= TestFlags(len(_TestFlags_index)-1) {
		return "TestFlags(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _TestFlags_name[_TestFlags_index[i]:_TestFlags_index[i+1]]
}

func (i *TestFlags) FromString(s string) error {
	for j := 0; j < len(_TestFlags_index)-1; j++ {
		if s == _TestFlags_name[_TestFlags_index[j]:_TestFlags_index[j+1]] {
			*i = TestFlags(j)
			return nil
		}
	}
	return errors.New("String: " + s + " is not a valid option for type: TestFlags")
}

var _TestFlags_descMap = map[TestFlags]string{
	0: ``,
	1: ``,
	2: ``,
	3: ``,
}

func (i TestFlags) Desc() string {
	if str, ok := _TestFlags_descMap[i]; ok {
		return str
	}
	return "TestFlags(" + strconv.FormatInt(int64(i), 10) + ")"
}
