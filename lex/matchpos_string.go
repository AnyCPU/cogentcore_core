// Code generated by "stringer -type=MatchPos"; DO NOT EDIT.

package lex

import (
	"errors"
	"strconv"
)

var _ = errors.New("dummy error")

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[AnyPos-0]
	_ = x[StartOfLine-1]
	_ = x[EndOfLine-2]
	_ = x[MiddleOfLine-3]
	_ = x[StartOfWord-4]
	_ = x[EndOfWord-5]
	_ = x[MiddleOfWord-6]
	_ = x[MatchPosN-7]
}

const _MatchPos_name = "AnyPosStartOfLineEndOfLineMiddleOfLineStartOfWordEndOfWordMiddleOfWordMatchPosN"

var _MatchPos_index = [...]uint8{0, 6, 17, 26, 38, 49, 58, 70, 79}

func (i MatchPos) String() string {
	if i < 0 || i >= MatchPos(len(_MatchPos_index)-1) {
		return "MatchPos(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _MatchPos_name[_MatchPos_index[i]:_MatchPos_index[i+1]]
}

func (i *MatchPos) FromString(s string) error {
	for j := 0; j < len(_MatchPos_index)-1; j++ {
		if s == _MatchPos_name[_MatchPos_index[j]:_MatchPos_index[j+1]] {
			*i = MatchPos(j)
			return nil
		}
	}
	return errors.New("String: " + s + " is not a valid option for type: MatchPos")
}
