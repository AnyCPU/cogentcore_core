// Code generated by "enumgen "; DO NOT EDIT.

package lms

import (
	"errors"
	"strconv"
	"strings"

	"github.com/goki/enums/enums"
)

const _OpponentsName = "WhiteBlackRedGreenBlueYellowOpponentsN"

var _OpponentsIndex = [...]uint8{0, 10, 18, 28, 38}

const _OpponentsLowerName = "whiteblackredgreenblueyellowopponentsn"

// String returns the string representation
// of this Opponents value.
func (i Opponents) String() string {
	if i < 0 || i >= Opponents(len(_OpponentsIndex)-1) {
		return "Opponents(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _OpponentsName[_OpponentsIndex[i]:_OpponentsIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the enumgen command to generate them again.
func _OpponentsNoOp() {
	var x [1]struct{}
	_ = x[WhiteBlack-(0)]
	_ = x[RedGreen-(1)]
	_ = x[BlueYellow-(2)]
	_ = x[OpponentsN-(3)]
}

var _OpponentsValues = []Opponents{WhiteBlack, RedGreen, BlueYellow, OpponentsN}

var _OpponentsNameToValueMap = map[string]Opponents{
	_OpponentsName[0:10]:       WhiteBlack,
	_OpponentsLowerName[0:10]:  WhiteBlack,
	_OpponentsName[10:18]:      RedGreen,
	_OpponentsLowerName[10:18]: RedGreen,
	_OpponentsName[18:28]:      BlueYellow,
	_OpponentsLowerName[18:28]: BlueYellow,
	_OpponentsName[28:38]:      OpponentsN,
	_OpponentsLowerName[28:38]: OpponentsN,
}

var _OpponentsNames = []string{
	_OpponentsName[0:10],
	_OpponentsName[10:18],
	_OpponentsName[18:28],
	_OpponentsName[28:38],
}

var _OpponentsDescMap = map[Opponents]string{
	0: _OpponentsDescs[0],
	1: _OpponentsDescs[1],
	2: _OpponentsDescs[2],
	3: _OpponentsDescs[3],
}

var _OpponentsDescs = []string{
	`White vs. Black greyscale`,
	`Red vs. Green`,
	`Blue vs. Yellow`,
	`number of opponents`,
}

// SetString sets the Opponents value from its
// string representation, and returns an
// error if the string is invalid.
func (i *Opponents) SetString(s string) error {
	if val, ok := _OpponentsNameToValueMap[s]; ok {
		*i = val
		return nil
	}

	if val, ok := _OpponentsNameToValueMap[strings.ToLower(s)]; ok {
		*i = val
		return nil
	}
	return errors.New(s + " does not belong to Opponents values")
}

// Int64 returns the Opponents value as an int64.
func (i Opponents) Int64() int64 {
	return int64(i)
}

// SetInt64 sets the Opponents value from an int64.
func (i *Opponents) SetInt64(in int64) {
	*i = Opponents(in)
}

// Desc returns the description of the Opponents value.
func (i Opponents) Desc() string {
	if str, ok := _OpponentsDescMap[i]; ok {
		return str
	}
	return i.String()
}

// OpponentsValues returns all possible values of
// the type Opponents. This slice will be in the
// same order as those returned by the Values,
// Strings, and Descs methods on Opponents.
func OpponentsValues() []Opponents {
	return _OpponentsValues
}

// Values returns all possible values of
// type Opponents. This slice will be in the
// same order as those returned by Strings and Descs.
func (i Opponents) Values() []enums.Enum {
	res := make([]enums.Enum, len(_OpponentsValues))
	for i, d := range _OpponentsValues {
		res[i] = &d
	}
	return res
}

// Strings returns the string representations of
// all possible values of type Opponents.
// This slice will be in the same order as
// those returned by Values and Descs.
func (i Opponents) Strings() []string {
	return _OpponentsNames
}

// Descs returns the descriptions of all
// possible values of type Opponents.
// This slice will be in the same order as
// those returned by Values and Strings.
func (i Opponents) Descs() []string {
	return _OpponentsDescs
}

// IsValid returns whether the value is a
// valid option for type Opponents.
func (i Opponents) IsValid() bool {
	for _, v := range _OpponentsValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalText implements the [encoding.TextMarshaler] interface.
func (i Opponents) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the [encoding.TextUnmarshaler] interface.
func (i *Opponents) UnmarshalText(text []byte) error {
	return i.SetString(string(text))
}
