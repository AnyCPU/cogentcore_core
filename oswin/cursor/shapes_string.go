// Code generated by "stringer -type=Shapes"; DO NOT EDIT.

package cursor

import (
	"errors"
	"strconv"
)

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[Nil-0]
	_ = x[Arrow-1]
	_ = x[Cross-2]
	_ = x[DragCopy-3]
	_ = x[DragMove-4]
	_ = x[DragLink-5]
	_ = x[HandPointing-6]
	_ = x[HandOpen-7]
	_ = x[HandClosed-8]
	_ = x[Help-9]
	_ = x[IBeam-10]
	_ = x[Not-11]
	_ = x[UpDown-12]
	_ = x[LeftRight-13]
	_ = x[UpRight-14]
	_ = x[UpLeft-15]
	_ = x[AllArrows-16]
	_ = x[Wait-17]
	_ = x[ShapesN-18]
}

const _Shapes_name = "NilArrowCrossDragCopyDragMoveDragLinkHandPointingHandOpenHandClosedHelpIBeamNotUpDownLeftRightUpRightUpLeftAllArrowsWaitShapesN"

var _Shapes_index = [...]uint8{0, 3, 8, 13, 21, 29, 37, 49, 57, 67, 71, 76, 79, 85, 94, 101, 107, 116, 120, 127}

func (i Shapes) String() string {
	if i < 0 || i >= Shapes(len(_Shapes_index)-1) {
		return "Shapes(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _Shapes_name[_Shapes_index[i]:_Shapes_index[i+1]]
}

func (i *Shapes) FromString(s string) error {
	for j := 0; j < len(_Shapes_index)-1; j++ {
		if s == _Shapes_name[_Shapes_index[j]:_Shapes_index[j+1]] {
			*i = Shapes(j)
			return nil
		}
	}
	return errors.New("String: " + s + " is not a valid option for type: Shapes")
}

var _Shapes_descMap = map[Shapes]string{
	0:  `Nil is an unspecified cursor that can be set on an element to indicate that it should not result in the change of the cursor. In practice, if there are no other cursors in the stack, it results in an [Arrow] cursor.`,
	1:  `Arrow is the standard arrow pointer`,
	2:  `Cross is a crosshair plus-like cursor -- typically used for precise actions.`,
	3:  `DragCopy indicates that the current drag operation will copy the dragged items`,
	4:  `DragMove indicates that the current drag operation will move the dragged items`,
	5:  `DragLink indicates that the current drag operation will link the dragged items`,
	6:  `HandPointing is a hand with a pointing index finger -- typically used to indicate a link is clickable.`,
	7:  `HandOpen is an open hand -- typically used to indicate ability to click and drag to move something.`,
	8:  `HandClosed is a closed hand -- typically used to indicate a dragging operation involving scrolling.`,
	9:  `Help is an arrow and question mark indicating help is available.`,
	10: `IBeam is the standard text-entry symbol like a capital I.`,
	11: `Not is a slashed circle indicating operation not allowed (NO).`,
	12: `UpDown is Double-pointed arrow pointing up and down (SIZENS).`,
	13: `LeftRight is a Double-pointed arrow pointing west and east (SIZEWE).`,
	14: `UpRight is a Double-pointed arrow pointing up-right and down-left (SIZEWE).`,
	15: `UpLeft is a Double-pointed arrow pointing up-left and down-right (SIZEWE).`,
	16: `AllArrows is all four directions of arrow pointing.`,
	17: `Wait is a system-dependent busy / wait cursor (typically an hourglass).`,
	18: `ShapesN is number of standard cursor shapes`,
}

func (i Shapes) Desc() string {
	if str, ok := _Shapes_descMap[i]; ok {
		return str
	}
	return "Shapes(" + strconv.FormatInt(int64(i), 10) + ")"
}
