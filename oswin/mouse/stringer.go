// Code generated by "stringer -output stringer.go -type=Buttons,Actions,SelectModes"; DO NOT EDIT.

package mouse

import (
	"errors"
	"strconv"
)

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[NoButton-0]
	_ = x[Left-1]
	_ = x[Middle-2]
	_ = x[Right-3]
	_ = x[ButtonsN-4]
}

const _Buttons_name = "NoButtonLeftMiddleRightButtonsN"

var _Buttons_index = [...]uint8{0, 8, 12, 18, 23, 31}

func (i Buttons) String() string {
	if i < 0 || i >= Buttons(len(_Buttons_index)-1) {
		return "Buttons(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _Buttons_name[_Buttons_index[i]:_Buttons_index[i+1]]
}

func (i *Buttons) FromString(s string) error {
	for j := 0; j < len(_Buttons_index)-1; j++ {
		if s == _Buttons_name[_Buttons_index[j]:_Buttons_index[j+1]] {
			*i = Buttons(j)
			return nil
		}
	}
	return errors.New("String: " + s + " is not a valid option for type: Buttons")
}

var _Buttons_descMap = map[Buttons]string{
	0: ``,
	1: ``,
	2: ``,
	3: ``,
	4: ``,
}

func (i Buttons) Desc() string {
	if str, ok := _Buttons_descMap[i]; ok {
		return str
	}
	return "Buttons(" + strconv.FormatInt(int64(i), 10) + ")"
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[NoAction-0]
	_ = x[Press-1]
	_ = x[Release-2]
	_ = x[DoubleClick-3]
	_ = x[Move-4]
	_ = x[Drag-5]
	_ = x[Scroll-6]
	_ = x[Enter-7]
	_ = x[Exit-8]
	_ = x[Hover-9]
	_ = x[ActionsN-10]
}

const _Actions_name = "NoActionPressReleaseDoubleClickMoveDragScrollEnterExitHoverActionsN"

var _Actions_index = [...]uint8{0, 8, 13, 20, 31, 35, 39, 45, 50, 54, 59, 67}

func (i Actions) String() string {
	if i < 0 || i >= Actions(len(_Actions_index)-1) {
		return "Actions(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _Actions_name[_Actions_index[i]:_Actions_index[i+1]]
}

func (i *Actions) FromString(s string) error {
	for j := 0; j < len(_Actions_index)-1; j++ {
		if s == _Actions_name[_Actions_index[j]:_Actions_index[j+1]] {
			*i = Actions(j)
			return nil
		}
	}
	return errors.New("String: " + s + " is not a valid option for type: Actions")
}

var _Actions_descMap = map[Actions]string{
	0:  ``,
	1:  ``,
	2:  ``,
	3:  ``,
	4:  ``,
	5:  ``,
	6:  ``,
	7:  ``,
	8:  ``,
	9:  ``,
	10: ``,
}

func (i Actions) Desc() string {
	if str, ok := _Actions_descMap[i]; ok {
		return str
	}
	return "Actions(" + strconv.FormatInt(int64(i), 10) + ")"
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[SelectOne-0]
	_ = x[ExtendContinuous-1]
	_ = x[ExtendOne-2]
	_ = x[NoSelect-3]
	_ = x[Unselect-4]
	_ = x[SelectQuiet-5]
	_ = x[UnselectQuiet-6]
	_ = x[SelectModesN-7]
}

const _SelectModes_name = "SelectOneExtendContinuousExtendOneNoSelectUnselectSelectQuietUnselectQuietSelectModesN"

var _SelectModes_index = [...]uint8{0, 9, 25, 34, 42, 50, 61, 74, 86}

func (i SelectModes) String() string {
	if i < 0 || i >= SelectModes(len(_SelectModes_index)-1) {
		return "SelectModes(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _SelectModes_name[_SelectModes_index[i]:_SelectModes_index[i+1]]
}

func (i *SelectModes) FromString(s string) error {
	for j := 0; j < len(_SelectModes_index)-1; j++ {
		if s == _SelectModes_name[_SelectModes_index[j]:_SelectModes_index[j+1]] {
			*i = SelectModes(j)
			return nil
		}
	}
	return errors.New("String: " + s + " is not a valid option for type: SelectModes")
}

var _SelectModes_descMap = map[SelectModes]string{
	0: `SelectOne selects a single item, and is the default when no modifier key is pressed`,
	1: `ExtendContinuous, activated by Shift key, extends the selection to select a continuous region of selected items, with no gaps`,
	2: `ExtendOne, activated by Control or Meta / Command, extends the selection by adding the one additional item just clicked on, creating a potentially discontinuous set of selected items`,
	3: `NoSelect means do not update selection -- this is used programmatically and not available via modifier key`,
	4: `Unselect means unselect items -- this is used programmatically and not available via modifier key -- typically ExtendOne will unselect if already selected`,
	5: `SelectQuiet means select without doing other updates or signals -- for bulk updates with a final update at the end -- used programmatically`,
	6: `UnselectQuiet means unselect without doing other updates or signals -- for bulk updates with a final update at the end -- used programmatically`,
	7: ``,
}

func (i SelectModes) Desc() string {
	if str, ok := _SelectModes_descMap[i]; ok {
		return str
	}
	return "SelectModes(" + strconv.FormatInt(int64(i), 10) + ")"
}
