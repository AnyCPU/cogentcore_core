// Code generated by "goki generate ./..."; DO NOT EDIT.

package packman

import (
	"goki.dev/gti"
	"goki.dev/ordmap"
)

var _ = gti.AddFunc(&gti.Func{
	Name: "goki.dev/goki/packman.Build",
	Doc:  "Build builds an executable for the package\nat the config path for the config platforms.",
	Directives: gti.Directives{
		&gti.Directive{Tool: "gti", Directive: "add", Args: []string{}},
	},
	Args: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"c", &gti.Field{Name: "c", Type: "*config.Config", Doc: "", Directives: gti.Directives{}}},
	}),
	Returns: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"error", &gti.Field{Name: "error", Type: "error", Doc: "", Directives: gti.Directives{}}},
	}),
})

var _ = gti.AddFunc(&gti.Func{
	Name: "goki.dev/goki/packman.GenerateColorScheme",
	Doc:  "GenerateColorScheme generates a Go color scheme\ndeclaration file from a Material Theme Builder\nAndroid Views XML file located at the config source\nfile path. It stores the resulting Go file\nat the config destination file path. The generated\nfile is part of the config package and puts the\nconfig comment as the comment for the ColorSchemes variable.",
	Directives: gti.Directives{
		&gti.Directive{Tool: "gti", Directive: "add", Args: []string{}},
		&gti.Directive{Tool: "grease", Directive: "cmd", Args: []string{"-name", "colorgen"}},
	},
	Args: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"c", &gti.Field{Name: "c", Type: "*config.Config", Doc: "", Directives: gti.Directives{}}},
	}),
	Returns: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"error", &gti.Field{Name: "error", Type: "error", Doc: "", Directives: gti.Directives{}}},
	}),
})

var _ = gti.AddFunc(&gti.Func{
	Name: "goki.dev/goki/packman.Install",
	Doc:  "Install installs the package the config ID\nby looking for it in the list of supported packages.\nIf the config ID is a filepath, it calls [InstallLocal] instead.",
	Directives: gti.Directives{
		&gti.Directive{Tool: "gti", Directive: "add", Args: []string{}},
	},
	Args: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"c", &gti.Field{Name: "c", Type: "*config.Config", Doc: "", Directives: gti.Directives{}}},
	}),
	Returns: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"error", &gti.Field{Name: "error", Type: "error", Doc: "", Directives: gti.Directives{}}},
	}),
})

var _ = gti.AddFunc(&gti.Func{
	Name: "goki.dev/goki/packman.Log",
	Doc:  "Log prints the logs from your app running on the\nconfig operating system (android or ios) to the terminal.",
	Directives: gti.Directives{
		&gti.Directive{Tool: "gti", Directive: "add", Args: []string{}},
	},
	Args: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"c", &gti.Field{Name: "c", Type: "*config.Config", Doc: "", Directives: gti.Directives{}}},
	}),
	Returns: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"error", &gti.Field{Name: "error", Type: "error", Doc: "", Directives: gti.Directives{}}},
	}),
})

var _ = gti.AddFunc(&gti.Func{
	Name: "goki.dev/goki/packman.Release",
	Doc:  "Release releases the config project\nby calling [ReleaseApp] if it is an app\nand [ReleaseLibrary] if it is a library.",
	Directives: gti.Directives{
		&gti.Directive{Tool: "gti", Directive: "add", Args: []string{}},
	},
	Args: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"c", &gti.Field{Name: "c", Type: "*config.Config", Doc: "", Directives: gti.Directives{}}},
	}),
	Returns: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"error", &gti.Field{Name: "error", Type: "error", Doc: "", Directives: gti.Directives{}}},
	}),
})

var _ = gti.AddFunc(&gti.Func{
	Name: "goki.dev/goki/packman.GetVersion",
	Doc:  "GetVersion prints the version of the project.",
	Directives: gti.Directives{
		&gti.Directive{Tool: "gti", Directive: "add", Args: []string{}},
	},
	Args: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"c", &gti.Field{Name: "c", Type: "*config.Config", Doc: "", Directives: gti.Directives{}}},
	}),
	Returns: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"error", &gti.Field{Name: "error", Type: "error", Doc: "", Directives: gti.Directives{}}},
	}),
})

var _ = gti.AddFunc(&gti.Func{
	Name: "goki.dev/goki/packman.SetVersion",
	Doc:  "SetVersion updates the config and version file of the config project based\non the config version and commits and pushes the changes.",
	Directives: gti.Directives{
		&gti.Directive{Tool: "gti", Directive: "add", Args: []string{}},
	},
	Args: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"c", &gti.Field{Name: "c", Type: "*config.Config", Doc: "", Directives: gti.Directives{}}},
	}),
	Returns: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"error", &gti.Field{Name: "error", Type: "error", Doc: "", Directives: gti.Directives{}}},
	}),
})

var _ = gti.AddFunc(&gti.Func{
	Name: "goki.dev/goki/packman.UpdateVersion",
	Doc:  "UpdateVersion updates the version of the project by one patch version.",
	Directives: gti.Directives{
		&gti.Directive{Tool: "gti", Directive: "add", Args: []string{}},
	},
	Args: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"c", &gti.Field{Name: "c", Type: "*config.Config", Doc: "", Directives: gti.Directives{}}},
	}),
	Returns: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"error", &gti.Field{Name: "error", Type: "error", Doc: "", Directives: gti.Directives{}}},
	}),
})
