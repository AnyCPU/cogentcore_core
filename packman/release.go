// Copyright (c) 2023, The GoKi Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package packman

import (
	"fmt"
	"os"
	"os/exec"
	"strings"
	"time"

	"goki.dev/goki/config"
)

// Release releases the config app/library
// by calling [ReleaseApp] if it is an app
// and [ReleaseLibrary] if it is a library.
func Release(c *config.Config) error {
	if c.Type == config.TypeApp {
		return ReleaseApp(c)
	}
	return ReleaseLibrary(c)
}

// ReleaseApp releases the config app.
func ReleaseApp(c *config.Config) error {
	// TODO: implement
	return nil
}

// ReleaseLibrary releases the config library.
func ReleaseLibrary(c *config.Config) error {
	str, err := VersionFileString(c)
	if err != nil {
		return fmt.Errorf("error generating version file string: %w", err)
	}
	os.WriteFile(c.Release.VersionFile, []byte(str), 0666)
	if err != nil {
		return fmt.Errorf("error writing version string to version file: %w", err)
	}
	return nil
}

// VersionFileString returns the version file string
// for a project with the given config info.
func VersionFileString(c *config.Config) (string, error) {
	var b strings.Builder
	b.WriteString("// Code generated by " + ArgsString(os.Args) + "; DO NOT EDIT.\n\n")
	b.WriteString("package " + c.Name + "\n\n")
	b.WriteString("const (\n")
	b.WriteString("\tVersion = \"" + c.Version + "\"\n")

	gc := exec.Command("git", "rev-parse", "--short", "HEAD")
	res, err := gc.CombinedOutput()
	if err != nil {
		return "", fmt.Errorf("error getting previous git commit: %w", err)
	}
	b.WriteString("\tGitCommit = \"" + string(res) + "\" // the commit just before the release\n")

	date := time.Now().Format("2006-01-02 15:04")
	b.WriteString("\tVersionDate = \"" + date + "\" // the date-time of the release in UTC (YYYY-MM-DD HH:MM)\n")
	b.WriteString(")\n\n")
	return b.String(), nil
}
