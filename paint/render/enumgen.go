// Code generated by "core generate"; DO NOT EDIT.

package render

import (
	"cogentcore.org/core/enums"
)

var _RendererTypesValues = []RendererTypes{0, 1, 2}

// RendererTypesN is the highest valid value for type RendererTypes, plus one.
const RendererTypesN RendererTypes = 3

var _RendererTypesValueMap = map[string]RendererTypes{`Image`: 0, `Drawer`: 1, `Code`: 2}

var _RendererTypesDescMap = map[RendererTypes]string{0: `Image is a rasterizing renderer capable of returning a standard go *image.RGBA image.`, 1: `Drawer is a direct renderer that uses the [system.Drawer] to render directly, potentially only for a GPU drawer (e.g., [xyz]).`, 2: `Code is a renderer that generates some kind of structured code to represent the render, as in SVG or PDF. The output is []byte.`}

var _RendererTypesMap = map[RendererTypes]string{0: `Image`, 1: `Drawer`, 2: `Code`}

// String returns the string representation of this RendererTypes value.
func (i RendererTypes) String() string { return enums.String(i, _RendererTypesMap) }

// SetString sets the RendererTypes value from its string representation,
// and returns an error if the string is invalid.
func (i *RendererTypes) SetString(s string) error {
	return enums.SetString(i, s, _RendererTypesValueMap, "RendererTypes")
}

// Int64 returns the RendererTypes value as an int64.
func (i RendererTypes) Int64() int64 { return int64(i) }

// SetInt64 sets the RendererTypes value from an int64.
func (i *RendererTypes) SetInt64(in int64) { *i = RendererTypes(in) }

// Desc returns the description of the RendererTypes value.
func (i RendererTypes) Desc() string { return enums.Desc(i, _RendererTypesDescMap) }

// RendererTypesValues returns all possible values for the type RendererTypes.
func RendererTypesValues() []RendererTypes { return _RendererTypesValues }

// Values returns all possible values for the type RendererTypes.
func (i RendererTypes) Values() []enums.Enum { return enums.Values(_RendererTypesValues) }

// MarshalText implements the [encoding.TextMarshaler] interface.
func (i RendererTypes) MarshalText() ([]byte, error) { return []byte(i.String()), nil }

// UnmarshalText implements the [encoding.TextUnmarshaler] interface.
func (i *RendererTypes) UnmarshalText(text []byte) error {
	return enums.UnmarshalText(i, text, "RendererTypes")
}
