// Code generated by "stringer -type=Steps"; DO NOT EDIT.

package parse

import (
	"errors"
	"strconv"
)

var _ = errors.New("dummy error")

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[Match-0]
	_ = x[SubMatch-1]
	_ = x[NoMatch-2]
	_ = x[Run-3]
	_ = x[RunAct-4]
	_ = x[StepsN-5]
}

const _Steps_name = "MatchSubMatchNoMatchRunRunActStepsN"

var _Steps_index = [...]uint8{0, 5, 13, 20, 23, 29, 35}

func (i Steps) String() string {
	if i < 0 || i >= Steps(len(_Steps_index)-1) {
		return "Steps(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _Steps_name[_Steps_index[i]:_Steps_index[i+1]]
}

func (i *Steps) FromString(s string) error {
	for j := 0; j < len(_Steps_index)-1; j++ {
		if s == _Steps_name[_Steps_index[j]:_Steps_index[j+1]] {
			*i = Steps(j)
			return nil
		}
	}
	return errors.New("String: " + s + " is not a valid option for type: Steps")
}
