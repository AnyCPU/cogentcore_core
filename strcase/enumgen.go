// Code generated by "core generate"; DO NOT EDIT.

package strcase

import (
	"errors"
	"log"
	"strconv"

	"cogentcore.org/core/enums"
)

var _WordCaseValues = []WordCase{0, 1, 2, 3, 4, 5}

// WordCaseN is the highest valid value
// for type WordCase, plus one.
const WordCaseN WordCase = 6

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the enumgen command to generate them again.
func _WordCaseNoOp() {
	var x [1]struct{}
	_ = x[Original-(0)]
	_ = x[LowerCase-(1)]
	_ = x[UpperCase-(2)]
	_ = x[TitleCase-(3)]
	_ = x[CamelCase-(4)]
	_ = x[SentenceCase-(5)]
}

var _WordCaseNameToValueMap = map[string]WordCase{
	`Original`:     0,
	`LowerCase`:    1,
	`UpperCase`:    2,
	`TitleCase`:    3,
	`CamelCase`:    4,
	`SentenceCase`: 5,
}

var _WordCaseDescMap = map[WordCase]string{
	0: `Original indicates to preserve the original input case.`,
	1: `LowerCase indicates to make all letters lower case (example).`,
	2: `UpperCase indicates to make all letters upper case (EXAMPLE).`,
	3: `TitleCase indicates to make only the first letter upper case (Example).`,
	4: `CamelCase indicates to make only the first letter upper case, except in the first word, in which all letters are lower case (exampleText).`,
	5: `SentenceCase indicates to make only the first letter upper case, and only for the first word (all other words have fully lower case letters).`,
}

var _WordCaseMap = map[WordCase]string{
	0: `Original`,
	1: `LowerCase`,
	2: `UpperCase`,
	3: `TitleCase`,
	4: `CamelCase`,
	5: `SentenceCase`,
}

// String returns the string representation
// of this WordCase value.
func (i WordCase) String() string {
	if str, ok := _WordCaseMap[i]; ok {
		return str
	}
	return strconv.FormatInt(int64(i), 10)
}

// SetString sets the WordCase value from its
// string representation, and returns an
// error if the string is invalid.
func (i *WordCase) SetString(s string) error {
	if val, ok := _WordCaseNameToValueMap[s]; ok {
		*i = val
		return nil
	}
	return errors.New(s + " is not a valid value for type WordCase")
}

// Int64 returns the WordCase value as an int64.
func (i WordCase) Int64() int64 {
	return int64(i)
}

// SetInt64 sets the WordCase value from an int64.
func (i *WordCase) SetInt64(in int64) {
	*i = WordCase(in)
}

// Desc returns the description of the WordCase value.
func (i WordCase) Desc() string {
	if str, ok := _WordCaseDescMap[i]; ok {
		return str
	}
	return i.String()
}

// WordCaseValues returns all possible values
// for the type WordCase.
func WordCaseValues() []WordCase {
	return _WordCaseValues
}

// Values returns all possible values
// for the type WordCase.
func (i WordCase) Values() []enums.Enum {
	res := make([]enums.Enum, len(_WordCaseValues))
	for i, d := range _WordCaseValues {
		res[i] = d
	}
	return res
}

// IsValid returns whether the value is a
// valid option for type WordCase.
func (i WordCase) IsValid() bool {
	_, ok := _WordCaseMap[i]
	return ok
}

// MarshalText implements the [encoding.TextMarshaler] interface.
func (i WordCase) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the [encoding.TextUnmarshaler] interface.
func (i *WordCase) UnmarshalText(text []byte) error {
	if err := i.SetString(string(text)); err != nil {
		log.Println("WordCase.UnmarshalText:", err)
	}
	return nil
}
