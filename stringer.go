// Code generated by "stringer -output stringer.go -type=LightColors,SelModes,NodeFlags,SceneFlags"; DO NOT EDIT.

package gi3d

import (
	"errors"
	"strconv"
)

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[DirectSun-0]
	_ = x[CarbonArc-1]
	_ = x[Halogen-2]
	_ = x[Tungsten100W-3]
	_ = x[Tungsten40W-4]
	_ = x[Candle-5]
	_ = x[Overcast-6]
	_ = x[FluorWarm-7]
	_ = x[FluorStd-8]
	_ = x[FluorCool-9]
	_ = x[FluorFull-10]
	_ = x[FluorGrow-11]
	_ = x[MercuryVapor-12]
	_ = x[SodiumVapor-13]
	_ = x[MetalHalide-14]
	_ = x[LightColorsN-15]
}

const _LightColors_name = "DirectSunCarbonArcHalogenTungsten100WTungsten40WCandleOvercastFluorWarmFluorStdFluorCoolFluorFullFluorGrowMercuryVaporSodiumVaporMetalHalideLightColorsN"

var _LightColors_index = [...]uint8{0, 9, 18, 25, 37, 48, 54, 62, 71, 79, 88, 97, 106, 118, 129, 140, 152}

func (i LightColors) String() string {
	if i < 0 || i >= LightColors(len(_LightColors_index)-1) {
		return "LightColors(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _LightColors_name[_LightColors_index[i]:_LightColors_index[i+1]]
}

func (i *LightColors) FromString(s string) error {
	for j := 0; j < len(_LightColors_index)-1; j++ {
		if s == _LightColors_name[_LightColors_index[j]:_LightColors_index[j+1]] {
			*i = LightColors(j)
			return nil
		}
	}
	return errors.New("String: " + s + " is not a valid option for type: LightColors")
}

var _LightColors_descMap = map[LightColors]string{
	0:  ``,
	1:  ``,
	2:  ``,
	3:  ``,
	4:  ``,
	5:  ``,
	6:  ``,
	7:  ``,
	8:  ``,
	9:  ``,
	10: ``,
	11: ``,
	12: ``,
	13: ``,
	14: ``,
	15: ``,
}

func (i LightColors) Desc() string {
	if str, ok := _LightColors_descMap[i]; ok {
		return str
	}
	return "LightColors(" + strconv.FormatInt(int64(i), 10) + ")"
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[NotSelectable-0]
	_ = x[Selectable-1]
	_ = x[SelectionBox-2]
	_ = x[Manipulable-3]
	_ = x[SelModesN-4]
}

const _SelModes_name = "NotSelectableSelectableSelectionBoxManipulableSelModesN"

var _SelModes_index = [...]uint8{0, 13, 23, 35, 46, 55}

func (i SelModes) String() string {
	if i < 0 || i >= SelModes(len(_SelModes_index)-1) {
		return "SelModes(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _SelModes_name[_SelModes_index[i]:_SelModes_index[i+1]]
}

func (i *SelModes) FromString(s string) error {
	for j := 0; j < len(_SelModes_index)-1; j++ {
		if s == _SelModes_name[_SelModes_index[j]:_SelModes_index[j+1]] {
			*i = SelModes(j)
			return nil
		}
	}
	return errors.New("String: " + s + " is not a valid option for type: SelModes")
}

var _SelModes_descMap = map[SelModes]string{
	0: `NotSelectable means that selection events are ignored entirely`,
	1: `Selectable means that nodes can be selected but no visible consequence occurs`,
	2: `SelectionBox means that a selection bounding box is drawn around selected nodes`,
	3: `Manipulable means that a manipulation box will be created for selected nodes, which can update the Pose parameters dynamically.`,
	4: ``,
}

func (i SelModes) Desc() string {
	if str, ok := _SelModes_descMap[i]; ok {
		return str
	}
	return "SelModes(" + strconv.FormatInt(int64(i), 10) + ")"
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[WorldMatrixUpdated-27]
	_ = x[VectorsUpdated-28]
	_ = x[NodeFlagsN-29]
}

const _NodeFlags_name = "WorldMatrixUpdatedVectorsUpdatedNodeFlagsN"

var _NodeFlags_index = [...]uint8{0, 18, 32, 42}

func (i NodeFlags) String() string {
	i -= 27
	if i < 0 || i >= NodeFlags(len(_NodeFlags_index)-1) {
		return "NodeFlags(" + strconv.FormatInt(int64(i+27), 10) + ")"
	}
	return _NodeFlags_name[_NodeFlags_index[i]:_NodeFlags_index[i+1]]
}

func StringToNodeFlags(s string) (NodeFlags, error) {
	for i := 0; i < len(_NodeFlags_index)-1; i++ {
		if s == _NodeFlags_name[_NodeFlags_index[i]:_NodeFlags_index[i+1]] {
			return NodeFlags(i + 27), nil
		}
	}
	return 0, errors.New("String: " + s + " is not a valid option for type: NodeFlags")
}

var _NodeFlags_descMap = map[NodeFlags]string{
	27: `WorldMatrixUpdated means that the Pose.WorldMatrix has been updated`,
	28: `VectorsUpdated means that the rendering vectors information is updated`,
	29: ``,
}

func (i NodeFlags) Desc() string {
	if str, ok := _NodeFlags_descMap[i]; ok {
		return str
	}
	return "NodeFlags(" + strconv.FormatInt(int64(i), 10) + ")"
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[Rendering-27]
	_ = x[SceneFlagsN-28]
}

const _SceneFlags_name = "RenderingSceneFlagsN"

var _SceneFlags_index = [...]uint8{0, 9, 20}

func (i SceneFlags) String() string {
	i -= 27
	if i < 0 || i >= SceneFlags(len(_SceneFlags_index)-1) {
		return "SceneFlags(" + strconv.FormatInt(int64(i+27), 10) + ")"
	}
	return _SceneFlags_name[_SceneFlags_index[i]:_SceneFlags_index[i+1]]
}

func StringToSceneFlags(s string) (SceneFlags, error) {
	for i := 0; i < len(_SceneFlags_index)-1; i++ {
		if s == _SceneFlags_name[_SceneFlags_index[i]:_SceneFlags_index[i+1]] {
			return SceneFlags(i + 27), nil
		}
	}
	return 0, errors.New("String: " + s + " is not a valid option for type: SceneFlags")
}

var _SceneFlags_descMap = map[SceneFlags]string{
	27: `Rendering means that the scene is currently rendering`,
	28: ``,
}

func (i SceneFlags) Desc() string {
	if str, ok := _SceneFlags_descMap[i]; ok {
		return str
	}
	return "SceneFlags(" + strconv.FormatInt(int64(i), 10) + ")"
}
