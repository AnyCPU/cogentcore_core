// Code generated by "core generate"; DO NOT EDIT.

package rich

import (
	"cogentcore.org/core/types"
)

var _ = types.AddType(&types.Type{Name: "cogentcore.org/core/styles/rich.Style", IDName: "style", Doc: "Style contains all of the rich text styling properties, that apply to one\nspan of text. These are encoded into a uint32 rune value in [rich.Text].\nSee [Context] for additional context needed for full specification.", Directives: []types.Directive{{Tool: "go", Directive: "generate", Args: []string{"core", "generate"}}, {Tool: "types", Directive: "add"}}, Fields: []types.Field{{Name: "Family", Doc: "Family indicates the generic family of typeface to use, where the\nspecific named values to use for each are provided in the Context."}, {Name: "Slant", Doc: "Slant allows italic or oblique faces to be selected."}, {Name: "Weight", Doc: "Weights are the degree of blackness or stroke thickness of a font.\nThis value ranges from 100.0 to 900.0, with 400.0 as normal."}, {Name: "Stretch", Doc: "Stretch is the width of a font as an approximate fraction of the normal width.\nWidths range from 0.5 to 2.0 inclusive, with 1.0 as the normal width."}, {Name: "Special", Doc: "Special additional formatting factors that are not otherwise\ncaptured by changes in font rendering properties or decorations."}, {Name: "Decoration", Doc: "Decorations are underline, line-through, etc, as bit flags\nthat must be set using [Decorations.SetFlag]."}, {Name: "FillColor", Doc: "\tFillColor is the color to use for glyph fill (i.e., the standard \"ink\" color)\nif the Decoration FillColor flag is set. This will be encoded in a uint32 following\nthe style rune, in rich.Text spans."}, {Name: "StrokeColor", Doc: "\tStrokeColor is the color to use for glyph stroking if the Decoration StrokeColor\nflag is set. This will be encoded in a uint32 following the style rune,\nin rich.Text spans."}, {Name: "Background", Doc: "\tBackground is the color to use for the background region if the Decoration\nBackground flag is set. This will be encoded in a uint32 following the style rune,\nin rich.Text spans."}}})

var _ = types.AddType(&types.Type{Name: "cogentcore.org/core/styles/rich.Index", IDName: "index", Doc: "Index represents the [Span][Rune] index of a given rune.\nThe Rune index can be either the actual index for [Text], taking\ninto account the leading style rune(s), or the logical index\ninto a [][]rune type with no style runes, depending on the context.", Directives: []types.Directive{{Tool: "types", Directive: "add"}}, Fields: []types.Field{{Name: "Span"}, {Name: "Rune"}}})
