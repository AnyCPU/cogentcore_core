// Code generated by "stringer -output stringer.go -type=MarkerUnits,PathCmds,SVGFlags,ViewBoxMeetOrSlice"; DO NOT EDIT.

package svg

import (
	"errors"
	"strconv"
)

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[StrokeWidth-0]
	_ = x[UserSpaceOnUse-1]
	_ = x[MarkerUnitsN-2]
}

const _MarkerUnits_name = "StrokeWidthUserSpaceOnUseMarkerUnitsN"

var _MarkerUnits_index = [...]uint8{0, 11, 25, 37}

func (i MarkerUnits) String() string {
	if i < 0 || i >= MarkerUnits(len(_MarkerUnits_index)-1) {
		return "MarkerUnits(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _MarkerUnits_name[_MarkerUnits_index[i]:_MarkerUnits_index[i+1]]
}

func (i *MarkerUnits) FromString(s string) error {
	for j := 0; j < len(_MarkerUnits_index)-1; j++ {
		if s == _MarkerUnits_name[_MarkerUnits_index[j]:_MarkerUnits_index[j+1]] {
			*i = MarkerUnits(j)
			return nil
		}
	}
	return errors.New("String: " + s + " is not a valid option for type: MarkerUnits")
}

var _MarkerUnits_descMap = map[MarkerUnits]string{
	0: ``,
	1: ``,
	2: ``,
}

func (i MarkerUnits) Desc() string {
	if str, ok := _MarkerUnits_descMap[i]; ok {
		return str
	}
	return "MarkerUnits(" + strconv.FormatInt(int64(i), 10) + ")"
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[PcM-0]
	_ = x[Pcm-1]
	_ = x[PcL-2]
	_ = x[Pcl-3]
	_ = x[PcH-4]
	_ = x[Pch-5]
	_ = x[PcV-6]
	_ = x[Pcv-7]
	_ = x[PcC-8]
	_ = x[Pcc-9]
	_ = x[PcS-10]
	_ = x[Pcs-11]
	_ = x[PcQ-12]
	_ = x[Pcq-13]
	_ = x[PcT-14]
	_ = x[Pct-15]
	_ = x[PcA-16]
	_ = x[Pca-17]
	_ = x[PcZ-18]
	_ = x[Pcz-19]
	_ = x[PcErr-20]
}

const _PathCmds_name = "PcMPcmPcLPclPcHPchPcVPcvPcCPccPcSPcsPcQPcqPcTPctPcAPcaPcZPczPcErr"

var _PathCmds_index = [...]uint8{0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42, 45, 48, 51, 54, 57, 60, 65}

func (i PathCmds) String() string {
	if i >= PathCmds(len(_PathCmds_index)-1) {
		return "PathCmds(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _PathCmds_name[_PathCmds_index[i]:_PathCmds_index[i+1]]
}

func (i *PathCmds) FromString(s string) error {
	for j := 0; j < len(_PathCmds_index)-1; j++ {
		if s == _PathCmds_name[_PathCmds_index[j]:_PathCmds_index[j+1]] {
			*i = PathCmds(j)
			return nil
		}
	}
	return errors.New("String: " + s + " is not a valid option for type: PathCmds")
}

var _PathCmds_descMap = map[PathCmds]string{
	0:  `move pen, abs coords`,
	1:  `move pen, rel coords`,
	2:  `lineto, abs`,
	3:  `lineto, rel`,
	4:  `horizontal lineto, abs`,
	5:  `relative lineto, rel`,
	6:  `vertical lineto, abs`,
	7:  `vertical lineto, rel`,
	8:  `Bezier curveto, abs`,
	9:  `Bezier curveto, rel`,
	10: `smooth Bezier curveto, abs`,
	11: `smooth Bezier curveto, rel`,
	12: `quadratic Bezier curveto, abs`,
	13: `quadratic Bezier curveto, rel`,
	14: `smooth quadratic Bezier curveto, abs`,
	15: `smooth quadratic Bezier curveto, rel`,
	16: `elliptical arc, abs`,
	17: `elliptical arc, rel`,
	18: `close path`,
	19: `close path`,
	20: `error -- invalid command`,
}

func (i PathCmds) Desc() string {
	if str, ok := _PathCmds_descMap[i]; ok {
		return str
	}
	return "PathCmds(" + strconv.FormatInt(int64(i), 10) + ")"
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[Rendering-37]
	_ = x[SVGFlagsN-38]
}

const _SVGFlags_name = "RenderingSVGFlagsN"

var _SVGFlags_index = [...]uint8{0, 9, 18}

func (i SVGFlags) String() string {
	i -= 37
	if i < 0 || i >= SVGFlags(len(_SVGFlags_index)-1) {
		return "SVGFlags(" + strconv.FormatInt(int64(i+37), 10) + ")"
	}
	return _SVGFlags_name[_SVGFlags_index[i]:_SVGFlags_index[i+1]]
}

func StringToSVGFlags(s string) (SVGFlags, error) {
	for i := 0; i < len(_SVGFlags_index)-1; i++ {
		if s == _SVGFlags_name[_SVGFlags_index[i]:_SVGFlags_index[i+1]] {
			return SVGFlags(i + 37), nil
		}
	}
	return 0, errors.New("String: " + s + " is not a valid option for type: SVGFlags")
}

var _SVGFlags_descMap = map[SVGFlags]string{
	37: `Rendering means that the SVG is currently redrawing Can be useful to check for animations etc to decide whether to drive another update`,
	38: ``,
}

func (i SVGFlags) Desc() string {
	if str, ok := _SVGFlags_descMap[i]; ok {
		return str
	}
	return "SVGFlags(" + strconv.FormatInt(int64(i), 10) + ")"
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[Meet-0]
	_ = x[Slice-1]
	_ = x[ViewBoxMeetOrSliceN-2]
}

const _ViewBoxMeetOrSlice_name = "MeetSliceViewBoxMeetOrSliceN"

var _ViewBoxMeetOrSlice_index = [...]uint8{0, 4, 9, 28}

func (i ViewBoxMeetOrSlice) String() string {
	if i < 0 || i >= ViewBoxMeetOrSlice(len(_ViewBoxMeetOrSlice_index)-1) {
		return "ViewBoxMeetOrSlice(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _ViewBoxMeetOrSlice_name[_ViewBoxMeetOrSlice_index[i]:_ViewBoxMeetOrSlice_index[i+1]]
}

func (i *ViewBoxMeetOrSlice) FromString(s string) error {
	for j := 0; j < len(_ViewBoxMeetOrSlice_index)-1; j++ {
		if s == _ViewBoxMeetOrSlice_name[_ViewBoxMeetOrSlice_index[j]:_ViewBoxMeetOrSlice_index[j+1]] {
			*i = ViewBoxMeetOrSlice(j)
			return nil
		}
	}
	return errors.New("String: " + s + " is not a valid option for type: ViewBoxMeetOrSlice")
}

var _ViewBoxMeetOrSlice_descMap = map[ViewBoxMeetOrSlice]string{
	0: `Meet means the entire ViewBox is visible within Viewport, and it is scaled up as much as possible to meet the align constraints`,
	1: `Slice means the entire ViewBox is covered by the ViewBox, and the ViewBox is scaled down as much as possible, while still meeting the align constraints`,
	2: ``,
}

func (i ViewBoxMeetOrSlice) Desc() string {
	if str, ok := _ViewBoxMeetOrSlice_descMap[i]; ok {
		return str
	}
	return "ViewBoxMeetOrSlice(" + strconv.FormatInt(int64(i), 10) + ")"
}
