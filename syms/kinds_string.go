// Code generated by "stringer -type=Kinds"; DO NOT EDIT.

package syms

import (
	"errors"
	"strconv"
)

var _ = errors.New("dummy error")

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[Unknown-0]
	_ = x[Primitive-1]
	_ = x[Numeric-2]
	_ = x[Integer-3]
	_ = x[Signed-4]
	_ = x[Int-5]
	_ = x[Int8-6]
	_ = x[Int16-7]
	_ = x[Int32-8]
	_ = x[Int64-9]
	_ = x[Unsigned-10]
	_ = x[Uint-11]
	_ = x[Uint8-12]
	_ = x[Uint16-13]
	_ = x[Uint32-14]
	_ = x[Uint64-15]
	_ = x[Uintptr-16]
	_ = x[Ptr-17]
	_ = x[Ref-18]
	_ = x[UnsafePtr-19]
	_ = x[Fixed-20]
	_ = x[Fixed26_6-21]
	_ = x[Fixed16_6-22]
	_ = x[Fixed0_32-23]
	_ = x[Float-24]
	_ = x[Float16-25]
	_ = x[Float32-26]
	_ = x[Float64-27]
	_ = x[Complex-28]
	_ = x[Complex64-29]
	_ = x[Complex128-30]
	_ = x[Bool-31]
	_ = x[Composite-32]
	_ = x[Tuple-33]
	_ = x[Range-34]
	_ = x[Array-35]
	_ = x[List-36]
	_ = x[String-37]
	_ = x[Matrix-38]
	_ = x[Tensor-39]
	_ = x[Map-40]
	_ = x[Set-41]
	_ = x[FrozenSet-42]
	_ = x[Struct-43]
	_ = x[Class-44]
	_ = x[Object-45]
	_ = x[Chan-46]
	_ = x[Function-47]
	_ = x[Func-48]
	_ = x[Method-49]
	_ = x[Interface-50]
	_ = x[KindsN-51]
}

const _Kinds_name = "UnknownPrimitiveNumericIntegerSignedIntInt8Int16Int32Int64UnsignedUintUint8Uint16Uint32Uint64UintptrPtrRefUnsafePtrFixedFixed26_6Fixed16_6Fixed0_32FloatFloat16Float32Float64ComplexComplex64Complex128BoolCompositeTupleRangeArrayListStringMatrixTensorMapSetFrozenSetStructClassObjectChanFunctionFuncMethodInterfaceKindsN"

var _Kinds_index = [...]uint16{0, 7, 16, 23, 30, 36, 39, 43, 48, 53, 58, 66, 70, 75, 81, 87, 93, 100, 103, 106, 115, 120, 129, 138, 147, 152, 159, 166, 173, 180, 189, 199, 203, 212, 217, 222, 227, 231, 237, 243, 249, 252, 255, 264, 270, 275, 281, 285, 293, 297, 303, 312, 318}

func (i Kinds) String() string {
	if i < 0 || i >= Kinds(len(_Kinds_index)-1) {
		return "Kinds(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _Kinds_name[_Kinds_index[i]:_Kinds_index[i+1]]
}

func (i *Kinds) FromString(s string) error {
	for j := 0; j < len(_Kinds_index)-1; j++ {
		if s == _Kinds_name[_Kinds_index[j]:_Kinds_index[j+1]] {
			*i = Kinds(j)
			return nil
		}
	}
	return errors.New("String: " + s + " is not a valid option for type: Kinds")
}
