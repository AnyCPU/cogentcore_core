// Code generated by "enumgen "; DO NOT EDIT.

package testdata

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/goki/enums/enums"
	"strconv"
	"strings"
)

const _MyEnumName = "SundayMondayTuesdayWednesdayThursdayFridaySaturday"

var _MyEnumIndex = [...]uint8{0, 6, 12, 19, 28, 36, 42, 50}

const _MyEnumLowerName = "sundaymondaytuesdaywednesdaythursdayfridaysaturday"

// String returns the string representation
// of this MyEnum value.
func (i MyEnum) String() string {
	i -= 1
	if i < 0 || i >= MyEnum(len(_MyEnumIndex)-1) {
		return "MyEnum(" + strconv.FormatInt(int64(i+1), 10) + ")"
	}
	return _MyEnumName[_MyEnumIndex[i]:_MyEnumIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _MyEnumNoOp() {
	var x [1]struct{}
	_ = x[Sunday-(1)]
	_ = x[Monday-(2)]
	_ = x[Tuesday-(3)]
	_ = x[Wednesday-(4)]
	_ = x[Thursday-(5)]
	_ = x[Friday-(6)]
	_ = x[Saturday-(7)]
}

var _MyEnumValues = []MyEnum{Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, Saturday}

var _MyEnumNameToValueMap = map[string]MyEnum{
	_MyEnumName[0:6]:        Sunday,
	_MyEnumLowerName[0:6]:   Sunday,
	_MyEnumName[6:12]:       Monday,
	_MyEnumLowerName[6:12]:  Monday,
	_MyEnumName[12:19]:      Tuesday,
	_MyEnumLowerName[12:19]: Tuesday,
	_MyEnumName[19:28]:      Wednesday,
	_MyEnumLowerName[19:28]: Wednesday,
	_MyEnumName[28:36]:      Thursday,
	_MyEnumLowerName[28:36]: Thursday,
	_MyEnumName[36:42]:      Friday,
	_MyEnumLowerName[36:42]: Friday,
	_MyEnumName[42:50]:      Saturday,
	_MyEnumLowerName[42:50]: Saturday,
}

var _MyEnumNames = []string{
	_MyEnumName[0:6],
	_MyEnumName[6:12],
	_MyEnumName[12:19],
	_MyEnumName[19:28],
	_MyEnumName[28:36],
	_MyEnumName[36:42],
	_MyEnumName[42:50],
}

var _MyEnumDescMap = map[MyEnum]string{
	1: _MyEnumDescs[0],
	2: _MyEnumDescs[1],
	3: _MyEnumDescs[2],
	4: _MyEnumDescs[3],
	5: _MyEnumDescs[4],
	6: _MyEnumDescs[5],
	7: _MyEnumDescs[6],
}

var _MyEnumDescs = []string{
	`Sunday is the first day of the week`,
	`Monday is the second day of the week`,
	`Tuesday is the third day of the week`,
	`Wednesday is the fourth day of the week`,
	`Thursday is the fifth day of the week`,
	`Friday is the sixth day of the week`,
	`Saturday is the seventh day of the week`,
}

// SetString sets the MyEnum value from its
// string representation, and returns an
// error if the string is invalid.
func (i *MyEnum) SetString(s string) error {
	if val, ok := _MyEnumNameToValueMap[s]; ok {
		*i = val
		return nil
	}

	if val, ok := _MyEnumNameToValueMap[strings.ToLower(s)]; ok {
		*i = val
		return nil
	}
	return errors.New(s + " does not belong to MyEnum values")
}

// Int64 returns the MyEnum value as an int64.
func (i MyEnum) Int64() int64 {
	return int64(i)
}

// SetInt64 sets the MyEnum value from an int64.
func (i *MyEnum) SetInt64(in int64) {
	*i = MyEnum(in)
}

// Desc returns the description of the MyEnum value.
func (i MyEnum) Desc() string {
	if str, ok := _MyEnumDescMap[i]; ok {
		return str
	}
	return i.String()
}

// MyEnumValues returns all possible values of
// the type MyEnum. This slice will be in the
// same order as those returned by the Values,
// Strings, and Descs methods on MyEnum.
func MyEnumValues() []MyEnum {
	return _MyEnumValues
}

// Values returns all possible values of
// type MyEnum. This slice will be in the
// same order as those returned by Strings and Descs.
func (i MyEnum) Values() []enums.Enum {
	res := make([]enums.Enum, len(_MyEnumValues))
	for i, d := range _MyEnumValues {
		res[i] = &d
	}
	return res
}

// Strings returns the string representations of
// all possible values of type MyEnum.
// This slice will be in the same order as
// those returned by Values and Descs.
func (i MyEnum) Strings() []string {
	return _MyEnumNames
}

// Descs returns the descriptions of all
// possible values of type MyEnum.
// This slice will be in the same order as
// those returned by Values and Strings.
func (i MyEnum) Descs() []string {
	return _MyEnumDescs
}

// IsValid returns whether the value is a
// valid option for type MyEnum.
func (i MyEnum) IsValid() bool {
	for _, v := range _MyEnumValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for MyEnum
func (i MyEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for MyEnum
func (i *MyEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("MyEnum should be a string, got %s", data)
	}
	return i.SetString(s)
}

// MarshalText implements the encoding.TextMarshaler interface for MyEnum
func (i MyEnum) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for MyEnum
func (i *MyEnum) UnmarshalText(text []byte) error {
	return i.SetString(string(text))
}

const _MyBitEnumName = "AppleOrangePeachBlueberryGrapefruitStrawberry"

var _MyBitEnumIndex = [...]uint8{0, 5, 11, 16, 25, 35, 45}

const _MyBitEnumLowerName = "appleorangepeachblueberrygrapefruitstrawberry"

// String returns the string representation
// of this MyBitEnum value.
func (i MyBitEnum) String() string {
	if i < 0 || i >= MyBitEnum(len(_MyBitEnumIndex)-1) {
		return "MyBitEnum(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _MyBitEnumName[_MyBitEnumIndex[i]:_MyBitEnumIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _MyBitEnumNoOp() {
	var x [1]struct{}
	_ = x[Apple-(0)]
	_ = x[Orange-(1)]
	_ = x[Peach-(2)]
	_ = x[Blueberry-(3)]
	_ = x[Grapefruit-(4)]
	_ = x[Strawberry-(5)]
}

var _MyBitEnumValues = []MyBitEnum{Apple, Orange, Peach, Blueberry, Grapefruit, Strawberry}

var _MyBitEnumNameToValueMap = map[string]MyBitEnum{
	_MyBitEnumName[0:5]:        Apple,
	_MyBitEnumLowerName[0:5]:   Apple,
	_MyBitEnumName[5:11]:       Orange,
	_MyBitEnumLowerName[5:11]:  Orange,
	_MyBitEnumName[11:16]:      Peach,
	_MyBitEnumLowerName[11:16]: Peach,
	_MyBitEnumName[16:25]:      Blueberry,
	_MyBitEnumLowerName[16:25]: Blueberry,
	_MyBitEnumName[25:35]:      Grapefruit,
	_MyBitEnumLowerName[25:35]: Grapefruit,
	_MyBitEnumName[35:45]:      Strawberry,
	_MyBitEnumLowerName[35:45]: Strawberry,
}

var _MyBitEnumNames = []string{
	_MyBitEnumName[0:5],
	_MyBitEnumName[5:11],
	_MyBitEnumName[11:16],
	_MyBitEnumName[16:25],
	_MyBitEnumName[25:35],
	_MyBitEnumName[35:45],
}

var _MyBitEnumDescMap = map[MyBitEnum]string{
	0: _MyBitEnumDescs[0],
	1: _MyBitEnumDescs[1],
	2: _MyBitEnumDescs[2],
	3: _MyBitEnumDescs[3],
	4: _MyBitEnumDescs[4],
	5: _MyBitEnumDescs[5],
}

var _MyBitEnumDescs = []string{
	`An Apple is a red fruit`,
	`An Orange is an orange fruit`,
	`A Peach is a stonefruit`,
	`A Blueberry is a blue berry`,
	`A Grapefruit is large fruit`,
	`A Strawberry is a small red fruit`,
}

// SetString sets the MyBitEnum value from its
// string representation, and returns an
// error if the string is invalid.
func (i *MyBitEnum) SetString(s string) error {
	if val, ok := _MyBitEnumNameToValueMap[s]; ok {
		*i = val
		return nil
	}

	if val, ok := _MyBitEnumNameToValueMap[strings.ToLower(s)]; ok {
		*i = val
		return nil
	}
	return errors.New(s + " does not belong to MyBitEnum values")
}

// Int64 returns the MyBitEnum value as an int64.
func (i MyBitEnum) Int64() int64 {
	return int64(i)
}

// SetInt64 sets the MyBitEnum value from an int64.
func (i *MyBitEnum) SetInt64(in int64) {
	*i = MyBitEnum(in)
}

// Desc returns the description of the MyBitEnum value.
func (i MyBitEnum) Desc() string {
	if str, ok := _MyBitEnumDescMap[i]; ok {
		return str
	}
	return i.String()
}

// MyBitEnumValues returns all possible values of
// the type MyBitEnum. This slice will be in the
// same order as those returned by the Values,
// Strings, and Descs methods on MyBitEnum.
func MyBitEnumValues() []MyBitEnum {
	return _MyBitEnumValues
}

// Values returns all possible values of
// type MyBitEnum. This slice will be in the
// same order as those returned by Strings and Descs.
func (i MyBitEnum) Values() []enums.Enum {
	res := make([]enums.Enum, len(_MyBitEnumValues))
	for i, d := range _MyBitEnumValues {
		res[i] = &d
	}
	return res
}

// Strings returns the string representations of
// all possible values of type MyBitEnum.
// This slice will be in the same order as
// those returned by Values and Descs.
func (i MyBitEnum) Strings() []string {
	return _MyBitEnumNames
}

// Descs returns the descriptions of all
// possible values of type MyBitEnum.
// This slice will be in the same order as
// those returned by Values and Strings.
func (i MyBitEnum) Descs() []string {
	return _MyBitEnumDescs
}

// IsValid returns whether the value is a
// valid option for type MyBitEnum.
func (i MyBitEnum) IsValid() bool {
	for _, v := range _MyBitEnumValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for MyBitEnum
func (i MyBitEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for MyBitEnum
func (i *MyBitEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("MyBitEnum should be a string, got %s", data)
	}
	return i.SetString(s)
}

// MarshalText implements the encoding.TextMarshaler interface for MyBitEnum
func (i MyBitEnum) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for MyBitEnum
func (i *MyBitEnum) UnmarshalText(text []byte) error {
	return i.SetString(string(text))
}
