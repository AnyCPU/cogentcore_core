// Code generated by "goki generate"; DO NOT EDIT.

package testdata

import (
	"goki.dev/gti"
	"goki.dev/ki/v2"
	"goki.dev/ordmap"
)

// TestNodeType is the [gti.Type] for [TestNode]
var TestNodeType = gti.AddType(&gti.Type{
	Name:       "goki.dev/ki/v2/testdata.TestNode",
	Doc:        "",
	Directives: gti.Directives{},
	Fields: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"Sig1", &gti.Field{Name: "Sig1", Type: "ki.Signal", Doc: "", Directives: gti.Directives{}}},
		{"Sig2", &gti.Field{Name: "Sig2", Type: "ki.Signal", Doc: "", Directives: gti.Directives{}}},
	}),
	Embeds: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"ki.Node", &gti.Field{Name: "ki.Node", Type: "ki.Node", Doc: "", Directives: gti.Directives{}}},
	}),
	Methods:  ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
	Instance: &TestNode{},
})

// NewTestNode adds a new [TestNode] with
// the given name to the given parent.
func NewTestNode(par ki.Ki, name string) *TestNode {
	return par.NewChild(TestNodeType, name).(*TestNode)
}

// KiType returns the [*gti.Type] of [TestNode]
func (t *TestNode) KiType() *gti.Type {
	return TestNodeType
}

// New returns a new [*TestNode] value
func (t *TestNode) New() ki.Ki {
	return &TestNode{}
}

// NodeEmbedType is the [gti.Type] for [NodeEmbed]
var NodeEmbedType = gti.AddType(&gti.Type{
	Name: "goki.dev/ki/v2/testdata.NodeEmbed",
	Doc:  "NodeEmbed embeds ki.Node and adds a couple of fields.\nAlso has a directive processed by gti",
	Directives: gti.Directives{
		&gti.Directive{Tool: "direct", Directive: "value", Args: []string{}},
	},
	Fields: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"Mbr1", &gti.Field{Name: "Mbr1", Type: "string", Doc: "", Directives: gti.Directives{}}},
		{"Mbr2", &gti.Field{Name: "Mbr2", Type: "int", Doc: "", Directives: gti.Directives{}}},
	}),
	Embeds: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"ki.Node", &gti.Field{Name: "ki.Node", Type: "ki.Node", Doc: "", Directives: gti.Directives{}}},
	}),
	Methods:  ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
	Instance: &NodeEmbed{},
})

// NewNodeEmbed adds a new [NodeEmbed] with
// the given name to the given parent.
func NewNodeEmbed(par ki.Ki, name string) *NodeEmbed {
	return par.NewChild(NodeEmbedType, name).(*NodeEmbed)
}

// KiType returns the [*gti.Type] of [NodeEmbed]
func (t *NodeEmbed) KiType() *gti.Type {
	return NodeEmbedType
}

// New returns a new [*NodeEmbed] value
func (t *NodeEmbed) New() ki.Ki {
	return &NodeEmbed{}
}

// NodeFieldType is the [gti.Type] for [NodeField]
var NodeFieldType = gti.AddType(&gti.Type{
	Name:       "goki.dev/ki/v2/testdata.NodeField",
	Doc:        "",
	Directives: gti.Directives{},
	Fields: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"Field1", &gti.Field{Name: "Field1", Type: "NodeEmbed", Doc: "", Directives: gti.Directives{}}},
	}),
	Embeds: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"NodeEmbed", &gti.Field{Name: "NodeEmbed", Type: "NodeEmbed", Doc: "", Directives: gti.Directives{}}},
	}),
	Methods:  ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
	Instance: &NodeField{},
})

// NewNodeField adds a new [NodeField] with
// the given name to the given parent.
func NewNodeField(par ki.Ki, name string) *NodeField {
	return par.NewChild(NodeFieldType, name).(*NodeField)
}

// KiType returns the [*gti.Type] of [NodeField]
func (t *NodeField) KiType() *gti.Type {
	return NodeFieldType
}

// New returns a new [*NodeField] value
func (t *NodeField) New() ki.Ki {
	return &NodeField{}
}

// NodeField2Type is the [gti.Type] for [NodeField2]
var NodeField2Type = gti.AddType(&gti.Type{
	Name:       "goki.dev/ki/v2/testdata.NodeField2",
	Doc:        "",
	Directives: gti.Directives{},
	Fields: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"Field2", &gti.Field{Name: "Field2", Type: "NodeEmbed", Doc: "", Directives: gti.Directives{}}},
	}),
	Embeds: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"NodeField", &gti.Field{Name: "NodeField", Type: "NodeField", Doc: "", Directives: gti.Directives{}}},
	}),
	Methods:  ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
	Instance: &NodeField2{},
})

// NewNodeField2 adds a new [NodeField2] with
// the given name to the given parent.
func NewNodeField2(par ki.Ki, name string) *NodeField2 {
	return par.NewChild(NodeField2Type, name).(*NodeField2)
}

// KiType returns the [*gti.Type] of [NodeField2]
func (t *NodeField2) KiType() *gti.Type {
	return NodeField2Type
}

// New returns a new [*NodeField2] value
func (t *NodeField2) New() ki.Ki {
	return &NodeField2{}
}
