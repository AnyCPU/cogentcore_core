// Code generated by "gtigen -type-var -type-method -new-method -instance"; DO NOT EDIT.

package testdata

import (
	"goki.dev/gti"
	"goki.dev/ordmap"
)

// TestNodeType is the [gti.Type] for [TestNode]
var TestNodeType = gti.AddType(&gti.Type{
	Name: "goki.dev/ki/v2/testdata.TestNode",
	Doc:  "",
	Directives: gti.Directives{
		&gti.Directive{Tool: "gti", Directive: "add", Args: []string{}},
	},
	Fields: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"&{ki Node}", &gti.Field{Name: "&{ki Node}", Doc: "", Directives: gti.Directives{}}},
		{"sig1", &gti.Field{Name: "sig1", Doc: "", Directives: gti.Directives{}}},
		{"sig2", &gti.Field{Name: "sig2", Doc: "", Directives: gti.Directives{}}},
	}),
	Methods:  ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
	Instance: &TestNode{},
})

// Type returns the [*gti.Type] of [TestNode]
func (t *TestNode) Type() *gti.Type {
	return TestNodeType
}

// New returns a new [*TestNode] value
func (t *TestNode) New() any {
	return &TestNode{}
}

// NodeEmbedType is the [gti.Type] for [NodeEmbed]
var NodeEmbedType = gti.AddType(&gti.Type{
	Name: "goki.dev/ki/v2/testdata.NodeEmbed",
	Doc:  "",
	Directives: gti.Directives{
		&gti.Directive{Tool: "gti", Directive: "add", Args: []string{}},
	},
	Fields: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"&{ki Node}", &gti.Field{Name: "&{ki Node}", Doc: "", Directives: gti.Directives{}}},
		{"Mbr1", &gti.Field{Name: "Mbr1", Doc: "", Directives: gti.Directives{}}},
		{"Mbr2", &gti.Field{Name: "Mbr2", Doc: "", Directives: gti.Directives{}}},
	}),
	Methods:  ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
	Instance: &NodeEmbed{},
})

// Type returns the [*gti.Type] of [NodeEmbed]
func (t *NodeEmbed) Type() *gti.Type {
	return NodeEmbedType
}

// New returns a new [*NodeEmbed] value
func (t *NodeEmbed) New() any {
	return &NodeEmbed{}
}

// NodeFieldType is the [gti.Type] for [NodeField]
var NodeFieldType = gti.AddType(&gti.Type{
	Name: "goki.dev/ki/v2/testdata.NodeField",
	Doc:  "",
	Directives: gti.Directives{
		&gti.Directive{Tool: "gti", Directive: "add", Args: []string{}},
	},
	Fields: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"NodeEmbed", &gti.Field{Name: "NodeEmbed", Doc: "", Directives: gti.Directives{}}},
		{"Field1", &gti.Field{Name: "Field1", Doc: "", Directives: gti.Directives{}}},
	}),
	Methods:  ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
	Instance: &NodeField{},
})

// Type returns the [*gti.Type] of [NodeField]
func (t *NodeField) Type() *gti.Type {
	return NodeFieldType
}

// New returns a new [*NodeField] value
func (t *NodeField) New() any {
	return &NodeField{}
}

// NodeField2Type is the [gti.Type] for [NodeField2]
var NodeField2Type = gti.AddType(&gti.Type{
	Name: "goki.dev/ki/v2/testdata.NodeField2",
	Doc:  "",
	Directives: gti.Directives{
		&gti.Directive{Tool: "gti", Directive: "add", Args: []string{}},
	},
	Fields: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"NodeField", &gti.Field{Name: "NodeField", Doc: "", Directives: gti.Directives{}}},
		{"Field2", &gti.Field{Name: "Field2", Doc: "", Directives: gti.Directives{}}},
	}),
	Methods:  ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
	Instance: &NodeField2{},
})

// Type returns the [*gti.Type] of [NodeField2]
func (t *NodeField2) Type() *gti.Type {
	return NodeField2Type
}

// New returns a new [*NodeField2] value
func (t *NodeField2) New() any {
	return &NodeField2{}
}
