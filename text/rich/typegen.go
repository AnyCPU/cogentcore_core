// Code generated by "core generate -add-types -setters"; DO NOT EDIT.

package rich

import (
	"cogentcore.org/core/types"
	"github.com/go-text/typesetting/language"
)

var _ = types.AddType(&types.Type{Name: "cogentcore.org/core/text/rich.Settings", IDName: "settings", Doc: "Settings holds the global settings for rich text styling,\nincluding language, script, and preferred font faces for\neach category of font.", Fields: []types.Field{{Name: "Language", Doc: "Language is the preferred language used for rendering text."}, {Name: "Script", Doc: "Script is the specific writing system used for rendering text."}, {Name: "SansSerif", Doc: "SansSerif is a font without serifs, where glyphs have plain stroke endings,\nwithout ornamentation. Example sans-serif fonts include Arial, Helvetica,\nOpen Sans, Fira Sans, Lucida Sans, Lucida Sans Unicode, Trebuchet MS,\nLiberation Sans, and Nimbus Sans L.\nThis can be a list of comma-separated names, tried in order.\n\"sans-serif\" will be added automatically as a final backup."}, {Name: "Serif", Doc: "Serif is a small line or stroke attached to the end of a larger stroke\nin a letter. In serif fonts, glyphs have finishing strokes, flared or\ntapering ends. Examples include Times New Roman, Lucida Bright,\nLucida Fax, Palatino, Palatino Linotype, Palladio, and URW Palladio.\nThis can be a list of comma-separated names, tried in order.\n\"serif\" will be added automatically as a final backup."}, {Name: "Monospace", Doc: "Monospace fonts have all glyphs with he same fixed width.\nExample monospace fonts include Fira Mono, DejaVu Sans Mono,\nMenlo, Consolas, Liberation Mono, Monaco, and Lucida Console.\nThis can be a list of comma-separated names. serif will be added\nautomatically as a final backup.\nThis can be a list of comma-separated names, tried in order.\n\"monospace\" will be added automatically as a final backup."}, {Name: "Cursive", Doc: "Cursive glyphs generally have either joining strokes or other cursive\ncharacteristics beyond those of italic typefaces. The glyphs are partially\nor completely connected, and the result looks more like handwritten pen or\nbrush writing than printed letter work. Example cursive fonts include\nBrush Script MT, Brush Script Std, Lucida Calligraphy, Lucida Handwriting,\nand Apple Chancery.\nThis can be a list of comma-separated names, tried in order.\n\"cursive\" will be added automatically as a final backup."}, {Name: "Fantasy", Doc: "Fantasy fonts are primarily decorative fonts that contain playful\nrepresentations of characters. Example fantasy fonts include Papyrus,\nHerculanum, Party LET, Curlz MT, and Harrington.\nThis can be a list of comma-separated names, tried in order.\n\"fantasy\" will be added automatically as a final backup."}, {Name: "Math", Doc: "\tMath fonts are for displaying mathematical expressions, for example\nsuperscript and subscript, brackets that cross several lines, nesting\nexpressions, and double-struck glyphs with distinct meanings.\nThis can be a list of comma-separated names, tried in order.\n\"math\" will be added automatically as a final backup."}, {Name: "Emoji", Doc: "Emoji fonts are specifically designed to render emoji.\nThis can be a list of comma-separated names, tried in order.\n\"emoji\" will be added automatically as a final backup."}, {Name: "Fangsong", Doc: "Fangsong are a particular style of Chinese characters that are between\nserif-style Song and cursive-style Kai forms. This style is often used\nfor government documents.\nThis can be a list of comma-separated names, tried in order.\n\"fangsong\" will be added automatically as a final backup."}, {Name: "Custom", Doc: "Custom is a custom font name."}}})

// SetLanguage sets the [Settings.Language]:
// Language is the preferred language used for rendering text.
func (t *Settings) SetLanguage(v language.Language) *Settings { t.Language = v; return t }

// SetScript sets the [Settings.Script]:
// Script is the specific writing system used for rendering text.
func (t *Settings) SetScript(v language.Script) *Settings { t.Script = v; return t }

// SetSansSerif sets the [Settings.SansSerif]:
// SansSerif is a font without serifs, where glyphs have plain stroke endings,
// without ornamentation. Example sans-serif fonts include Arial, Helvetica,
// Open Sans, Fira Sans, Lucida Sans, Lucida Sans Unicode, Trebuchet MS,
// Liberation Sans, and Nimbus Sans L.
// This can be a list of comma-separated names, tried in order.
// "sans-serif" will be added automatically as a final backup.
func (t *Settings) SetSansSerif(v string) *Settings { t.SansSerif = v; return t }

// SetSerif sets the [Settings.Serif]:
// Serif is a small line or stroke attached to the end of a larger stroke
// in a letter. In serif fonts, glyphs have finishing strokes, flared or
// tapering ends. Examples include Times New Roman, Lucida Bright,
// Lucida Fax, Palatino, Palatino Linotype, Palladio, and URW Palladio.
// This can be a list of comma-separated names, tried in order.
// "serif" will be added automatically as a final backup.
func (t *Settings) SetSerif(v string) *Settings { t.Serif = v; return t }

// SetMonospace sets the [Settings.Monospace]:
// Monospace fonts have all glyphs with he same fixed width.
// Example monospace fonts include Fira Mono, DejaVu Sans Mono,
// Menlo, Consolas, Liberation Mono, Monaco, and Lucida Console.
// This can be a list of comma-separated names. serif will be added
// automatically as a final backup.
// This can be a list of comma-separated names, tried in order.
// "monospace" will be added automatically as a final backup.
func (t *Settings) SetMonospace(v string) *Settings { t.Monospace = v; return t }

// SetCursive sets the [Settings.Cursive]:
// Cursive glyphs generally have either joining strokes or other cursive
// characteristics beyond those of italic typefaces. The glyphs are partially
// or completely connected, and the result looks more like handwritten pen or
// brush writing than printed letter work. Example cursive fonts include
// Brush Script MT, Brush Script Std, Lucida Calligraphy, Lucida Handwriting,
// and Apple Chancery.
// This can be a list of comma-separated names, tried in order.
// "cursive" will be added automatically as a final backup.
func (t *Settings) SetCursive(v string) *Settings { t.Cursive = v; return t }

// SetFantasy sets the [Settings.Fantasy]:
// Fantasy fonts are primarily decorative fonts that contain playful
// representations of characters. Example fantasy fonts include Papyrus,
// Herculanum, Party LET, Curlz MT, and Harrington.
// This can be a list of comma-separated names, tried in order.
// "fantasy" will be added automatically as a final backup.
func (t *Settings) SetFantasy(v string) *Settings { t.Fantasy = v; return t }

// SetMath sets the [Settings.Math]:
//
//	Math fonts are for displaying mathematical expressions, for example
//
// superscript and subscript, brackets that cross several lines, nesting
// expressions, and double-struck glyphs with distinct meanings.
// This can be a list of comma-separated names, tried in order.
// "math" will be added automatically as a final backup.
func (t *Settings) SetMath(v string) *Settings { t.Math = v; return t }

// SetEmoji sets the [Settings.Emoji]:
// Emoji fonts are specifically designed to render emoji.
// This can be a list of comma-separated names, tried in order.
// "emoji" will be added automatically as a final backup.
func (t *Settings) SetEmoji(v string) *Settings { t.Emoji = v; return t }

// SetFangsong sets the [Settings.Fangsong]:
// Fangsong are a particular style of Chinese characters that are between
// serif-style Song and cursive-style Kai forms. This style is often used
// for government documents.
// This can be a list of comma-separated names, tried in order.
// "fangsong" will be added automatically as a final backup.
func (t *Settings) SetFangsong(v string) *Settings { t.Fangsong = v; return t }

// SetCustom sets the [Settings.Custom]:
// Custom is a custom font name.
func (t *Settings) SetCustom(v string) *Settings { t.Custom = v; return t }

var _ = types.AddType(&types.Type{Name: "cogentcore.org/core/text/rich.Spans", IDName: "spans", Doc: "Spans is the basic rich text representation, with spans of []rune unicode characters\nthat share a common set of text styling properties, which are represented\nby the first rune(s) in each span. If custom colors are used, they are encoded\nafter the first style and size runes.\nThis compact and efficient representation can be Join'd back into the raw\nunicode source, and indexing by rune index in the original is fast.\nIt provides a GPU-compatible representation, and is the text equivalent of\nthe [ppath.Path] encoding."})

var _ = types.AddType(&types.Type{Name: "cogentcore.org/core/text/rich.Index", IDName: "index", Doc: "Index represents the [Span][Rune] index of a given rune.\nThe Rune index can be either the actual index for [Spans], taking\ninto account the leading style rune(s), or the logical index\ninto a [][]rune type with no style runes, depending on the context.", Directives: []types.Directive{{Tool: "types", Directive: "add"}}, Fields: []types.Field{{Name: "Span"}, {Name: "Rune"}}})

// SetSpan sets the [Index.Span]
func (t *Index) SetSpan(v int) *Index { t.Span = v; return t }

// SetRune sets the [Index.Rune]
func (t *Index) SetRune(v int) *Index { t.Rune = v; return t }

var _ = types.AddType(&types.Type{Name: "cogentcore.org/core/text/rich.Style", IDName: "style", Doc: "Style contains all of the rich text styling properties, that apply to one\nspan of text. These are encoded into a uint32 rune value in [rich.Text].\nSee [text.Style] and [Settings] for additional context needed for full specification.", Directives: []types.Directive{{Tool: "go", Directive: "generate", Args: []string{"core", "generate", "-add-types", "-setters"}}, {Tool: "types", Directive: "add"}}, Fields: []types.Field{{Name: "Size", Doc: "Size is the font size multiplier relative to the standard font size\nspecified in the [text.Style]."}, {Name: "Family", Doc: "Family indicates the generic family of typeface to use, where the\nspecific named values to use for each are provided in the Settings."}, {Name: "Slant", Doc: "Slant allows italic or oblique faces to be selected."}, {Name: "Weight", Doc: "Weights are the degree of blackness or stroke thickness of a font.\nThis value ranges from 100.0 to 900.0, with 400.0 as normal."}, {Name: "Stretch", Doc: "Stretch is the width of a font as an approximate fraction of the normal width.\nWidths range from 0.5 to 2.0 inclusive, with 1.0 as the normal width."}, {Name: "Special", Doc: "Special additional formatting factors that are not otherwise\ncaptured by changes in font rendering properties or decorations."}, {Name: "Decoration", Doc: "Decorations are underline, line-through, etc, as bit flags\nthat must be set using [Decorations.SetFlag]."}, {Name: "Direction", Doc: "Direction is the direction to render the text."}, {Name: "FillColor", Doc: "\tFillColor is the color to use for glyph fill (i.e., the standard \"ink\" color)\nif the Decoration FillColor flag is set. This will be encoded in a uint32 following\nthe style rune, in rich.Text spans."}, {Name: "StrokeColor", Doc: "\tStrokeColor is the color to use for glyph stroking if the Decoration StrokeColor\nflag is set. This will be encoded in a uint32 following the style rune,\nin rich.Text spans."}, {Name: "Background", Doc: "\tBackground is the color to use for the background region if the Decoration\nBackground flag is set. This will be encoded in a uint32 following the style rune,\nin rich.Text spans."}, {Name: "URL", Doc: "URL is the URL for a link element. It is encoded in runes after the style runes."}}})

// SetSize sets the [Style.Size]:
// Size is the font size multiplier relative to the standard font size
// specified in the [text.Style].
func (t *Style) SetSize(v float32) *Style { t.Size = v; return t }

// SetFamily sets the [Style.Family]:
// Family indicates the generic family of typeface to use, where the
// specific named values to use for each are provided in the Settings.
func (t *Style) SetFamily(v Family) *Style { t.Family = v; return t }

// SetSlant sets the [Style.Slant]:
// Slant allows italic or oblique faces to be selected.
func (t *Style) SetSlant(v Slants) *Style { t.Slant = v; return t }

// SetWeight sets the [Style.Weight]:
// Weights are the degree of blackness or stroke thickness of a font.
// This value ranges from 100.0 to 900.0, with 400.0 as normal.
func (t *Style) SetWeight(v Weights) *Style { t.Weight = v; return t }

// SetStretch sets the [Style.Stretch]:
// Stretch is the width of a font as an approximate fraction of the normal width.
// Widths range from 0.5 to 2.0 inclusive, with 1.0 as the normal width.
func (t *Style) SetStretch(v Stretch) *Style { t.Stretch = v; return t }

// SetSpecial sets the [Style.Special]:
// Special additional formatting factors that are not otherwise
// captured by changes in font rendering properties or decorations.
func (t *Style) SetSpecial(v Specials) *Style { t.Special = v; return t }

// SetDecoration sets the [Style.Decoration]:
// Decorations are underline, line-through, etc, as bit flags
// that must be set using [Decorations.SetFlag].
func (t *Style) SetDecoration(v Decorations) *Style { t.Decoration = v; return t }

// SetDirection sets the [Style.Direction]:
// Direction is the direction to render the text.
func (t *Style) SetDirection(v Directions) *Style { t.Direction = v; return t }

// SetURL sets the [Style.URL]:
// URL is the URL for a link element. It is encoded in runes after the style runes.
func (t *Style) SetURL(v string) *Style { t.URL = v; return t }

var _ = types.AddType(&types.Type{Name: "cogentcore.org/core/text/rich.Family", IDName: "family", Doc: "Family specifies the generic family of typeface to use, where the\nspecific named values to use for each are provided in the Settings."})

var _ = types.AddType(&types.Type{Name: "cogentcore.org/core/text/rich.Slants", IDName: "slants", Doc: "Slants (also called style) allows italic or oblique faces to be selected."})

var _ = types.AddType(&types.Type{Name: "cogentcore.org/core/text/rich.Weights", IDName: "weights", Doc: "Weights are the degree of blackness or stroke thickness of a font.\nThis value ranges from 100.0 to 900.0, with 400.0 as normal."})

var _ = types.AddType(&types.Type{Name: "cogentcore.org/core/text/rich.Stretch", IDName: "stretch", Doc: "Stretch is the width of a font as an approximate fraction of the normal width.\nWidths range from 0.5 to 2.0 inclusive, with 1.0 as the normal width."})

var _ = types.AddType(&types.Type{Name: "cogentcore.org/core/text/rich.Decorations", IDName: "decorations", Doc: "Decorations are underline, line-through, etc, as bit flags\nthat must be set using [Font.SetDecoration]."})

var _ = types.AddType(&types.Type{Name: "cogentcore.org/core/text/rich.Specials", IDName: "specials", Doc: "Specials are special additional formatting factors that are not\notherwise captured by changes in font rendering properties or decorations."})

var _ = types.AddType(&types.Type{Name: "cogentcore.org/core/text/rich.Directions", IDName: "directions", Doc: "Directions specifies the text layout direction."})
