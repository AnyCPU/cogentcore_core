// Code generated by "core generate"; DO NOT EDIT.

package diffbrowser

import (
	"cogentcore.org/core/tree"
	"cogentcore.org/core/types"
)

// BrowserType is the [types.Type] for [Browser]
var BrowserType = types.AddType(&types.Type{Name: "cogentcore.org/core/texteditor/diffbrowser.Browser", IDName: "browser", Doc: "Browser is a diff browser, for browsing a set of paired files\nfor viewing differences between them, organized into a tree\nstructure, e.g., reflecting their source in a filesystem.", Methods: []types.Method{{Name: "UpdateFiles", Doc: "UpdateFiles Updates the tree based on files", Directives: []types.Directive{{Tool: "types", Directive: "add"}}}}, Embeds: []types.Field{{Name: "Frame"}}, Fields: []types.Field{{Name: "PathA", Doc: "starting paths for the files being compared"}, {Name: "PathB", Doc: "starting paths for the files being compared"}, {Name: "Files", Doc: "Files is the source tree of files"}}, Instance: &Browser{}})

// NewBrowser returns a new [Browser] with the given optional parent:
// Browser is a diff browser, for browsing a set of paired files
// for viewing differences between them, organized into a tree
// structure, e.g., reflecting their source in a filesystem.
func NewBrowser(parent ...tree.Node) *Browser { return tree.New[*Browser](parent...) }

// NodeType returns the [*types.Type] of [Browser]
func (t *Browser) NodeType() *types.Type { return BrowserType }

// New returns a new [*Browser] value
func (t *Browser) New() tree.Node { return &Browser{} }

// SetPathA sets the [Browser.PathA]:
// starting paths for the files being compared
func (t *Browser) SetPathA(v string) *Browser { t.PathA = v; return t }

// SetPathB sets the [Browser.PathB]:
// starting paths for the files being compared
func (t *Browser) SetPathB(v string) *Browser { t.PathB = v; return t }

// SetFiles sets the [Browser.Files]:
// Files is the source tree of files
func (t *Browser) SetFiles(v *Node) *Browser { t.Files = v; return t }

// SetTooltip sets the [Browser.Tooltip]
func (t *Browser) SetTooltip(v string) *Browser { t.Tooltip = v; return t }

// NodeType is the [types.Type] for [Node]
var NodeType = types.AddType(&types.Type{Name: "cogentcore.org/core/texteditor/diffbrowser.Node", IDName: "node", Doc: "Node an element in the diff tree", Embeds: []types.Field{{Name: "NodeBase"}}, Fields: []types.Field{{Name: "FileA", Doc: "file names being compared"}, {Name: "FileB", Doc: "file names being compared"}, {Name: "RevA", Doc: "revisions for files, if applicable"}, {Name: "RevB", Doc: "revisions for files, if applicable"}, {Name: "ContentsA", Doc: "Contents of the files"}, {Name: "ContentsB", Doc: "Contents of the files"}}, Instance: &Node{}})

// NewNode returns a new [Node] with the given optional parent:
// Node an element in the diff tree
func NewNode(parent ...tree.Node) *Node { return tree.New[*Node](parent...) }

// NodeType returns the [*types.Type] of [Node]
func (t *Node) NodeType() *types.Type { return NodeType }

// New returns a new [*Node] value
func (t *Node) New() tree.Node { return &Node{} }

// SetFileA sets the [Node.FileA]:
// file names being compared
func (t *Node) SetFileA(v string) *Node { t.FileA = v; return t }

// SetFileB sets the [Node.FileB]:
// file names being compared
func (t *Node) SetFileB(v string) *Node { t.FileB = v; return t }

// SetRevA sets the [Node.RevA]:
// revisions for files, if applicable
func (t *Node) SetRevA(v string) *Node { t.RevA = v; return t }

// SetRevB sets the [Node.RevB]:
// revisions for files, if applicable
func (t *Node) SetRevB(v string) *Node { t.RevB = v; return t }

// SetContentsA sets the [Node.ContentsA]:
// Contents of the files
func (t *Node) SetContentsA(v string) *Node { t.ContentsA = v; return t }

// SetContentsB sets the [Node.ContentsB]:
// Contents of the files
func (t *Node) SetContentsB(v string) *Node { t.ContentsB = v; return t }
