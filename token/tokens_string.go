// Code generated by "stringer -type=Tokens"; DO NOT EDIT.

package token

import (
	"errors"
	"strconv"
)

var _ = errors.New("dummy error")

const _Tokens_name = "NoneErrorEOFEOLEOSKeywordKeywordConstantKeywordDeclarationKeywordNamespaceKeywordPseudoKeywordReservedKeywordTypeNameNameAttributeNameBuiltinNameBuiltinPseudoNameClassNameConstantNameDecoratorNameEntityNameExceptionNameFunctionNameFunctionMagicNameKeywordNameLabelNameNamespaceNameOperatorNameOtherNamePseudoNamePropertyNameTagNameVarNameVarAnonymousNameVarClassNameVarGlobalNameVarInstanceNameVarMagicLiteralLiteralDateLiteralOtherLitStrLitStrAffixLitStrAtomLitStrBacktickLitStrBooleanLitStrCharLitStrDelimiterLitStrDocLitStrDoubleLitStrEscapeLitStrHeredocLitStrInterpolLitStrNameLitStrOtherLitStrRegexLitStrSingleLitStrSymbolLitNumLitNumBinLitNumFloatLitNumHexLitNumIntegerLitNumIntegerLongLitNumOctLitNumImagLitNumComplexOperatorOperatorWordOpMathOpMathAddOpMathSubOpMathMulOpMathDivOpMathRemOpBitOpBitAndOpBitOrOpBitNotOpBitXorOpBitShiftLeftOpBitShiftRightOpBitAndNotOpAsgnOpAsgnAssignOpAsgnIncOpAsgnDecOpAsgnArrowOpAsgnDefineOpMathAsgnOpMathAsgnAddOpMathAsgnSubOpMathAsgnMulOpMathAsgnDivOpMathAsgnRemOpBitAsgnOpBitAsgnAndOpBitAsgnOrOpBitAsgnXorOpBitAsgnShiftLeftOpBitAsgnShiftRightOpBitAsgnAndNotOpLogOpLogAndOpLogOrOpLogNotOpRelOpRelEqualOpRelNotEqualOpRelLessOpRelGreaterOpRelLtEqOpRelGtEqOpListOpListEllipsisPunctuationPunctGpPunctGpLParenPunctGpRParenPunctGpLBrackPunctGpRBrackPunctGpLBracePunctGpRBracePunctSepPunctSepCommaPunctSepPeriodPunctSepSemicolonPunctSepColonPunctStrPunctStrDblQuotePunctStrQuotePunctStrBacktickPunctStrEscCommentCommentHashbangCommentMultilineCommentSingleCommentSpecialCommentPreprocCommentPreprocFileTextTextWhitespaceTextSymbolTextPunctuationTextSpellErrTextStyleTextStyleDeletedTextStyleEmphTextStyleErrorTextStyleHeadingTextStyleInsertedTextStyleOutputTextStylePromptTextStyleStrongTextStyleSubheadingTextStyleTracebackTextStyleUnderlineTextStyleLinkTokensN"

var _Tokens_index = [...]uint16{0, 4, 9, 12, 15, 18, 25, 40, 58, 74, 87, 102, 113, 117, 130, 141, 158, 167, 179, 192, 202, 215, 227, 244, 255, 264, 277, 289, 298, 308, 320, 327, 334, 350, 362, 375, 390, 402, 409, 420, 432, 438, 449, 459, 473, 486, 496, 511, 520, 532, 544, 557, 571, 581, 592, 603, 615, 627, 633, 642, 653, 662, 675, 692, 701, 711, 724, 732, 744, 750, 759, 768, 777, 786, 795, 800, 808, 815, 823, 831, 845, 860, 871, 877, 889, 898, 907, 918, 930, 940, 953, 966, 979, 992, 1005, 1014, 1026, 1037, 1049, 1067, 1086, 1101, 1106, 1114, 1121, 1129, 1134, 1144, 1157, 1166, 1178, 1187, 1196, 1202, 1216, 1227, 1234, 1247, 1260, 1273, 1286, 1299, 1312, 1320, 1333, 1347, 1364, 1377, 1385, 1401, 1414, 1430, 1441, 1448, 1463, 1479, 1492, 1506, 1520, 1538, 1542, 1556, 1566, 1581, 1593, 1602, 1618, 1631, 1645, 1661, 1678, 1693, 1708, 1723, 1742, 1760, 1778, 1791, 1798}

func (i Tokens) String() string {
	if i < 0 || i >= Tokens(len(_Tokens_index)-1) {
		return "Tokens(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _Tokens_name[_Tokens_index[i]:_Tokens_index[i+1]]
}

func (i *Tokens) FromString(s string) error {
	for j := 0; j < len(_Tokens_index)-1; j++ {
		if s == _Tokens_name[_Tokens_index[j]:_Tokens_index[j+1]] {
			*i = Tokens(j)
			return nil
		}
	}
	return errors.New("String: " + s + " is not a valid option for type: Tokens")
}
