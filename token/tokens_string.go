// Code generated by "stringer -type=Tokens"; DO NOT EDIT.

package token

import (
	"errors"
	"strconv"
)

var _ = errors.New("dummy error")

const _Tokens_name = "NoneErrorEOFEOLEOSKeywordKeywordConstantKeywordDeclarationKeywordNamespaceKeywordPseudoKeywordReservedKeywordTypeNameNameAttributeNameBuiltinNameBuiltinPseudoNameClassNameConstantNameDecoratorNameEntityNameExceptionNameFunctionNameFunctionMagicNameKeywordNameLabelNameNamespaceNameOperatorNameOtherNamePseudoNamePropertyNameTagNameVarNameVarAnonymousNameVarClassNameVarGlobalNameVarInstanceNameVarMagicLiteralLiteralDateLiteralOtherLitStrLitStrAffixLitStrAtomLitStrBacktickLitStrBooleanLitStrCharLitStrDelimiterLitStrDocLitStrDoubleLitStrEscapeLitStrHeredocLitStrInterpolLitStrNameLitStrOtherLitStrRegexLitStrSingleLitStrSymbolLitNumLitNumBinLitNumFloatLitNumHexLitNumIntegerLitNumIntegerLongLitNumOctLitNumImagLitNumComplexOperatorOperatorWordOpMathOpMathAddOpMathSubOpMathMulOpMathDivOpMathRemOpBitOpBitAndOpBitOrOpBitXorOpBitShiftLeftOpBitShiftRightOpBitAndNotOpAsgnOpAsgnAssignOpAsgnIncOpAsgnDecOpAsgnArrowOpAsgnDefineOpMathAsgnOpMathAsgnAddOpMathAsgnSubOpMathAsgnMulOpMathAsgnDivOpMathAsgnRemOpBitAsgnOpBitAsgnAndOpBitAsgnOrOpBitAsgnXorOpBitAsgnShiftLeftOpBitAsgnShiftRightOpBitAsgnAndNotOpLogOpLogAndOpLogOrOpLogNotOpRelOpRelEqualOpRelNotEqualOpRelLessOpRelGreaterOpRelLtEqOpRelGtEqOpListOpListEllipsisPunctuationPunctGpPunctGpLParenPunctGpRParenPunctGpLBrackPunctGpRBrackPunctGpLBracePunctGpRBracePunctSepPunctSepCommaPunctSepPeriodPunctSepSemicolonPunctSepColonPunctStrPunctStrDblQuotePunctStrQuotePunctStrBacktickPunctStrEscCommentCommentHashbangCommentMultilineCommentSingleCommentSpecialCommentPreprocCommentPreprocFileTextTextWhitespaceTextSymbolTextPunctuationTextSpellErrTextStyleTextStyleDeletedTextStyleEmphTextStyleErrorTextStyleHeadingTextStyleInsertedTextStyleOutputTextStylePromptTextStyleStrongTextStyleSubheadingTextStyleTracebackTextStyleUnderlineTextStyleLinkTokensN"

var _Tokens_index = [...]uint16{0, 4, 9, 12, 15, 18, 25, 40, 58, 74, 87, 102, 113, 117, 130, 141, 158, 167, 179, 192, 202, 215, 227, 244, 255, 264, 277, 289, 298, 308, 320, 327, 334, 350, 362, 375, 390, 402, 409, 420, 432, 438, 449, 459, 473, 486, 496, 511, 520, 532, 544, 557, 571, 581, 592, 603, 615, 627, 633, 642, 653, 662, 675, 692, 701, 711, 724, 732, 744, 750, 759, 768, 777, 786, 795, 800, 808, 815, 823, 837, 852, 863, 869, 881, 890, 899, 910, 922, 932, 945, 958, 971, 984, 997, 1006, 1018, 1029, 1041, 1059, 1078, 1093, 1098, 1106, 1113, 1121, 1126, 1136, 1149, 1158, 1170, 1179, 1188, 1194, 1208, 1219, 1226, 1239, 1252, 1265, 1278, 1291, 1304, 1312, 1325, 1339, 1356, 1369, 1377, 1393, 1406, 1422, 1433, 1440, 1455, 1471, 1484, 1498, 1512, 1530, 1534, 1548, 1558, 1573, 1585, 1594, 1610, 1623, 1637, 1653, 1670, 1685, 1700, 1715, 1734, 1752, 1770, 1783, 1790}

func (i Tokens) String() string {
	if i < 0 || i >= Tokens(len(_Tokens_index)-1) {
		return "Tokens(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _Tokens_name[_Tokens_index[i]:_Tokens_index[i+1]]
}

func (i *Tokens) FromString(s string) error {
	for j := 0; j < len(_Tokens_index)-1; j++ {
		if s == _Tokens_name[_Tokens_index[j]:_Tokens_index[j+1]] {
			*i = Tokens(j)
			return nil
		}
	}
	return errors.New("String: " + s + " is not a valid option for type: Tokens")
}
