// Code generated by "stringer -type=Tokens"; DO NOT EDIT.

package token

import (
	"errors"
	"strconv"
)

var _ = errors.New("dummy error")

const _Tokens_name = "NoneErrorEOFKeywordKeywordConstantKeywordDeclarationKeywordNamespaceKeywordPseudoKeywordReservedKeywordTypeNameNameAttributeNameBuiltinNameBuiltinPseudoNameClassNameConstantNameDecoratorNameEntityNameExceptionNameFunctionNameFunctionMagicNameKeywordNameLabelNameNamespaceNameOperatorNameOtherNamePseudoNamePropertyNameTagNameVarNameVarAnonymousNameVarClassNameVarGlobalNameVarInstanceNameVarMagicLiteralLiteralDateLiteralOtherLitStrLitStrAffixLitStrAtomLitStrBacktickLitStrBooleanLitStrCharLitStrDelimiterLitStrDocLitStrDoubleLitStrEscapeLitStrHeredocLitStrInterpolLitStrNameLitStrOtherLitStrRegexLitStrSingleLitStrSymbolLitNumLitNumBinLitNumFloatLitNumHexLitNumIntegerLitNumIntegerLongLitNumOctLitNumImagLitNumComplexOperatorOperatorWordOpMathOpMathAddOpMathSubOpMathMulOpMathDivOpMathRemOpBitOpBitAndOpBitOrOpBitXorOpBitShiftLeftOpBitShiftRightOpBitAndNotOpAsgnOpAsgnAssignOpAsgnIncOpAsgnDecOpAsgnArrowOpAsgnDefineOpMathAsgnOpMathAsgnAddOpMathAsgnSubOpMathAsgnMulOpMathAsgnDivOpMathAsgnRemOpBitAsgnOpBitAsgnAndOpBitAsgnOrOpBitAsgnXorOpBitAsgnShiftLeftOpBitAsgnShiftRightOpBitAsgnAndNotOpLogOpLogAndOpLogOrOpLogNotOpRelOpRelEqualOpRelNotEqualOpRelLessOpRelGreaterOpRelLtEqOpRelGtEqOpListOpListEllipsisPunctuationPunctGpPunctGpLParenPunctGpRparenPunctGpLBrackPunctGpRBrackPunctGpLBracePunctGpRRracePunctSepPunctSepCommaPunctSepPeriodPunctSepSemicolonPunctSepColonPunctStrPunctStrDblQuotePunctStrQuotePunctStrBacktickPunctStrEscCommentCommentHashbangCommentMultilineCommentSingleCommentSpecialCommentPreprocCommentPreprocFileTextTextWhitespaceTextSymbolTextPunctuationTextSpellErrTextStyleTextStyleDeletedTextStyleEmphTextStyleErrorTextStyleHeadingTextStyleInsertedTextStyleOutputTextStylePromptTextStyleStrongTextStyleSubheadingTextStyleTracebackTextStyleUnderlineTextStyleLinkTokensN"

var _Tokens_index = [...]uint16{0, 4, 9, 12, 19, 34, 52, 68, 81, 96, 107, 111, 124, 135, 152, 161, 173, 186, 196, 209, 221, 238, 249, 258, 271, 283, 292, 302, 314, 321, 328, 344, 356, 369, 384, 396, 403, 414, 426, 432, 443, 453, 467, 480, 490, 505, 514, 526, 538, 551, 565, 575, 586, 597, 609, 621, 627, 636, 647, 656, 669, 686, 695, 705, 718, 726, 738, 744, 753, 762, 771, 780, 789, 794, 802, 809, 817, 831, 846, 857, 863, 875, 884, 893, 904, 916, 926, 939, 952, 965, 978, 991, 1000, 1012, 1023, 1035, 1053, 1072, 1087, 1092, 1100, 1107, 1115, 1120, 1130, 1143, 1152, 1164, 1173, 1182, 1188, 1202, 1213, 1220, 1233, 1246, 1259, 1272, 1285, 1298, 1306, 1319, 1333, 1350, 1363, 1371, 1387, 1400, 1416, 1427, 1434, 1449, 1465, 1478, 1492, 1506, 1524, 1528, 1542, 1552, 1567, 1579, 1588, 1604, 1617, 1631, 1647, 1664, 1679, 1694, 1709, 1728, 1746, 1764, 1777, 1784}

func (i Tokens) String() string {
	if i < 0 || i >= Tokens(len(_Tokens_index)-1) {
		return "Tokens(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _Tokens_name[_Tokens_index[i]:_Tokens_index[i+1]]
}

func (i *Tokens) FromString(s string) error {
	for j := 0; j < len(_Tokens_index)-1; j++ {
		if s == _Tokens_name[_Tokens_index[j]:_Tokens_index[j+1]] {
			*i = Tokens(j)
			return nil
		}
	}
	return errors.New("String: " + s + " is not a valid option for type: Tokens")
}
