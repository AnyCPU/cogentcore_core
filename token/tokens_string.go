// Code generated by "stringer -type=Tokens"; DO NOT EDIT.

package token

import (
	"errors"
	"strconv"
)

var _ = errors.New("dummy error")

const _Tokens_name = "NoneErrorEOFEOLEOSBackgroundKeywordKeywordConstantKeywordDeclarationKeywordNamespaceKeywordPseudoKeywordReservedKeywordTypeNameNameAttributeNameBuiltinNameBuiltinPseudoNameClassNameTypeNameConstantNameDecoratorNameEntityNameExceptionNameFunctionNameFunctionMagicNameLabelNameNamespaceNameOperatorNameOtherNamePseudoNamePropertyNameTagNameVarNameVarAnonymousNameVarClassNameVarGlobalNameVarInstanceNameVarMagicLiteralLiteralDateLiteralOtherLitStrLitStrAffixLitStrAtomLitStrBacktickLitStrBooleanLitStrCharLitStrDelimiterLitStrDocLitStrDoubleLitStrEscapeLitStrHeredocLitStrInterpolLitStrNameLitStrOtherLitStrRegexLitStrSingleLitStrSymbolLitNumLitNumBinLitNumFloatLitNumHexLitNumIntegerLitNumIntegerLongLitNumOctLitNumImagOperatorOperatorWordOpMathOpMathAddOpMathSubOpMathMulOpMathDivOpMathRemOpBitOpBitAndOpBitOrOpBitNotOpBitXorOpBitShiftLeftOpBitShiftRightOpBitAndNotOpAsgnOpAsgnAssignOpAsgnIncOpAsgnDecOpAsgnArrowOpAsgnDefineOpMathAsgnOpMathAsgnAddOpMathAsgnSubOpMathAsgnMulOpMathAsgnDivOpMathAsgnRemOpBitAsgnOpBitAsgnAndOpBitAsgnOrOpBitAsgnXorOpBitAsgnShiftLeftOpBitAsgnShiftRightOpBitAsgnAndNotOpLogOpLogAndOpLogOrOpLogNotOpRelOpRelEqualOpRelNotEqualOpRelLessOpRelGreaterOpRelLtEqOpRelGtEqOpListOpListEllipsisPunctuationPunctGpPunctGpLParenPunctGpRParenPunctGpLBrackPunctGpRBrackPunctGpLBracePunctGpRBracePunctSepPunctSepCommaPunctSepPeriodPunctSepSemicolonPunctSepColonPunctStrPunctStrDblQuotePunctStrQuotePunctStrBacktickPunctStrEscCommentCommentHashbangCommentMultilineCommentSingleCommentSpecialCommentPreprocCommentPreprocFileTextTextWhitespaceTextSymbolTextPunctuationTextSpellErrTextStyleTextStyleDeletedTextStyleEmphTextStyleErrorTextStyleHeadingTextStyleInsertedTextStyleOutputTextStylePromptTextStyleStrongTextStyleSubheadingTextStyleTracebackTextStyleUnderlineTextStyleLinkTokensN"

var _Tokens_index = [...]uint16{0, 4, 9, 12, 15, 18, 28, 35, 50, 68, 84, 97, 112, 123, 127, 140, 151, 168, 177, 185, 197, 210, 220, 233, 245, 262, 271, 284, 296, 305, 315, 327, 334, 341, 357, 369, 382, 397, 409, 416, 427, 439, 445, 456, 466, 480, 493, 503, 518, 527, 539, 551, 564, 578, 588, 599, 610, 622, 634, 640, 649, 660, 669, 682, 699, 708, 718, 726, 738, 744, 753, 762, 771, 780, 789, 794, 802, 809, 817, 825, 839, 854, 865, 871, 883, 892, 901, 912, 924, 934, 947, 960, 973, 986, 999, 1008, 1020, 1031, 1043, 1061, 1080, 1095, 1100, 1108, 1115, 1123, 1128, 1138, 1151, 1160, 1172, 1181, 1190, 1196, 1210, 1221, 1228, 1241, 1254, 1267, 1280, 1293, 1306, 1314, 1327, 1341, 1358, 1371, 1379, 1395, 1408, 1424, 1435, 1442, 1457, 1473, 1486, 1500, 1514, 1532, 1536, 1550, 1560, 1575, 1587, 1596, 1612, 1625, 1639, 1655, 1672, 1687, 1702, 1717, 1736, 1754, 1772, 1785, 1792}

func (i Tokens) String() string {
	if i < 0 || i >= Tokens(len(_Tokens_index)-1) {
		return "Tokens(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _Tokens_name[_Tokens_index[i]:_Tokens_index[i+1]]
}

func (i *Tokens) FromString(s string) error {
	for j := 0; j < len(_Tokens_index)-1; j++ {
		if s == _Tokens_name[_Tokens_index[j]:_Tokens_index[j+1]] {
			*i = Tokens(j)
			return nil
		}
	}
	return errors.New("String: " + s + " is not a valid option for type: Tokens")
}
