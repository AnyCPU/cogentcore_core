// Code generated by "core generate"; DO NOT EDIT.

package tree

import (
	"cogentcore.org/core/enums"
)

var _FlagsValues = []Flags{0}

// FlagsN is the highest valid value for type Flags, plus one.
const FlagsN Flags = 1

var _FlagsValueMap = map[string]Flags{`Field`: 0}

var _FlagsDescMap = map[Flags]string{0: `Field indicates that a node is a field in its parent node, not a child in children.`}

var _FlagsMap = map[Flags]string{0: `Field`}

// String returns the string representation of this Flags value.
func (i Flags) String() string { return enums.BitFlagString(i, _FlagsValues) }

// BitIndexString returns the string representation of this Flags value
// if it is a bit index value (typically an enum constant), and
// not an actual bit flag value.
func (i Flags) BitIndexString() string { return enums.String(i, _FlagsMap) }

// SetString sets the Flags value from its string representation,
// and returns an error if the string is invalid.
func (i *Flags) SetString(s string) error { *i = 0; return i.SetStringOr(s) }

// SetStringOr sets the Flags value from its string representation
// while preserving any bit flags already set, and returns an
// error if the string is invalid.
func (i *Flags) SetStringOr(s string) error { return enums.SetStringOr(i, s, _FlagsValueMap, "Flags") }

// Int64 returns the Flags value as an int64.
func (i Flags) Int64() int64 { return int64(i) }

// SetInt64 sets the Flags value from an int64.
func (i *Flags) SetInt64(in int64) { *i = Flags(in) }

// Desc returns the description of the Flags value.
func (i Flags) Desc() string { return enums.Desc(i, _FlagsDescMap) }

// FlagsValues returns all possible values for the type Flags.
func FlagsValues() []Flags { return _FlagsValues }

// Values returns all possible values for the type Flags.
func (i Flags) Values() []enums.Enum { return enums.Values(_FlagsValues) }

// HasFlag returns whether these bit flags have the given bit flag set.
func (i Flags) HasFlag(f enums.BitFlag) bool { return enums.HasFlag((*int64)(&i), f) }

// SetFlag sets the value of the given flags in these flags to the given value.
func (i *Flags) SetFlag(on bool, f ...enums.BitFlag) { enums.SetFlag((*int64)(i), on, f...) }

// MarshalText implements the [encoding.TextMarshaler] interface.
func (i Flags) MarshalText() ([]byte, error) { return []byte(i.String()), nil }

// UnmarshalText implements the [encoding.TextUnmarshaler] interface.
func (i *Flags) UnmarshalText(text []byte) error { return enums.UnmarshalText(i, text, "Flags") }
