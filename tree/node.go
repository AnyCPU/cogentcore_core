// Copyright (c) 2018, Cogent Core. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Package tree provides a powerful and extensible tree system,
// centered on the core Node interface.
package tree

//go:generate core generate
//go:generate core generate ./testdata

import (
	"cogentcore.org/core/enums"
	"cogentcore.org/core/types"
)

// Node is an interface that describes the core functionality of a tree node.
// Each Node is a node in a tree and can have child nodes, and no cycles
// are allowed (i.e., each node can only appear once in the tree).
// All the usual methods are included for accessing and managing Children,
// and efficiently traversing the tree and calling functions on the nodes.
//
// When adding a new node, if you do not specify its name, it will automatically
// be assigned a unique name of the ID (kebab-case) name of the type, plus the
// [Node.NumLifetimeChildren] of the parent. In general, the names of the children
// of a given node should all be unique.
//
// Use the [MoveToParent] function to move a node between trees or within a tree;
// otherwise, nodes are typically created and deleted but not moved.
//
// Most Node functions are only implemented once, by the [tree.NodeBase] type.
// Other Node types extend [tree.NodeBase] and provide their own functionality,
// which can override methods defined by embedded types through a system of virtual
// method calling, as described below.
//
// Each Node stores the Node interface version of itself, as [Node.This],
// which enables full virtual function calling by calling the method
// on that interface instead of directly on the receiver Node itself.
// This allows, for example, a WidgetBase type to call methods defined
// by higher-level Widgets. This requires proper initialization of nodes
// via [Node.InitName], which is called automatically when adding children
// and using [NewRoot].
//
// Nodes support full JSON I/O.
//
// All types that implement the Node interface will automatically
// be added to the Cogent Core type registry (types)
// in `core generate`, which is required for various
// pieces of core functionality.
type Node interface {

	// AsTree returns the [NodeBase] of this Node.
	AsTree() *NodeBase

	// NodeType returns the [types.Type] record for this Node.
	// This is auto-generated by the typegen generator Node types.
	NodeType() *types.Type

	// New returns a new token of the type of this Node.
	// This new Node must still be initialized separately.
	// This is auto-generated by the typegen generator for Node types.
	New() Node

	// BaseType returns the base node type for all elements within this tree.
	// This is used in the GUI for determining what types of children can be created.
	BaseType() *types.Type

	// FieldByName returns the node that is a direct field with the given name.
	// This must be implemented for any types that have Node fields that
	// are processed as part of the overall Node tree. This is only used
	// by [Node.FindPath]. Returns error if not found.
	FieldByName(field string) (Node, error)

	// Destroy recursively deletes and destroys the node, all of its children,
	// and all of its children's children, etc. Node types can implement this
	// to do additional necessary destruction; if they do, they should call
	// [NodeBase.Destroy] at the end of their implementation.
	Destroy()

	// FlagType returns the flags of the node as the true flag type of the node,
	// which may be a type that extends the standard [Flags]. Each node type
	// that extends the flag type should define this method; for example:
	//	func (wb *WidgetBase) FlagType() enums.BitFlagSetter {
	//		return (*WidgetFlags)(&wb.Flags)
	//	}
	FlagType() enums.BitFlagSetter

	// NodeWalkDown is a method that nodes can implement to traverse additional nodes
	// like widget parts during [Node.WalkDown]. It is called with the function passed
	// to [Node.WalkDown] after the function is called with the node itself.
	NodeWalkDown(fun func(n Node) bool)

	// CopyFieldsFrom copies the fields of the node from the given node.
	// By default, it is [NodeBase.CopyFieldsFrom], which automatically does
	// a deep copy of all of the fields of the node that do not a have a
	// `copier:"-"` struct tag. Node types should only implement a custom
	// CopyFieldsFrom method when they have fields that need special copying
	// logic that can not be automatically handled. All custom CopyFieldsFrom
	// methods should call [NodeBase.CopyFieldsFrom] first and then only do manual
	// handling of specific fields that can not be automatically copied. See
	// [cogentcore.org/core/core.WidgetBase.CopyFieldsFrom] for an example of a
	// custom CopyFieldsFrom method.
	CopyFieldsFrom(from Node)

	// Init is called when the node is
	// initialized (ie: through [Node.InitName]).
	// It is called before the node is added to the tree,
	// so it will not have any parents or siblings.
	// It will be called only once in the lifetime of the node.
	// It does nothing by default, but it can be implemented
	// by higher-level types that want to do something.
	Init()

	// OnAdd is called when the node is added to a parent.
	// It will be called only once in the lifetime of the node,
	// unless the node is moved. It will not be called on root
	// nodes, as they are never added to a parent.
	// It does nothing by default, but it can be implemented
	// by higher-level types that want to do something.
	OnAdd()

	// OnChildAdded is called when a node is added to
	// this node or any of its children. When a node is added to
	// a tree, it calls [OnAdd] and then this function on each of its parents,
	// going in order from the closest parent to the furthest parent.
	// This function does nothing by default, but it can be
	// implemented by higher-level types that want to do something.
	OnChildAdded(child Node)
}
