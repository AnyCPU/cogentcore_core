// Code generated by "stringer -output stringer.go -type=Units"; DO NOT EDIT.

package units

import (
	"errors"
	"strconv"
)

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[UnitPx-0]
	_ = x[UnitDp-1]
	_ = x[UnitEw-2]
	_ = x[UnitEh-3]
	_ = x[UnitPw-4]
	_ = x[UnitPh-5]
	_ = x[UnitRem-6]
	_ = x[UnitEm-7]
	_ = x[UnitEx-8]
	_ = x[UnitCh-9]
	_ = x[UnitVw-10]
	_ = x[UnitVh-11]
	_ = x[UnitVmin-12]
	_ = x[UnitVmax-13]
	_ = x[UnitCm-14]
	_ = x[UnitMm-15]
	_ = x[UnitQ-16]
	_ = x[UnitIn-17]
	_ = x[UnitPc-18]
	_ = x[UnitPt-19]
	_ = x[UnitDot-20]
	_ = x[UnitsN-21]
}

const _Units_name = "UnitPxUnitDpUnitEwUnitEhUnitPwUnitPhUnitRemUnitEmUnitExUnitChUnitVwUnitVhUnitVminUnitVmaxUnitCmUnitMmUnitQUnitInUnitPcUnitPtUnitDotUnitsN"

var _Units_index = [...]uint8{0, 6, 12, 18, 24, 30, 36, 43, 49, 55, 61, 67, 73, 81, 89, 95, 101, 106, 112, 118, 124, 131, 137}

func (i Units) String() string {
	if i < 0 || i >= Units(len(_Units_index)-1) {
		return "Units(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _Units_name[_Units_index[i]:_Units_index[i+1]]
}

func (i *Units) FromString(s string) error {
	for j := 0; j < len(_Units_index)-1; j++ {
		if s == _Units_name[_Units_index[j]:_Units_index[j+1]] {
			*i = Units(j)
			return nil
		}
	}
	return errors.New("String: " + s + " is not a valid option for type: Units")
}

var _Units_descMap = map[Units]string{
	0:  `UnitPx = pixels -- 1px = 1/96th of 1in -- these are NOT raw display pixels`,
	1:  `UnitDp = density-independent pixels -- 1dp = 1/160th of 1in`,
	2:  `UnitEw = percentage of element width (equivalent to CSS % in some contexts)`,
	3:  `UnitEh = percentage of element height (equivalent to CSS % in some contexts)`,
	4:  `UnitPw = percentage of parent width (equivalent to CSS % in some contexts)`,
	5:  `UnitPh = percentage of parent height (equivalent to CSS % in some contexts)`,
	6:  `UnitRem = font size of the root element -- defaults to 12pt scaled by DPI factor`,
	7:  `UnitEm = font size of the element -- fallback to 12pt by default`,
	8:  `UnitEx = x-height of the element&#39;s font (size of &#39;x&#39; glyph) -- fallback to 0.5em by default`,
	9:  `UnitCh = width of the &#39;0&#39; glyph in the element&#39;s font -- fallback to 0.5em by default`,
	10: `UnitVw = 1% of the viewport&#39;s width`,
	11: `UnitVh = 1% of the viewport&#39;s height`,
	12: `UnitVmin = 1% of the viewport&#39;s smaller dimension`,
	13: `UnitVmax = 1% of the viewport&#39;s larger dimension`,
	14: `UnitCm = centimeters -- 1cm = 96px/2.54`,
	15: `UnitMm = millimeters -- 1mm = 1/10th of cm`,
	16: `UnitQ = quarter-millimeters -- 1q = 1/40th of cm`,
	17: `UnitIn = inches -- 1in = 2.54cm = 96px`,
	18: `UnitPc = picas -- 1pc = 1/6th of 1in`,
	19: `UnitPt = points -- 1pt = 1/72th of 1in`,
	20: `UnitDot = actual real display pixels -- generally only use internally`,
	21: ``,
}

func (i Units) Desc() string {
	if str, ok := _Units_descMap[i]; ok {
		return str
	}
	return "Units(" + strconv.FormatInt(int64(i), 10) + ")"
}
