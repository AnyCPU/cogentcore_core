// Code generated by "stringer -type=Units"; DO NOT EDIT.

package units

import (
	"errors"
	"strconv"
)

var _ = errors.New("dummy error")

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[UnitPx-0]
	_ = x[UnitDp-1]
	_ = x[UnitPct-2]
	_ = x[UnitRem-3]
	_ = x[UnitEm-4]
	_ = x[UnitEx-5]
	_ = x[UnitCh-6]
	_ = x[UnitVw-7]
	_ = x[UnitVh-8]
	_ = x[UnitVmin-9]
	_ = x[UnitVmax-10]
	_ = x[UnitCm-11]
	_ = x[UnitMm-12]
	_ = x[UnitQ-13]
	_ = x[UnitIn-14]
	_ = x[UnitPc-15]
	_ = x[UnitPt-16]
	_ = x[UnitDot-17]
	_ = x[UnitsN-18]
}

const _Units_name = "UnitPxUnitDpUnitPctUnitRemUnitEmUnitExUnitChUnitVwUnitVhUnitVminUnitVmaxUnitCmUnitMmUnitQUnitInUnitPcUnitPtUnitDotUnitsN"

var _Units_index = [...]uint8{0, 6, 12, 19, 26, 32, 38, 44, 50, 56, 64, 72, 78, 84, 89, 95, 101, 107, 114, 120}

func (i Units) String() string {
	if i < 0 || i >= Units(len(_Units_index)-1) {
		return "Units(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _Units_name[_Units_index[i]:_Units_index[i+1]]
}

func (i *Units) FromString(s string) error {
	for j := 0; j < len(_Units_index)-1; j++ {
		if s == _Units_name[_Units_index[j]:_Units_index[j+1]] {
			*i = Units(j)
			return nil
		}
	}
	return errors.New("String: " + s + " is not a valid option for type: Units")
}
