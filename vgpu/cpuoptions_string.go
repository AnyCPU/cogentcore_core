// Code generated by "stringer -type=CPUOptions"; DO NOT EDIT.

package vgpu

import (
	"errors"
	"strconv"
)

var _ = errors.New("dummy error")

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[OptRobustBufferAccess-0]
	_ = x[OptFullDrawIndexUint32-1]
	_ = x[OptImageCubeArray-2]
	_ = x[OptIndependentBlend-3]
	_ = x[OptGeometryShader-4]
	_ = x[OptTessellationShader-5]
	_ = x[OptSampleRateShading-6]
	_ = x[OptDualSrcBlend-7]
	_ = x[OptLogicOp-8]
	_ = x[OptMultiDrawIndirect-9]
	_ = x[OptDrawIndirectFirstInstance-10]
	_ = x[OptDepthClamp-11]
	_ = x[OptDepthBiasClamp-12]
	_ = x[OptFillModeNonSolid-13]
	_ = x[OptDepthBounds-14]
	_ = x[OptWideLines-15]
	_ = x[OptLargePoints-16]
	_ = x[OptAlphaToOne-17]
	_ = x[OptMultiViewport-18]
	_ = x[OptSamplerAnisotropy-19]
	_ = x[OptTextureCompressionETC2-20]
	_ = x[OptTextureCompressionASTC_LDR-21]
	_ = x[OptTextureCompressionBC-22]
	_ = x[OptOcclusionQueryPrecise-23]
	_ = x[OptPipelineStatisticsQuery-24]
	_ = x[OptVertexPipelineStoresAndAtomics-25]
	_ = x[OptFragmentStoresAndAtomics-26]
	_ = x[OptShaderTessellationAndGeometryPointSize-27]
	_ = x[OptShaderImageGatherExtended-28]
	_ = x[OptShaderStorageImageExtendedFormats-29]
	_ = x[OptShaderStorageImageMultisample-30]
	_ = x[OptShaderStorageImageReadWithoutFormat-31]
	_ = x[OptShaderStorageImageWriteWithoutFormat-32]
	_ = x[OptShaderUniformBufferArrayDynamicIndexing-33]
	_ = x[OptShaderSampledImageArrayDynamicIndexing-34]
	_ = x[OptShaderStorageBufferArrayDynamicIndexing-35]
	_ = x[OptShaderStorageImageArrayDynamicIndexing-36]
	_ = x[OptShaderClipDistance-37]
	_ = x[OptShaderCullDistance-38]
	_ = x[OptShaderFloat64-39]
	_ = x[OptShaderInt64-40]
	_ = x[OptShaderInt16-41]
	_ = x[OptShaderResourceResidency-42]
	_ = x[OptShaderResourceMinLod-43]
	_ = x[OptSparseBinding-44]
	_ = x[OptSparseResidencyBuffer-45]
	_ = x[OptSparseResidencyImage2D-46]
	_ = x[OptSparseResidencyImage3D-47]
	_ = x[OptSparseResidency2Samples-48]
	_ = x[OptSparseResidency4Samples-49]
	_ = x[OptSparseResidency8Samples-50]
	_ = x[OptSparseResidency16Samples-51]
	_ = x[OptSparseResidencyAliased-52]
	_ = x[OptVariableMultisampleRate-53]
	_ = x[OptInheritedQueries-54]
}

const _CPUOptions_name = "OptRobustBufferAccessOptFullDrawIndexUint32OptImageCubeArrayOptIndependentBlendOptGeometryShaderOptTessellationShaderOptSampleRateShadingOptDualSrcBlendOptLogicOpOptMultiDrawIndirectOptDrawIndirectFirstInstanceOptDepthClampOptDepthBiasClampOptFillModeNonSolidOptDepthBoundsOptWideLinesOptLargePointsOptAlphaToOneOptMultiViewportOptSamplerAnisotropyOptTextureCompressionETC2OptTextureCompressionASTC_LDROptTextureCompressionBCOptOcclusionQueryPreciseOptPipelineStatisticsQueryOptVertexPipelineStoresAndAtomicsOptFragmentStoresAndAtomicsOptShaderTessellationAndGeometryPointSizeOptShaderImageGatherExtendedOptShaderStorageImageExtendedFormatsOptShaderStorageImageMultisampleOptShaderStorageImageReadWithoutFormatOptShaderStorageImageWriteWithoutFormatOptShaderUniformBufferArrayDynamicIndexingOptShaderSampledImageArrayDynamicIndexingOptShaderStorageBufferArrayDynamicIndexingOptShaderStorageImageArrayDynamicIndexingOptShaderClipDistanceOptShaderCullDistanceOptShaderFloat64OptShaderInt64OptShaderInt16OptShaderResourceResidencyOptShaderResourceMinLodOptSparseBindingOptSparseResidencyBufferOptSparseResidencyImage2DOptSparseResidencyImage3DOptSparseResidency2SamplesOptSparseResidency4SamplesOptSparseResidency8SamplesOptSparseResidency16SamplesOptSparseResidencyAliasedOptVariableMultisampleRateOptInheritedQueries"

var _CPUOptions_index = [...]uint16{0, 21, 43, 60, 79, 96, 117, 137, 152, 162, 182, 210, 223, 240, 259, 273, 285, 299, 312, 328, 348, 373, 402, 425, 449, 475, 508, 535, 576, 604, 640, 672, 710, 749, 791, 832, 874, 915, 936, 957, 973, 987, 1001, 1027, 1050, 1066, 1090, 1115, 1140, 1166, 1192, 1218, 1245, 1270, 1296, 1315}

func (i CPUOptions) String() string {
	if i < 0 || i >= CPUOptions(len(_CPUOptions_index)-1) {
		return "CPUOptions(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _CPUOptions_name[_CPUOptions_index[i]:_CPUOptions_index[i+1]]
}

func (i *CPUOptions) FromString(s string) error {
	for j := 0; j < len(_CPUOptions_index)-1; j++ {
		if s == _CPUOptions_name[_CPUOptions_index[j]:_CPUOptions_index[j+1]] {
			*i = CPUOptions(j)
			return nil
		}
	}
	return errors.New("String: " + s + " is not a valid option for type: CPUOptions")
}
