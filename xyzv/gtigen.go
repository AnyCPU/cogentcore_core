// Code generated by "goki generate"; DO NOT EDIT.

package xyzv

import (
	"goki.dev/gi/v2/gi"
	"goki.dev/gti"
	"goki.dev/ki/v2"
	"goki.dev/ordmap"
	"goki.dev/xyz"
)

// ManipPtType is the [gti.Type] for [ManipPt]
var ManipPtType = gti.AddType(&gti.Type{
	Name:      "goki.dev/gi/v2/xyzv.ManipPt",
	ShortName: "xyzv.ManipPt",
	IDName:    "manip-pt",
	Doc:       "ManipPt is a manipulation control point",
	Directives: gti.Directives{
		&gti.Directive{Tool: "goki", Directive: "no-new", Args: []string{}},
	},
	Fields: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{}),
	Embeds: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"Solid", &gti.Field{Name: "Solid", Type: "goki.dev/xyz.Solid", LocalType: "xyz.Solid", Doc: "", Directives: gti.Directives{}, Tag: ""}},
	}),
	Methods:  ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
	Instance: &ManipPt{},
})

// KiType returns the [*gti.Type] of [ManipPt]
func (t *ManipPt) KiType() *gti.Type {
	return ManipPtType
}

// New returns a new [*ManipPt] value
func (t *ManipPt) New() ki.Ki {
	return &ManipPt{}
}

// SetMat sets the [ManipPt.Mat]
func (t *ManipPt) SetMat(v xyz.Material) *ManipPt {
	t.Mat = v
	return t
}

// Scene3DType is the [gti.Type] for [Scene3D]
var Scene3DType = gti.AddType(&gti.Type{
	Name:       "goki.dev/gi/v2/xyzv.Scene3D",
	ShortName:  "xyzv.Scene3D",
	IDName:     "scene-3-d",
	Doc:        "Scene3D is a gi.Widget that manages a xyz.Scene,\nproviding the basic rendering logic for the 3D scene\nin the 2D gi gui context.",
	Directives: gti.Directives{},
	Fields: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"Scene", &gti.Field{Name: "Scene", Type: "*goki.dev/xyz.Scene", LocalType: "*xyz.Scene", Doc: "Scene is the 3D Scene", Directives: gti.Directives{}, Tag: "set:\"-\""}},
		{"SelMode", &gti.Field{Name: "SelMode", Type: "goki.dev/gi/v2/xyzv.SelModes", LocalType: "SelModes", Doc: "how to deal with selection / manipulation events", Directives: gti.Directives{}, Tag: ""}},
		{"CurSel", &gti.Field{Name: "CurSel", Type: "goki.dev/xyz.Node", LocalType: "xyz.Node", Doc: "currently selected node", Directives: gti.Directives{}, Tag: "copy:\"-\" json:\"-\" xml:\"-\" view:\"-\""}},
		{"CurManipPt", &gti.Field{Name: "CurManipPt", Type: "*goki.dev/gi/v2/xyzv.ManipPt", LocalType: "*ManipPt", Doc: "currently selected manipulation control point", Directives: gti.Directives{}, Tag: "copy:\"-\" json:\"-\" xml:\"-\" view:\"-\""}},
		{"SelParams", &gti.Field{Name: "SelParams", Type: "goki.dev/gi/v2/xyzv.SelParams", LocalType: "SelParams", Doc: "parameters for selection / manipulation box", Directives: gti.Directives{}, Tag: "view:\"inline\""}},
	}),
	Embeds: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"WidgetBase", &gti.Field{Name: "WidgetBase", Type: "goki.dev/gi/v2/gi.WidgetBase", LocalType: "gi.WidgetBase", Doc: "", Directives: gti.Directives{}, Tag: ""}},
	}),
	Methods:  ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
	Instance: &Scene3D{},
})

// NewScene3D adds a new [Scene3D] with the given name
// to the given parent. If the name is unspecified, it defaults
// to the ID (kebab-case) name of the type, plus the
// [ki.Ki.NumLifetimeChildren] of the given parent.
func NewScene3D(par ki.Ki, name ...string) *Scene3D {
	return par.NewChild(Scene3DType, name...).(*Scene3D)
}

// KiType returns the [*gti.Type] of [Scene3D]
func (t *Scene3D) KiType() *gti.Type {
	return Scene3DType
}

// New returns a new [*Scene3D] value
func (t *Scene3D) New() ki.Ki {
	return &Scene3D{}
}

// SetSelMode sets the [Scene3D.SelMode]:
// how to deal with selection / manipulation events
func (t *Scene3D) SetSelMode(v SelModes) *Scene3D {
	t.SelMode = v
	return t
}

// SetCurSel sets the [Scene3D.CurSel]:
// currently selected node
func (t *Scene3D) SetCurSel(v xyz.Node) *Scene3D {
	t.CurSel = v
	return t
}

// SetCurManipPt sets the [Scene3D.CurManipPt]:
// currently selected manipulation control point
func (t *Scene3D) SetCurManipPt(v *ManipPt) *Scene3D {
	t.CurManipPt = v
	return t
}

// SetSelParams sets the [Scene3D.SelParams]:
// parameters for selection / manipulation box
func (t *Scene3D) SetSelParams(v SelParams) *Scene3D {
	t.SelParams = v
	return t
}

// SetTooltip sets the [Scene3D.Tooltip]
func (t *Scene3D) SetTooltip(v string) *Scene3D {
	t.Tooltip = v
	return t
}

// SetClass sets the [Scene3D.Class]
func (t *Scene3D) SetClass(v string) *Scene3D {
	t.Class = v
	return t
}

// SetCustomContextMenu sets the [Scene3D.CustomContextMenu]
func (t *Scene3D) SetCustomContextMenu(v func(m *gi.Scene)) *Scene3D {
	t.CustomContextMenu = v
	return t
}

// SceneViewType is the [gti.Type] for [SceneView]
var SceneViewType = gti.AddType(&gti.Type{
	Name:       "goki.dev/gi/v2/xyzv.SceneView",
	ShortName:  "xyzv.SceneView",
	IDName:     "scene-view",
	Doc:        "SceneView provides a toolbar controller for an xyz.Scene,\nand manipulation abilities.",
	Directives: gti.Directives{},
	Fields:     ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{}),
	Embeds: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"Layout", &gti.Field{Name: "Layout", Type: "goki.dev/gi/v2/gi.Layout", LocalType: "gi.Layout", Doc: "", Directives: gti.Directives{}, Tag: ""}},
	}),
	Methods:  ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
	Instance: &SceneView{},
})

// NewSceneView adds a new [SceneView] with the given name
// to the given parent. If the name is unspecified, it defaults
// to the ID (kebab-case) name of the type, plus the
// [ki.Ki.NumLifetimeChildren] of the given parent.
func NewSceneView(par ki.Ki, name ...string) *SceneView {
	return par.NewChild(SceneViewType, name...).(*SceneView)
}

// KiType returns the [*gti.Type] of [SceneView]
func (t *SceneView) KiType() *gti.Type {
	return SceneViewType
}

// New returns a new [*SceneView] value
func (t *SceneView) New() ki.Ki {
	return &SceneView{}
}

// SetTooltip sets the [SceneView.Tooltip]
func (t *SceneView) SetTooltip(v string) *SceneView {
	t.Tooltip = v
	return t
}

// SetClass sets the [SceneView.Class]
func (t *SceneView) SetClass(v string) *SceneView {
	t.Class = v
	return t
}

// SetCustomContextMenu sets the [SceneView.CustomContextMenu]
func (t *SceneView) SetCustomContextMenu(v func(m *gi.Scene)) *SceneView {
	t.CustomContextMenu = v
	return t
}

// SetStackTop sets the [SceneView.StackTop]
func (t *SceneView) SetStackTop(v int) *SceneView {
	t.StackTop = v
	return t
}
