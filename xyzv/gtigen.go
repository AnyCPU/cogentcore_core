// Code generated by "core generate"; DO NOT EDIT.

package xyzv

import (
	"cogentcore.org/core/gti"
	"cogentcore.org/core/tree"
	"cogentcore.org/core/xyz"
)

// ManipPtType is the [gti.Type] for [ManipPoint]
var ManipPtType = gti.AddType(&gti.Type{Name: "cogentcore.org/core/xyzv.ManipPt", IDName: "manip-pt", Doc: "ManipPt is a manipulation control point", Directives: []gti.Directive{{Tool: "core", Directive: "no-new"}}, Embeds: []gti.Field{{Name: "Solid"}}, Instance: &ManipPoint{}})

// KiType returns the [*gti.Type] of [ManipPoint]
func (t *ManipPoint) KiType() *gti.Type { return ManipPtType }

// New returns a new [*ManipPoint] value
func (t *ManipPoint) New() tree.Node { return &ManipPoint{} }

// SetMat sets the [ManipPoint.Mat]
func (t *ManipPoint) SetMat(v xyz.Material) *ManipPoint { t.Mat = v; return t }

// SceneType is the [gti.Type] for [Scene]
var SceneType = gti.AddType(&gti.Type{Name: "cogentcore.org/core/xyzv.Scene", IDName: "scene", Doc: "Scene is a gi.Widget that manages a xyz.Scene,\nproviding the basic rendering logic for the 3D scene\nin the 2D gi gui context.", Embeds: []gti.Field{{Name: "WidgetBase"}}, Fields: []gti.Field{{Name: "XYZ", Doc: "XYZ is the 3D xyz.Scene"}, {Name: "SelectionMode", Doc: "how to deal with selection / manipulation events"}, {Name: "CurrentSelected", Doc: "currently selected node"}, {Name: "CurrentManipPoint", Doc: "currently selected manipulation control point"}, {Name: "SelectionParams", Doc: "parameters for selection / manipulation box"}}, Instance: &Scene{}})

// NewScene adds a new [Scene] with the given name to the given parent:
// Scene is a gi.Widget that manages a xyz.Scene,
// providing the basic rendering logic for the 3D scene
// in the 2D gi gui context.
func NewScene(parent tree.Node, name ...string) *Scene {
	return parent.NewChild(SceneType, name...).(*Scene)
}

// KiType returns the [*gti.Type] of [Scene]
func (t *Scene) KiType() *gti.Type { return SceneType }

// New returns a new [*Scene] value
func (t *Scene) New() tree.Node { return &Scene{} }

// SetSelectionMode sets the [Scene.SelectionMode]:
// how to deal with selection / manipulation events
func (t *Scene) SetSelectionMode(v SelectionModes) *Scene { t.SelectionMode = v; return t }

// SetCurrentSelected sets the [Scene.CurrentSelected]:
// currently selected node
func (t *Scene) SetCurrentSelected(v xyz.Node) *Scene { t.CurrentSelected = v; return t }

// SetCurrentManipPoint sets the [Scene.CurrentManipPoint]:
// currently selected manipulation control point
func (t *Scene) SetCurrentManipPoint(v *ManipPoint) *Scene { t.CurrentManipPoint = v; return t }

// SetSelectionParams sets the [Scene.SelectionParams]:
// parameters for selection / manipulation box
func (t *Scene) SetSelectionParams(v SelectionParams) *Scene { t.SelectionParams = v; return t }

// SetTooltip sets the [Scene.Tooltip]
func (t *Scene) SetTooltip(v string) *Scene { t.Tooltip = v; return t }

// SceneViewType is the [gti.Type] for [SceneView]
var SceneViewType = gti.AddType(&gti.Type{Name: "cogentcore.org/core/xyzv.SceneView", IDName: "scene-view", Doc: "SceneView provides a toolbar controller for an xyz.Scene,\nand manipulation abilities.", Embeds: []gti.Field{{Name: "Layout"}}, Instance: &SceneView{}})

// NewSceneView adds a new [SceneView] with the given name to the given parent:
// SceneView provides a toolbar controller for an xyz.Scene,
// and manipulation abilities.
func NewSceneView(parent tree.Node, name ...string) *SceneView {
	return parent.NewChild(SceneViewType, name...).(*SceneView)
}

// KiType returns the [*gti.Type] of [SceneView]
func (t *SceneView) KiType() *gti.Type { return SceneViewType }

// New returns a new [*SceneView] value
func (t *SceneView) New() tree.Node { return &SceneView{} }

// SetTooltip sets the [SceneView.Tooltip]
func (t *SceneView) SetTooltip(v string) *SceneView { t.Tooltip = v; return t }
