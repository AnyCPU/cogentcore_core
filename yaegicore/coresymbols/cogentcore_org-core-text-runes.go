// Code generated by 'yaegi extract cogentcore.org/core/text/runes'. DO NOT EDIT.

package coresymbols

import (
	"cogentcore.org/core/text/runes"
	"reflect"
)

func init() {
	Symbols["cogentcore.org/core/text/runes/runes"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"Contains":      reflect.ValueOf(runes.Contains),
		"ContainsFunc":  reflect.ValueOf(runes.ContainsFunc),
		"ContainsRune":  reflect.ValueOf(runes.ContainsRune),
		"Count":         reflect.ValueOf(runes.Count),
		"Equal":         reflect.ValueOf(runes.Equal),
		"EqualFold":     reflect.ValueOf(runes.EqualFold),
		"Fields":        reflect.ValueOf(runes.Fields),
		"FieldsFunc":    reflect.ValueOf(runes.FieldsFunc),
		"HasPrefix":     reflect.ValueOf(runes.HasPrefix),
		"HasSuffix":     reflect.ValueOf(runes.HasSuffix),
		"Index":         reflect.ValueOf(runes.Index),
		"IndexFold":     reflect.ValueOf(runes.IndexFold),
		"IndexFunc":     reflect.ValueOf(runes.IndexFunc),
		"Join":          reflect.ValueOf(runes.Join),
		"LastIndexFunc": reflect.ValueOf(runes.LastIndexFunc),
		"Repeat":        reflect.ValueOf(runes.Repeat),
		"Replace":       reflect.ValueOf(runes.Replace),
		"ReplaceAll":    reflect.ValueOf(runes.ReplaceAll),
		"SetFromBytes":  reflect.ValueOf(runes.SetFromBytes),
		"Split":         reflect.ValueOf(runes.Split),
		"SplitAfter":    reflect.ValueOf(runes.SplitAfter),
		"SplitAfterN":   reflect.ValueOf(runes.SplitAfterN),
		"SplitN":        reflect.ValueOf(runes.SplitN),
		"Trim":          reflect.ValueOf(runes.Trim),
		"TrimFunc":      reflect.ValueOf(runes.TrimFunc),
		"TrimLeft":      reflect.ValueOf(runes.TrimLeft),
		"TrimLeftFunc":  reflect.ValueOf(runes.TrimLeftFunc),
		"TrimPrefix":    reflect.ValueOf(runes.TrimPrefix),
		"TrimRight":     reflect.ValueOf(runes.TrimRight),
		"TrimRightFunc": reflect.ValueOf(runes.TrimRightFunc),
		"TrimSpace":     reflect.ValueOf(runes.TrimSpace),
		"TrimSuffix":    reflect.ValueOf(runes.TrimSuffix),
	}
}
