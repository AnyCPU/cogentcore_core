// Code generated by 'yaegi extract cogentcore.org/core/tensor/databrowser'. DO NOT EDIT.

package symbols

import (
	"cogentcore.org/core/core"
	"cogentcore.org/core/plot/plotcore"
	"cogentcore.org/core/tensor"
	"cogentcore.org/core/tensor/databrowser"
	"cogentcore.org/core/tensor/table"
	"cogentcore.org/core/tensor/tensorcore"
	"cogentcore.org/core/tensor/tensorfs"
	"cogentcore.org/core/texteditor"
	"reflect"
)

func init() {
	Symbols["cogentcore.org/core/tensor/databrowser/databrowser"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"AsDataTree":         reflect.ValueOf(databrowser.AsDataTree),
		"CurTabber":          reflect.ValueOf(&databrowser.CurTabber).Elem(),
		"FirstComment":       reflect.ValueOf(databrowser.FirstComment),
		"IsTableFile":        reflect.ValueOf(databrowser.IsTableFile),
		"NewBasic":           reflect.ValueOf(databrowser.NewBasic),
		"NewBasicWindow":     reflect.ValueOf(databrowser.NewBasicWindow),
		"NewDataTree":        reflect.ValueOf(databrowser.NewDataTree),
		"NewDiffBrowserDirs": reflect.ValueOf(databrowser.NewDiffBrowserDirs),
		"NewFileNode":        reflect.ValueOf(databrowser.NewFileNode),
		"NewTabs":            reflect.ValueOf(databrowser.NewTabs),
		"PromptOKCancel":     reflect.ValueOf(databrowser.PromptOKCancel),
		"PromptString":       reflect.ValueOf(databrowser.PromptString),
		"PromptStruct":       reflect.ValueOf(databrowser.PromptStruct),
		"TensorFS":           reflect.ValueOf(databrowser.TensorFS),
		"TheBrowser":         reflect.ValueOf(&databrowser.TheBrowser).Elem(),
		"TrimOrderPrefix":    reflect.ValueOf(databrowser.TrimOrderPrefix),

		// type definitions
		"Basic":    reflect.ValueOf((*databrowser.Basic)(nil)),
		"Browser":  reflect.ValueOf((*databrowser.Browser)(nil)),
		"DataTree": reflect.ValueOf((*databrowser.DataTree)(nil)),
		"FileNode": reflect.ValueOf((*databrowser.FileNode)(nil)),
		"Tabber":   reflect.ValueOf((*databrowser.Tabber)(nil)),
		"Tabs":     reflect.ValueOf((*databrowser.Tabs)(nil)),
		"Treer":    reflect.ValueOf((*databrowser.Treer)(nil)),

		// interface wrapper definitions
		"_Tabber": reflect.ValueOf((*_cogentcore_org_core_tensor_databrowser_Tabber)(nil)),
		"_Treer":  reflect.ValueOf((*_cogentcore_org_core_tensor_databrowser_Treer)(nil)),
	}
}

// _cogentcore_org_core_tensor_databrowser_Tabber is an interface wrapper for Tabber type
type _cogentcore_org_core_tensor_databrowser_Tabber struct {
	IValue           interface{}
	WAsCoreTabs      func() *core.Tabs
	WAsDataTabs      func() *databrowser.Tabs
	WCurrentTab      func() (core.Widget, int)
	WEditorFile      func(label string, filename string) *texteditor.Editor
	WEditorString    func(label string, content string) *texteditor.Editor
	WGoUpdatePlot    func(label string) *plotcore.PlotEditor
	WPlotTable       func(label string, dt *table.Table) *plotcore.PlotEditor
	WPlotTensorFS    func(dfs *tensorfs.Node) *plotcore.PlotEditor
	WRecycleTab      func(name string) *core.Frame
	WSelectTabByName func(name string) *core.Frame
	WSelectTabIndex  func(idx int) *core.Frame
	WSliceTable      func(label string, slc any) *core.Table
	WTabByName       func(name string) *core.Frame
	WTensorEditor    func(label string, tsr tensor.Tensor) *tensorcore.TensorEditor
	WTensorGrid      func(label string, tsr tensor.Tensor) *tensorcore.TensorGrid
	WTensorTable     func(label string, dt *table.Table) *tensorcore.Table
	WUpdatePlot      func(label string) *plotcore.PlotEditor
}

func (W _cogentcore_org_core_tensor_databrowser_Tabber) AsCoreTabs() *core.Tabs {
	return W.WAsCoreTabs()
}
func (W _cogentcore_org_core_tensor_databrowser_Tabber) AsDataTabs() *databrowser.Tabs {
	return W.WAsDataTabs()
}
func (W _cogentcore_org_core_tensor_databrowser_Tabber) CurrentTab() (core.Widget, int) {
	return W.WCurrentTab()
}
func (W _cogentcore_org_core_tensor_databrowser_Tabber) EditorFile(label string, filename string) *texteditor.Editor {
	return W.WEditorFile(label, filename)
}
func (W _cogentcore_org_core_tensor_databrowser_Tabber) EditorString(label string, content string) *texteditor.Editor {
	return W.WEditorString(label, content)
}
func (W _cogentcore_org_core_tensor_databrowser_Tabber) GoUpdatePlot(label string) *plotcore.PlotEditor {
	return W.WGoUpdatePlot(label)
}
func (W _cogentcore_org_core_tensor_databrowser_Tabber) PlotTable(label string, dt *table.Table) *plotcore.PlotEditor {
	return W.WPlotTable(label, dt)
}
func (W _cogentcore_org_core_tensor_databrowser_Tabber) PlotTensorFS(dfs *tensorfs.Node) *plotcore.PlotEditor {
	return W.WPlotTensorFS(dfs)
}
func (W _cogentcore_org_core_tensor_databrowser_Tabber) RecycleTab(name string) *core.Frame {
	return W.WRecycleTab(name)
}
func (W _cogentcore_org_core_tensor_databrowser_Tabber) SelectTabByName(name string) *core.Frame {
	return W.WSelectTabByName(name)
}
func (W _cogentcore_org_core_tensor_databrowser_Tabber) SelectTabIndex(idx int) *core.Frame {
	return W.WSelectTabIndex(idx)
}
func (W _cogentcore_org_core_tensor_databrowser_Tabber) SliceTable(label string, slc any) *core.Table {
	return W.WSliceTable(label, slc)
}
func (W _cogentcore_org_core_tensor_databrowser_Tabber) TabByName(name string) *core.Frame {
	return W.WTabByName(name)
}
func (W _cogentcore_org_core_tensor_databrowser_Tabber) TensorEditor(label string, tsr tensor.Tensor) *tensorcore.TensorEditor {
	return W.WTensorEditor(label, tsr)
}
func (W _cogentcore_org_core_tensor_databrowser_Tabber) TensorGrid(label string, tsr tensor.Tensor) *tensorcore.TensorGrid {
	return W.WTensorGrid(label, tsr)
}
func (W _cogentcore_org_core_tensor_databrowser_Tabber) TensorTable(label string, dt *table.Table) *tensorcore.Table {
	return W.WTensorTable(label, dt)
}
func (W _cogentcore_org_core_tensor_databrowser_Tabber) UpdatePlot(label string) *plotcore.PlotEditor {
	return W.WUpdatePlot(label)
}

// _cogentcore_org_core_tensor_databrowser_Treer is an interface wrapper for Treer type
type _cogentcore_org_core_tensor_databrowser_Treer struct {
	IValue      interface{}
	WAsDataTree func() *databrowser.DataTree
}

func (W _cogentcore_org_core_tensor_databrowser_Treer) AsDataTree() *databrowser.DataTree {
	return W.WAsDataTree()
}
