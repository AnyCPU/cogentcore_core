// Code generated by 'yaegi extract cogentcore.org/core/tensor/matrix'. DO NOT EDIT.

package symbols

import (
	"cogentcore.org/core/tensor/matrix"
	"reflect"
)

func init() {
	Symbols["cogentcore.org/core/tensor/matrix/matrix"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"CallOut2":        reflect.ValueOf(matrix.CallOut2),
		"CopyFromDense":   reflect.ValueOf(matrix.CopyFromDense),
		"Det":             reflect.ValueOf(matrix.Det),
		"Diagonal":        reflect.ValueOf(matrix.Diagonal),
		"DiagonalIndices": reflect.ValueOf(matrix.DiagonalIndices),
		"DiagonalN":       reflect.ValueOf(matrix.DiagonalN),
		"Identity":        reflect.ValueOf(matrix.Identity),
		"LogDet":          reflect.ValueOf(matrix.LogDet),
		"Mul":             reflect.ValueOf(matrix.Mul),
		"MulOut":          reflect.ValueOf(matrix.MulOut),
		"NewDense":        reflect.ValueOf(matrix.NewDense),
		"NewMatrix":       reflect.ValueOf(matrix.NewMatrix),
		"NewSymmetric":    reflect.ValueOf(matrix.NewSymmetric),
		"StringCheck":     reflect.ValueOf(matrix.StringCheck),
		"Trace":           reflect.ValueOf(matrix.Trace),
		"Tri":             reflect.ValueOf(matrix.Tri),
		"TriL":            reflect.ValueOf(matrix.TriL),
		"TriLIndicies":    reflect.ValueOf(matrix.TriLIndicies),
		"TriLNum":         reflect.ValueOf(matrix.TriLNum),
		"TriLView":        reflect.ValueOf(matrix.TriLView),
		"TriU":            reflect.ValueOf(matrix.TriU),
		"TriUIndicies":    reflect.ValueOf(matrix.TriUIndicies),
		"TriUNum":         reflect.ValueOf(matrix.TriUNum),
		"TriUView":        reflect.ValueOf(matrix.TriUView),
		"TriUpper":        reflect.ValueOf(matrix.TriUpper),

		// type definitions
		"Matrix":    reflect.ValueOf((*matrix.Matrix)(nil)),
		"Symmetric": reflect.ValueOf((*matrix.Symmetric)(nil)),
	}
}
