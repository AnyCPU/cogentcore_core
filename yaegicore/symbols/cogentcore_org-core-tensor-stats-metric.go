// Code generated by 'yaegi extract cogentcore.org/core/tensor/stats/metric'. DO NOT EDIT.

package symbols

import (
	"cogentcore.org/core/tensor/stats/metric"
	"reflect"
)

func init() {
	Symbols["cogentcore.org/core/tensor/stats/metric/metric"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"Abs":                            reflect.ValueOf(metric.Abs),
		"AbsFunc":                        reflect.ValueOf(metric.AbsFunc),
		"ClosestRow":                     reflect.ValueOf(metric.ClosestRow),
		"Correlation":                    reflect.ValueOf(metric.Correlation),
		"CorrelationFunc":                reflect.ValueOf(metric.CorrelationFunc),
		"CorrelationFuncOut64":           reflect.ValueOf(metric.CorrelationFuncOut64),
		"Cosine":                         reflect.ValueOf(metric.Cosine),
		"CosineFunc":                     reflect.ValueOf(metric.CosineFunc),
		"CosineFuncOut64":                reflect.ValueOf(metric.CosineFuncOut64),
		"Covariance":                     reflect.ValueOf(metric.Covariance),
		"CovarianceFunc":                 reflect.ValueOf(metric.CovarianceFunc),
		"CovarianceMatrix":               reflect.ValueOf(metric.CovarianceMatrix),
		"CrossEntropy":                   reflect.ValueOf(metric.CrossEntropy),
		"CrossEntropyFunc":               reflect.ValueOf(metric.CrossEntropyFunc),
		"CrossMatrix":                    reflect.ValueOf(metric.CrossMatrix),
		"Euclidean":                      reflect.ValueOf(metric.Euclidean),
		"EuclideanBinTol":                reflect.ValueOf(metric.EuclideanBinTol),
		"EuclideanBinTolFunc":            reflect.ValueOf(metric.EuclideanBinTolFunc),
		"EuclideanFunc":                  reflect.ValueOf(metric.EuclideanFunc),
		"Hamming":                        reflect.ValueOf(metric.Hamming),
		"HammingFunc":                    reflect.ValueOf(metric.HammingFunc),
		"InnerProduct":                   reflect.ValueOf(metric.InnerProduct),
		"InnerProductFunc":               reflect.ValueOf(metric.InnerProductFunc),
		"InvCorrelation":                 reflect.ValueOf(metric.InvCorrelation),
		"InvCorrelationFunc":             reflect.ValueOf(metric.InvCorrelationFunc),
		"InvCosine":                      reflect.ValueOf(metric.InvCosine),
		"InvCosineFunc":                  reflect.ValueOf(metric.InvCosineFunc),
		"Matrix":                         reflect.ValueOf(metric.Matrix),
		"Metric":                         reflect.ValueOf(metric.Metric),
		"MetricOut":                      reflect.ValueOf(metric.MetricOut),
		"MetricsN":                       reflect.ValueOf(metric.MetricsN),
		"MetricsValues":                  reflect.ValueOf(metric.MetricsValues),
		"NFunc":                          reflect.ValueOf(metric.NFunc),
		"OutShape":                       reflect.ValueOf(metric.OutShape),
		"PCA":                            reflect.ValueOf(metric.PCA),
		"ProjectOnMatrixColumn":          reflect.ValueOf(metric.ProjectOnMatrixColumn),
		"SVD":                            reflect.ValueOf(metric.SVD),
		"SumSquares":                     reflect.ValueOf(metric.SumSquares),
		"SumSquaresBinTol":               reflect.ValueOf(metric.SumSquaresBinTol),
		"SumSquaresBinTolFunc":           reflect.ValueOf(metric.SumSquaresBinTolFunc),
		"SumSquaresBinTolScaleFuncOut64": reflect.ValueOf(metric.SumSquaresBinTolScaleFuncOut64),
		"SumSquaresFunc":                 reflect.ValueOf(metric.SumSquaresFunc),
		"SumSquaresFuncOut64":            reflect.ValueOf(metric.SumSquaresFuncOut64),
		"SumSquaresScaleFuncOut64":       reflect.ValueOf(metric.SumSquaresScaleFuncOut64),
		"TriangularLIndicies":            reflect.ValueOf(metric.TriangularLIndicies),
		"TriangularN":                    reflect.ValueOf(metric.TriangularN),
		"Vec2in3outFunc":                 reflect.ValueOf(metric.Vec2in3outFunc),
		"Vec2inFunc":                     reflect.ValueOf(metric.Vec2inFunc),
		"Vec3outFunc":                    reflect.ValueOf(metric.Vec3outFunc),
		"VecFunc":                        reflect.ValueOf(metric.VecFunc),
		"VecSSFunc":                      reflect.ValueOf(metric.VecSSFunc),
		"Vectorize3Out64":                reflect.ValueOf(metric.Vectorize3Out64),

		// type definitions
		"MetricFunc": reflect.ValueOf((*metric.MetricFunc)(nil)),
		"Metrics":    reflect.ValueOf((*metric.Metrics)(nil)),
	}
}
