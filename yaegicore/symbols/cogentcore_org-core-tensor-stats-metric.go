// Code generated by 'yaegi extract cogentcore.org/core/tensor/stats/metric'. DO NOT EDIT.

package symbols

import (
	"cogentcore.org/core/tensor/stats/metric"
	"reflect"
)

func init() {
	Symbols["cogentcore.org/core/tensor/stats/metric/metric"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"Abs":                        reflect.ValueOf(metric.Abs),
		"AsMetricFunc":               reflect.ValueOf(metric.AsMetricFunc),
		"ClosestRow":                 reflect.ValueOf(metric.ClosestRow),
		"Correlation":                reflect.ValueOf(metric.Correlation),
		"CorrelationOut64":           reflect.ValueOf(metric.CorrelationOut64),
		"Cosine":                     reflect.ValueOf(metric.Cosine),
		"CosineOut64":                reflect.ValueOf(metric.CosineOut64),
		"Covariance":                 reflect.ValueOf(metric.Covariance),
		"CovarianceMatrix":           reflect.ValueOf(metric.CovarianceMatrix),
		"CrossEntropy":               reflect.ValueOf(metric.CrossEntropy),
		"CrossMatrix":                reflect.ValueOf(metric.CrossMatrix),
		"Euclidean":                  reflect.ValueOf(metric.Euclidean),
		"EuclideanBinTol":            reflect.ValueOf(metric.EuclideanBinTol),
		"Hamming":                    reflect.ValueOf(metric.Hamming),
		"InnerProduct":               reflect.ValueOf(metric.InnerProduct),
		"InvCorrelation":             reflect.ValueOf(metric.InvCorrelation),
		"InvCosine":                  reflect.ValueOf(metric.InvCosine),
		"Matrix":                     reflect.ValueOf(metric.Matrix),
		"MetricAbs":                  reflect.ValueOf(metric.MetricAbs),
		"MetricCorrelation":          reflect.ValueOf(metric.MetricCorrelation),
		"MetricCosine":               reflect.ValueOf(metric.MetricCosine),
		"MetricCovariance":           reflect.ValueOf(metric.MetricCovariance),
		"MetricCrossEntropy":         reflect.ValueOf(metric.MetricCrossEntropy),
		"MetricEuclidean":            reflect.ValueOf(metric.MetricEuclidean),
		"MetricEuclideanBinTol":      reflect.ValueOf(metric.MetricEuclideanBinTol),
		"MetricHamming":              reflect.ValueOf(metric.MetricHamming),
		"MetricInnerProduct":         reflect.ValueOf(metric.MetricInnerProduct),
		"MetricInvCorrelation":       reflect.ValueOf(metric.MetricInvCorrelation),
		"MetricInvCosine":            reflect.ValueOf(metric.MetricInvCosine),
		"MetricSumSquares":           reflect.ValueOf(metric.MetricSumSquares),
		"MetricSumSquaresBinTol":     reflect.ValueOf(metric.MetricSumSquaresBinTol),
		"MetricsN":                   reflect.ValueOf(metric.MetricsN),
		"MetricsValues":              reflect.ValueOf(metric.MetricsValues),
		"NFunc":                      reflect.ValueOf(metric.NFunc),
		"PCA":                        reflect.ValueOf(metric.PCA),
		"ProjectOnMatrixColumn":      reflect.ValueOf(metric.ProjectOnMatrixColumn),
		"SVD":                        reflect.ValueOf(metric.SVD),
		"SumSquares":                 reflect.ValueOf(metric.SumSquares),
		"SumSquaresBinTol":           reflect.ValueOf(metric.SumSquaresBinTol),
		"SumSquaresBinTolScaleOut64": reflect.ValueOf(metric.SumSquaresBinTolScaleOut64),
		"SumSquaresOut64":            reflect.ValueOf(metric.SumSquaresOut64),
		"SumSquaresScaleOut64":       reflect.ValueOf(metric.SumSquaresScaleOut64),
		"TriangularLIndicies":        reflect.ValueOf(metric.TriangularLIndicies),
		"TriangularN":                reflect.ValueOf(metric.TriangularN),
		"Vec2in3outFunc":             reflect.ValueOf(metric.Vec2in3outFunc),
		"Vec2inFunc":                 reflect.ValueOf(metric.Vec2inFunc),
		"Vec3outFunc":                reflect.ValueOf(metric.Vec3outFunc),
		"VecFunc":                    reflect.ValueOf(metric.VecFunc),
		"VecSSFunc":                  reflect.ValueOf(metric.VecSSFunc),
		"Vectorize3Out64":            reflect.ValueOf(metric.Vectorize3Out64),

		// type definitions
		"MetricFunc": reflect.ValueOf((*metric.MetricFunc)(nil)),
		"Metrics":    reflect.ValueOf((*metric.Metrics)(nil)),
	}
}
