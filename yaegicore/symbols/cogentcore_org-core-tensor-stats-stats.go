// Code generated by 'yaegi extract cogentcore.org/core/tensor/stats/stats'. DO NOT EDIT.

package symbols

import (
	"cogentcore.org/core/tensor/stats/stats"
	"reflect"
)

func init() {
	Symbols["cogentcore.org/core/tensor/stats/stats/stats"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"Count":               reflect.ValueOf(stats.Count),
		"CountFunc":           reflect.ValueOf(stats.CountFunc),
		"CountFuncOut64":      reflect.ValueOf(stats.CountFuncOut64),
		"Describe":            reflect.ValueOf(stats.Describe),
		"DescribeTable":       reflect.ValueOf(stats.DescribeTable),
		"DescribeTableAll":    reflect.ValueOf(stats.DescribeTableAll),
		"DescriptiveStats":    reflect.ValueOf(&stats.DescriptiveStats).Elem(),
		"GroupDescribe":       reflect.ValueOf(stats.GroupDescribe),
		"GroupStats":          reflect.ValueOf(stats.GroupStats),
		"Groups":              reflect.ValueOf(stats.Groups),
		"L1Norm":              reflect.ValueOf(stats.L1Norm),
		"L2Norm":              reflect.ValueOf(stats.L2Norm),
		"L2NormFunc":          reflect.ValueOf(stats.L2NormFunc),
		"L2NormFuncOut64":     reflect.ValueOf(stats.L2NormFuncOut64),
		"Max":                 reflect.ValueOf(stats.Max),
		"MaxAbs":              reflect.ValueOf(stats.MaxAbs),
		"MaxAbsFunc":          reflect.ValueOf(stats.MaxAbsFunc),
		"MaxFunc":             reflect.ValueOf(stats.MaxFunc),
		"Mean":                reflect.ValueOf(stats.Mean),
		"MeanFunc":            reflect.ValueOf(stats.MeanFunc),
		"MeanFuncOut64":       reflect.ValueOf(stats.MeanFuncOut64),
		"Median":              reflect.ValueOf(stats.Median),
		"MedianFunc":          reflect.ValueOf(stats.MedianFunc),
		"Min":                 reflect.ValueOf(stats.Min),
		"MinAbs":              reflect.ValueOf(stats.MinAbs),
		"MinAbsFunc":          reflect.ValueOf(stats.MinAbsFunc),
		"MinFunc":             reflect.ValueOf(stats.MinFunc),
		"NFunc":               reflect.ValueOf(stats.NFunc),
		"OutShape":            reflect.ValueOf(stats.OutShape),
		"Prod":                reflect.ValueOf(stats.Prod),
		"ProdFunc":            reflect.ValueOf(stats.ProdFunc),
		"Q1":                  reflect.ValueOf(stats.Q1),
		"Q1Func":              reflect.ValueOf(stats.Q1Func),
		"Q3":                  reflect.ValueOf(stats.Q3),
		"Q3Func":              reflect.ValueOf(stats.Q3Func),
		"QuantilesFunc":       reflect.ValueOf(stats.QuantilesFunc),
		"Sem":                 reflect.ValueOf(stats.Sem),
		"SemFunc":             reflect.ValueOf(stats.SemFunc),
		"SemPop":              reflect.ValueOf(stats.SemPop),
		"SemPopFunc":          reflect.ValueOf(stats.SemPopFunc),
		"Stat":                reflect.ValueOf(stats.Stat),
		"StatOut":             reflect.ValueOf(stats.StatOut),
		"StatsN":              reflect.ValueOf(stats.StatsN),
		"StatsValues":         reflect.ValueOf(stats.StatsValues),
		"Std":                 reflect.ValueOf(stats.Std),
		"StdFunc":             reflect.ValueOf(stats.StdFunc),
		"StdFuncOut64":        reflect.ValueOf(stats.StdFuncOut64),
		"StdPop":              reflect.ValueOf(stats.StdPop),
		"StdPopFunc":          reflect.ValueOf(stats.StdPopFunc),
		"StripPackage":        reflect.ValueOf(stats.StripPackage),
		"Sum":                 reflect.ValueOf(stats.Sum),
		"SumAbs":              reflect.ValueOf(stats.SumAbs),
		"SumAbsFunc":          reflect.ValueOf(stats.SumAbsFunc),
		"SumFunc":             reflect.ValueOf(stats.SumFunc),
		"SumFuncOut64":        reflect.ValueOf(stats.SumFuncOut64),
		"SumSq":               reflect.ValueOf(stats.SumSq),
		"SumSqDevFuncOut64":   reflect.ValueOf(stats.SumSqDevFuncOut64),
		"SumSqFunc":           reflect.ValueOf(stats.SumSqFunc),
		"SumSqFuncOut64":      reflect.ValueOf(stats.SumSqFuncOut64),
		"SumSqScaleFuncOut64": reflect.ValueOf(stats.SumSqScaleFuncOut64),
		"TableGroupDescribe":  reflect.ValueOf(stats.TableGroupDescribe),
		"TableGroupStats":     reflect.ValueOf(stats.TableGroupStats),
		"TableGroups":         reflect.ValueOf(stats.TableGroups),
		"Var":                 reflect.ValueOf(stats.Var),
		"VarFunc":             reflect.ValueOf(stats.VarFunc),
		"VarFuncOut64":        reflect.ValueOf(stats.VarFuncOut64),
		"VarPop":              reflect.ValueOf(stats.VarPop),
		"VarPopFunc":          reflect.ValueOf(stats.VarPopFunc),
		"VarPopFuncOut64":     reflect.ValueOf(stats.VarPopFuncOut64),
		"Vec2inFunc":          reflect.ValueOf(stats.Vec2inFunc),
		"Vec2outFunc":         reflect.ValueOf(stats.Vec2outFunc),
		"VecFunc":             reflect.ValueOf(stats.VecFunc),
		"Vectorize2Out64":     reflect.ValueOf(stats.Vectorize2Out64),
		"VectorizeOut64":      reflect.ValueOf(stats.VectorizeOut64),

		// type definitions
		"Stats":     reflect.ValueOf((*stats.Stats)(nil)),
		"StatsFunc": reflect.ValueOf((*stats.StatsFunc)(nil)),
	}
}
