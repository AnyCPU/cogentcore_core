// Code generated by 'yaegi extract cogentcore.org/core/tensor/stats/stats'. DO NOT EDIT.

package symbols

import (
	"cogentcore.org/core/tensor/stats/stats"
	"reflect"
)

func init() {
	Symbols["cogentcore.org/core/tensor/stats/stats/stats"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"AsStatsFunc":        reflect.ValueOf(stats.AsStatsFunc),
		"Binarize":           reflect.ValueOf(stats.Binarize),
		"Clamp":              reflect.ValueOf(stats.Clamp),
		"Count":              reflect.ValueOf(stats.Count),
		"CountOut64":         reflect.ValueOf(stats.CountOut64),
		"Describe":           reflect.ValueOf(stats.Describe),
		"DescribeTable":      reflect.ValueOf(stats.DescribeTable),
		"DescribeTableAll":   reflect.ValueOf(stats.DescribeTableAll),
		"DescriptiveStats":   reflect.ValueOf(&stats.DescriptiveStats).Elem(),
		"GroupAll":           reflect.ValueOf(stats.GroupAll),
		"GroupDescribe":      reflect.ValueOf(stats.GroupDescribe),
		"GroupStats":         reflect.ValueOf(stats.GroupStats),
		"Groups":             reflect.ValueOf(stats.Groups),
		"L2Norm":             reflect.ValueOf(stats.L2Norm),
		"L2NormOut64":        reflect.ValueOf(stats.L2NormOut64),
		"Max":                reflect.ValueOf(stats.Max),
		"MaxAbs":             reflect.ValueOf(stats.MaxAbs),
		"Mean":               reflect.ValueOf(stats.Mean),
		"MeanOut64":          reflect.ValueOf(stats.MeanOut64),
		"Median":             reflect.ValueOf(stats.Median),
		"Min":                reflect.ValueOf(stats.Min),
		"MinAbs":             reflect.ValueOf(stats.MinAbs),
		"NFunc":              reflect.ValueOf(stats.NFunc),
		"Prod":               reflect.ValueOf(stats.Prod),
		"Q1":                 reflect.ValueOf(stats.Q1),
		"Q3":                 reflect.ValueOf(stats.Q3),
		"Quantiles":          reflect.ValueOf(stats.Quantiles),
		"Sem":                reflect.ValueOf(stats.Sem),
		"SemPop":             reflect.ValueOf(stats.SemPop),
		"StatCount":          reflect.ValueOf(stats.StatCount),
		"StatL1Norm":         reflect.ValueOf(stats.StatL1Norm),
		"StatL2Norm":         reflect.ValueOf(stats.StatL2Norm),
		"StatMax":            reflect.ValueOf(stats.StatMax),
		"StatMaxAbs":         reflect.ValueOf(stats.StatMaxAbs),
		"StatMean":           reflect.ValueOf(stats.StatMean),
		"StatMedian":         reflect.ValueOf(stats.StatMedian),
		"StatMin":            reflect.ValueOf(stats.StatMin),
		"StatMinAbs":         reflect.ValueOf(stats.StatMinAbs),
		"StatProd":           reflect.ValueOf(stats.StatProd),
		"StatQ1":             reflect.ValueOf(stats.StatQ1),
		"StatQ3":             reflect.ValueOf(stats.StatQ3),
		"StatSem":            reflect.ValueOf(stats.StatSem),
		"StatSemPop":         reflect.ValueOf(stats.StatSemPop),
		"StatStd":            reflect.ValueOf(stats.StatStd),
		"StatStdPop":         reflect.ValueOf(stats.StatStdPop),
		"StatSum":            reflect.ValueOf(stats.StatSum),
		"StatSumAbs":         reflect.ValueOf(stats.StatSumAbs),
		"StatSumSq":          reflect.ValueOf(stats.StatSumSq),
		"StatVar":            reflect.ValueOf(stats.StatVar),
		"StatVarPop":         reflect.ValueOf(stats.StatVarPop),
		"StatsN":             reflect.ValueOf(stats.StatsN),
		"StatsValues":        reflect.ValueOf(stats.StatsValues),
		"Std":                reflect.ValueOf(stats.Std),
		"StdOut64":           reflect.ValueOf(stats.StdOut64),
		"StdPop":             reflect.ValueOf(stats.StdPop),
		"StripPackage":       reflect.ValueOf(stats.StripPackage),
		"Sum":                reflect.ValueOf(stats.Sum),
		"SumAbs":             reflect.ValueOf(stats.SumAbs),
		"SumOut64":           reflect.ValueOf(stats.SumOut64),
		"SumSq":              reflect.ValueOf(stats.SumSq),
		"SumSqDevOut64":      reflect.ValueOf(stats.SumSqDevOut64),
		"SumSqOut64":         reflect.ValueOf(stats.SumSqOut64),
		"SumSqScaleOut64":    reflect.ValueOf(stats.SumSqScaleOut64),
		"TableGroupDescribe": reflect.ValueOf(stats.TableGroupDescribe),
		"TableGroupStats":    reflect.ValueOf(stats.TableGroupStats),
		"TableGroups":        reflect.ValueOf(stats.TableGroups),
		"UnitNorm":           reflect.ValueOf(stats.UnitNorm),
		"Var":                reflect.ValueOf(stats.Var),
		"VarOut64":           reflect.ValueOf(stats.VarOut64),
		"VarPop":             reflect.ValueOf(stats.VarPop),
		"VarPopOut64":        reflect.ValueOf(stats.VarPopOut64),
		"Vec2inFunc":         reflect.ValueOf(stats.Vec2inFunc),
		"Vec2outFunc":        reflect.ValueOf(stats.Vec2outFunc),
		"VecFunc":            reflect.ValueOf(stats.VecFunc),
		"Vectorize2Out64":    reflect.ValueOf(stats.Vectorize2Out64),
		"VectorizeOut64":     reflect.ValueOf(stats.VectorizeOut64),
		"ZScore":             reflect.ValueOf(stats.ZScore),

		// type definitions
		"Stats":     reflect.ValueOf((*stats.Stats)(nil)),
		"StatsFunc": reflect.ValueOf((*stats.StatsFunc)(nil)),
	}
}
