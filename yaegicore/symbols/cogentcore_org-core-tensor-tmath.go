// Code generated by 'yaegi extract cogentcore.org/core/tensor/tmath'. DO NOT EDIT.

package symbols

import (
	"cogentcore.org/core/tensor/tmath"
	"reflect"
)

func init() {
	Symbols["cogentcore.org/core/tensor/tmath/tmath"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"Abs":            reflect.ValueOf(tmath.Abs),
		"Acos":           reflect.ValueOf(tmath.Acos),
		"Acosh":          reflect.ValueOf(tmath.Acosh),
		"Add":            reflect.ValueOf(tmath.Add),
		"AddScalar":      reflect.ValueOf(tmath.AddScalar),
		"AddSubSpace":    reflect.ValueOf(tmath.AddSubSpace),
		"Asin":           reflect.ValueOf(tmath.Asin),
		"Asinh":          reflect.ValueOf(tmath.Asinh),
		"Atan":           reflect.ValueOf(tmath.Atan),
		"Atanh":          reflect.ValueOf(tmath.Atanh),
		"Binarize":       reflect.ValueOf(tmath.Binarize),
		"Cbrt":           reflect.ValueOf(tmath.Cbrt),
		"Ceil":           reflect.ValueOf(tmath.Ceil),
		"Clamp":          reflect.ValueOf(tmath.Clamp),
		"Cos":            reflect.ValueOf(tmath.Cos),
		"Cosh":           reflect.ValueOf(tmath.Cosh),
		"Div":            reflect.ValueOf(tmath.Div),
		"DivScalar":      reflect.ValueOf(tmath.DivScalar),
		"DivScalarInv":   reflect.ValueOf(tmath.DivScalarInv),
		"DivSubSpace":    reflect.ValueOf(tmath.DivSubSpace),
		"DivSubSpaceInv": reflect.ValueOf(tmath.DivSubSpaceInv),
		"Erf":            reflect.ValueOf(tmath.Erf),
		"Erfc":           reflect.ValueOf(tmath.Erfc),
		"Erfcinv":        reflect.ValueOf(tmath.Erfcinv),
		"Erfinv":         reflect.ValueOf(tmath.Erfinv),
		"Exp":            reflect.ValueOf(tmath.Exp),
		"Exp2":           reflect.ValueOf(tmath.Exp2),
		"Expm1":          reflect.ValueOf(tmath.Expm1),
		"Floor":          reflect.ValueOf(tmath.Floor),
		"Gamma":          reflect.ValueOf(tmath.Gamma),
		"J0":             reflect.ValueOf(tmath.J0),
		"J1":             reflect.ValueOf(tmath.J1),
		"Log":            reflect.ValueOf(tmath.Log),
		"Log10":          reflect.ValueOf(tmath.Log10),
		"Log1p":          reflect.ValueOf(tmath.Log1p),
		"Log2":           reflect.ValueOf(tmath.Log2),
		"Logb":           reflect.ValueOf(tmath.Logb),
		"Mul":            reflect.ValueOf(tmath.Mul),
		"MulScalar":      reflect.ValueOf(tmath.MulScalar),
		"MulSubSpace":    reflect.ValueOf(tmath.MulSubSpace),
		"Round":          reflect.ValueOf(tmath.Round),
		"RoundToEven":    reflect.ValueOf(tmath.RoundToEven),
		"Sin":            reflect.ValueOf(tmath.Sin),
		"Sinh":           reflect.ValueOf(tmath.Sinh),
		"Sqrt":           reflect.ValueOf(tmath.Sqrt),
		"Sub":            reflect.ValueOf(tmath.Sub),
		"SubScalar":      reflect.ValueOf(tmath.SubScalar),
		"SubSubSpace":    reflect.ValueOf(tmath.SubSubSpace),
		"Tan":            reflect.ValueOf(tmath.Tan),
		"Tanh":           reflect.ValueOf(tmath.Tanh),
		"Trunc":          reflect.ValueOf(tmath.Trunc),
		"UnitNorm":       reflect.ValueOf(tmath.UnitNorm),
		"Y0":             reflect.ValueOf(tmath.Y0),
		"Y1":             reflect.ValueOf(tmath.Y1),
		"ZScore":         reflect.ValueOf(tmath.ZScore),
	}
}
