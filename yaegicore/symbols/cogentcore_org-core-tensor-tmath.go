// Code generated by 'yaegi extract cogentcore.org/core/tensor/tmath'. DO NOT EDIT.

package symbols

import (
	"cogentcore.org/core/tensor/tmath"
	"reflect"
)

func init() {
	Symbols["cogentcore.org/core/tensor/tmath/tmath"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"Abs":         reflect.ValueOf(tmath.Abs),
		"Acos":        reflect.ValueOf(tmath.Acos),
		"Acosh":       reflect.ValueOf(tmath.Acosh),
		"Add":         reflect.ValueOf(tmath.Add),
		"Asin":        reflect.ValueOf(tmath.Asin),
		"Asinh":       reflect.ValueOf(tmath.Asinh),
		"Atan":        reflect.ValueOf(tmath.Atan),
		"Atanh":       reflect.ValueOf(tmath.Atanh),
		"Cbrt":        reflect.ValueOf(tmath.Cbrt),
		"Ceil":        reflect.ValueOf(tmath.Ceil),
		"Cos":         reflect.ValueOf(tmath.Cos),
		"Cosh":        reflect.ValueOf(tmath.Cosh),
		"Div":         reflect.ValueOf(tmath.Div),
		"Erf":         reflect.ValueOf(tmath.Erf),
		"Erfc":        reflect.ValueOf(tmath.Erfc),
		"Erfcinv":     reflect.ValueOf(tmath.Erfcinv),
		"Erfinv":      reflect.ValueOf(tmath.Erfinv),
		"Exp":         reflect.ValueOf(tmath.Exp),
		"Exp2":        reflect.ValueOf(tmath.Exp2),
		"Expm1":       reflect.ValueOf(tmath.Expm1),
		"Floor":       reflect.ValueOf(tmath.Floor),
		"Gamma":       reflect.ValueOf(tmath.Gamma),
		"J0":          reflect.ValueOf(tmath.J0),
		"J1":          reflect.ValueOf(tmath.J1),
		"Log":         reflect.ValueOf(tmath.Log),
		"Log10":       reflect.ValueOf(tmath.Log10),
		"Log1p":       reflect.ValueOf(tmath.Log1p),
		"Log2":        reflect.ValueOf(tmath.Log2),
		"Logb":        reflect.ValueOf(tmath.Logb),
		"Mul":         reflect.ValueOf(tmath.Mul),
		"Round":       reflect.ValueOf(tmath.Round),
		"RoundToEven": reflect.ValueOf(tmath.RoundToEven),
		"Sin":         reflect.ValueOf(tmath.Sin),
		"Sinh":        reflect.ValueOf(tmath.Sinh),
		"Sqrt":        reflect.ValueOf(tmath.Sqrt),
		"Sub":         reflect.ValueOf(tmath.Sub),
		"Tan":         reflect.ValueOf(tmath.Tan),
		"Tanh":        reflect.ValueOf(tmath.Tanh),
		"Trunc":       reflect.ValueOf(tmath.Trunc),
		"Y0":          reflect.ValueOf(tmath.Y0),
		"Y1":          reflect.ValueOf(tmath.Y1),
	}
}
