// Code generated by 'yaegi extract cogentcore.org/core/tensor'. DO NOT EDIT.

package symbols

import (
	"cogentcore.org/core/base/metadata"
	"cogentcore.org/core/tensor"
	"gonum.org/v1/gonum/mat"
	"reflect"
)

func init() {
	Symbols["cogentcore.org/core/tensor/tensor"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"AddFunc":               reflect.ValueOf(tensor.AddFunc),
		"AddShapes":             reflect.ValueOf(tensor.AddShapes),
		"AsFloat32":             reflect.ValueOf(tensor.AsFloat32),
		"AsFloat64":             reflect.ValueOf(tensor.AsFloat64),
		"Ascending":             reflect.ValueOf(tensor.Ascending),
		"BoolToFloat64":         reflect.ValueOf(tensor.BoolToFloat64),
		"BoolToInt":             reflect.ValueOf(tensor.BoolToInt),
		"Calc":                  reflect.ValueOf(tensor.Calc),
		"Call":                  reflect.ValueOf(tensor.Call),
		"CallOut":               reflect.ValueOf(tensor.CallOut),
		"CallString":            reflect.ValueOf(tensor.CallString),
		"ColMajorStrides":       reflect.ValueOf(tensor.ColMajorStrides),
		"Comma":                 reflect.ValueOf(tensor.Comma),
		"Contains":              reflect.ValueOf(tensor.Contains),
		"CopyDense":             reflect.ValueOf(tensor.CopyDense),
		"DefaultNumThreads":     reflect.ValueOf(tensor.DefaultNumThreads),
		"DelimsN":               reflect.ValueOf(tensor.DelimsN),
		"DelimsValues":          reflect.ValueOf(tensor.DelimsValues),
		"Descending":            reflect.ValueOf(tensor.Descending),
		"Detect":                reflect.ValueOf(tensor.Detect),
		"Equals":                reflect.ValueOf(tensor.Equals),
		"Exclude":               reflect.ValueOf(tensor.Exclude),
		"Float64ToBool":         reflect.ValueOf(tensor.Float64ToBool),
		"Float64ToString":       reflect.ValueOf(tensor.Float64ToString),
		"Funcs":                 reflect.ValueOf(&tensor.Funcs).Elem(),
		"GetPrecision":          reflect.ValueOf(tensor.GetPrecision),
		"IgnoreCase":            reflect.ValueOf(tensor.IgnoreCase),
		"Include":               reflect.ValueOf(tensor.Include),
		"IntToBool":             reflect.ValueOf(tensor.IntToBool),
		"NFirstLen":             reflect.ValueOf(tensor.NFirstLen),
		"NFirstRows":            reflect.ValueOf(tensor.NFirstRows),
		"NMinLen":               reflect.ValueOf(tensor.NMinLen),
		"New1DViewOf":           reflect.ValueOf(tensor.New1DViewOf),
		"NewBits":               reflect.ValueOf(tensor.NewBits),
		"NewBitsShape":          reflect.ValueOf(tensor.NewBitsShape),
		"NewByte":               reflect.ValueOf(tensor.NewByte),
		"NewFloat32":            reflect.ValueOf(tensor.NewFloat32),
		"NewFloat64":            reflect.ValueOf(tensor.NewFloat64),
		"NewFloat64Indexed":     reflect.ValueOf(tensor.NewFloat64Indexed),
		"NewFloat64Scalar":      reflect.ValueOf(tensor.NewFloat64Scalar),
		"NewFunc":               reflect.ValueOf(tensor.NewFunc),
		"NewIndexed":            reflect.ValueOf(tensor.NewIndexed),
		"NewInt":                reflect.ValueOf(tensor.NewInt),
		"NewInt32":              reflect.ValueOf(tensor.NewInt32),
		"NewOfType":             reflect.ValueOf(tensor.NewOfType),
		"NewShape":              reflect.ValueOf(tensor.NewShape),
		"NewString":             reflect.ValueOf(tensor.NewString),
		"NewStringFromSlice":    reflect.ValueOf(tensor.NewStringFromSlice),
		"NewStringShape":        reflect.ValueOf(tensor.NewStringShape),
		"NumThreads":            reflect.ValueOf(&tensor.NumThreads).Elem(),
		"OddColumn":             reflect.ValueOf(tensor.OddColumn),
		"OddRow":                reflect.ValueOf(tensor.OddRow),
		"OpenCSV":               reflect.ValueOf(tensor.OpenCSV),
		"Projection2DCoords":    reflect.ValueOf(tensor.Projection2DCoords),
		"Projection2DIndex":     reflect.ValueOf(tensor.Projection2DIndex),
		"Projection2DSet":       reflect.ValueOf(tensor.Projection2DSet),
		"Projection2DSetString": reflect.ValueOf(tensor.Projection2DSetString),
		"Projection2DShape":     reflect.ValueOf(tensor.Projection2DShape),
		"Projection2DString":    reflect.ValueOf(tensor.Projection2DString),
		"Projection2DValue":     reflect.ValueOf(tensor.Projection2DValue),
		"ReadCSV":               reflect.ValueOf(tensor.ReadCSV),
		"RowCellSplit":          reflect.ValueOf(tensor.RowCellSplit),
		"RowMajorStrides":       reflect.ValueOf(tensor.RowMajorStrides),
		"SaveCSV":               reflect.ValueOf(tensor.SaveCSV),
		"SetCalcFunc":           reflect.ValueOf(tensor.SetCalcFunc),
		"SetPrecision":          reflect.ValueOf(tensor.SetPrecision),
		"Slice":                 reflect.ValueOf(tensor.Slice),
		"SliceSet":              reflect.ValueOf(tensor.SliceSet),
		"SliceSize":             reflect.ValueOf(tensor.SliceSize),
		"Space":                 reflect.ValueOf(tensor.Space),
		"Stable":                reflect.ValueOf(tensor.Stable),
		"StringFirstArg":        reflect.ValueOf(tensor.StringFirstArg),
		"StringToFloat64":       reflect.ValueOf(tensor.StringToFloat64),
		"Tab":                   reflect.ValueOf(tensor.Tab),
		"ThreadingThreshold":    reflect.ValueOf(&tensor.ThreadingThreshold).Elem(),
		"Unstable":              reflect.ValueOf(tensor.Unstable),
		"UseCase":               reflect.ValueOf(tensor.UseCase),
		"Vectorize":             reflect.ValueOf(tensor.Vectorize),
		"VectorizeOnThreads":    reflect.ValueOf(tensor.VectorizeOnThreads),
		"VectorizeThreaded":     reflect.ValueOf(tensor.VectorizeThreaded),
		"WriteCSV":              reflect.ValueOf(tensor.WriteCSV),

		// type definitions
		"Bits":       reflect.ValueOf((*tensor.Bits)(nil)),
		"Delims":     reflect.ValueOf((*tensor.Delims)(nil)),
		"FilterFunc": reflect.ValueOf((*tensor.FilterFunc)(nil)),
		"Func":       reflect.ValueOf((*tensor.Func)(nil)),
		"Indexed":    reflect.ValueOf((*tensor.Indexed)(nil)),
		"Range":      reflect.ValueOf((*tensor.Range)(nil)),
		"Shape":      reflect.ValueOf((*tensor.Shape)(nil)),
		"String":     reflect.ValueOf((*tensor.String)(nil)),
		"Tensor":     reflect.ValueOf((*tensor.Tensor)(nil)),

		// interface wrapper definitions
		"_Tensor": reflect.ValueOf((*_cogentcore_org_core_tensor_Tensor)(nil)),
	}
}

// _cogentcore_org_core_tensor_Tensor is an interface wrapper for Tensor type
type _cogentcore_org_core_tensor_Tensor struct {
	IValue            interface{}
	WAppendFrom       func(from tensor.Tensor) error
	WAt               func(i int, j int) float64
	WBytes            func() []byte
	WClone            func() tensor.Tensor
	WCopyCellsFrom    func(from tensor.Tensor, to int, start int, n int)
	WCopyFrom         func(from tensor.Tensor)
	WDataType         func() reflect.Kind
	WDimSize          func(dim int) int
	WDims             func() (r int, c int)
	WFloat            func(i ...int) float64
	WFloat1D          func(i int) float64
	WFloatRowCell     func(row int, cell int) float64
	WInt              func(i ...int) int
	WInt1D            func(i int) int
	WIntRowCell       func(row int, cell int) int
	WIsString         func() bool
	WLabel            func() string
	WLen              func() int
	WMetadata         func() *metadata.Data
	WNumDims          func() int
	WRange            func() (min float64, max float64, minIndex int, maxIndex int)
	WRowCellSize      func() (rows int, cells int)
	WRowTensor        func(row int) tensor.Tensor
	WSetFloat         func(val float64, i ...int)
	WSetFloat1D       func(val float64, i int)
	WSetFloatRowCell  func(val float64, row int, cell int)
	WSetInt           func(val int, i ...int)
	WSetInt1D         func(val int, i int)
	WSetIntRowCell    func(val int, row int, cell int)
	WSetNames         func(names ...string)
	WSetNumRows       func(rows int)
	WSetRowTensor     func(val tensor.Tensor, row int)
	WSetShape         func(sizes ...int)
	WSetShapeFrom     func(from tensor.Tensor)
	WSetString        func(val string, i ...int)
	WSetString1D      func(val string, i int)
	WSetStringRowCell func(val string, row int, cell int)
	WSetZeros         func()
	WShape            func() *tensor.Shape
	WSizeof           func() int64
	WString           func() string
	WString1D         func(i int) string
	WStringRowCell    func(row int, cell int) string
	WStringValue      func(i ...int) string
	WSubSpace         func(offs ...int) tensor.Tensor
	WT                func() mat.Matrix
	WView             func() tensor.Tensor
}

func (W _cogentcore_org_core_tensor_Tensor) AppendFrom(from tensor.Tensor) error {
	return W.WAppendFrom(from)
}
func (W _cogentcore_org_core_tensor_Tensor) At(i int, j int) float64 { return W.WAt(i, j) }
func (W _cogentcore_org_core_tensor_Tensor) Bytes() []byte           { return W.WBytes() }
func (W _cogentcore_org_core_tensor_Tensor) Clone() tensor.Tensor    { return W.WClone() }
func (W _cogentcore_org_core_tensor_Tensor) CopyCellsFrom(from tensor.Tensor, to int, start int, n int) {
	W.WCopyCellsFrom(from, to, start, n)
}
func (W _cogentcore_org_core_tensor_Tensor) CopyFrom(from tensor.Tensor) { W.WCopyFrom(from) }
func (W _cogentcore_org_core_tensor_Tensor) DataType() reflect.Kind      { return W.WDataType() }
func (W _cogentcore_org_core_tensor_Tensor) DimSize(dim int) int         { return W.WDimSize(dim) }
func (W _cogentcore_org_core_tensor_Tensor) Dims() (r int, c int)        { return W.WDims() }
func (W _cogentcore_org_core_tensor_Tensor) Float(i ...int) float64      { return W.WFloat(i...) }
func (W _cogentcore_org_core_tensor_Tensor) Float1D(i int) float64       { return W.WFloat1D(i) }
func (W _cogentcore_org_core_tensor_Tensor) FloatRowCell(row int, cell int) float64 {
	return W.WFloatRowCell(row, cell)
}
func (W _cogentcore_org_core_tensor_Tensor) Int(i ...int) int { return W.WInt(i...) }
func (W _cogentcore_org_core_tensor_Tensor) Int1D(i int) int  { return W.WInt1D(i) }
func (W _cogentcore_org_core_tensor_Tensor) IntRowCell(row int, cell int) int {
	return W.WIntRowCell(row, cell)
}
func (W _cogentcore_org_core_tensor_Tensor) IsString() bool           { return W.WIsString() }
func (W _cogentcore_org_core_tensor_Tensor) Label() string            { return W.WLabel() }
func (W _cogentcore_org_core_tensor_Tensor) Len() int                 { return W.WLen() }
func (W _cogentcore_org_core_tensor_Tensor) Metadata() *metadata.Data { return W.WMetadata() }
func (W _cogentcore_org_core_tensor_Tensor) NumDims() int             { return W.WNumDims() }
func (W _cogentcore_org_core_tensor_Tensor) Range() (min float64, max float64, minIndex int, maxIndex int) {
	return W.WRange()
}
func (W _cogentcore_org_core_tensor_Tensor) RowCellSize() (rows int, cells int) {
	return W.WRowCellSize()
}
func (W _cogentcore_org_core_tensor_Tensor) RowTensor(row int) tensor.Tensor {
	return W.WRowTensor(row)
}
func (W _cogentcore_org_core_tensor_Tensor) SetFloat(val float64, i ...int) { W.WSetFloat(val, i...) }
func (W _cogentcore_org_core_tensor_Tensor) SetFloat1D(val float64, i int)  { W.WSetFloat1D(val, i) }
func (W _cogentcore_org_core_tensor_Tensor) SetFloatRowCell(val float64, row int, cell int) {
	W.WSetFloatRowCell(val, row, cell)
}
func (W _cogentcore_org_core_tensor_Tensor) SetInt(val int, i ...int) { W.WSetInt(val, i...) }
func (W _cogentcore_org_core_tensor_Tensor) SetInt1D(val int, i int)  { W.WSetInt1D(val, i) }
func (W _cogentcore_org_core_tensor_Tensor) SetIntRowCell(val int, row int, cell int) {
	W.WSetIntRowCell(val, row, cell)
}
func (W _cogentcore_org_core_tensor_Tensor) SetNames(names ...string) { W.WSetNames(names...) }
func (W _cogentcore_org_core_tensor_Tensor) SetNumRows(rows int)      { W.WSetNumRows(rows) }
func (W _cogentcore_org_core_tensor_Tensor) SetRowTensor(val tensor.Tensor, row int) {
	W.WSetRowTensor(val, row)
}
func (W _cogentcore_org_core_tensor_Tensor) SetShape(sizes ...int)           { W.WSetShape(sizes...) }
func (W _cogentcore_org_core_tensor_Tensor) SetShapeFrom(from tensor.Tensor) { W.WSetShapeFrom(from) }
func (W _cogentcore_org_core_tensor_Tensor) SetString(val string, i ...int)  { W.WSetString(val, i...) }
func (W _cogentcore_org_core_tensor_Tensor) SetString1D(val string, i int)   { W.WSetString1D(val, i) }
func (W _cogentcore_org_core_tensor_Tensor) SetStringRowCell(val string, row int, cell int) {
	W.WSetStringRowCell(val, row, cell)
}
func (W _cogentcore_org_core_tensor_Tensor) SetZeros()            { W.WSetZeros() }
func (W _cogentcore_org_core_tensor_Tensor) Shape() *tensor.Shape { return W.WShape() }
func (W _cogentcore_org_core_tensor_Tensor) Sizeof() int64        { return W.WSizeof() }
func (W _cogentcore_org_core_tensor_Tensor) String() string {
	if W.WString == nil {
		return ""
	}
	return W.WString()
}
func (W _cogentcore_org_core_tensor_Tensor) String1D(i int) string { return W.WString1D(i) }
func (W _cogentcore_org_core_tensor_Tensor) StringRowCell(row int, cell int) string {
	return W.WStringRowCell(row, cell)
}
func (W _cogentcore_org_core_tensor_Tensor) StringValue(i ...int) string { return W.WStringValue(i...) }
func (W _cogentcore_org_core_tensor_Tensor) SubSpace(offs ...int) tensor.Tensor {
	return W.WSubSpace(offs...)
}
func (W _cogentcore_org_core_tensor_Tensor) T() mat.Matrix       { return W.WT() }
func (W _cogentcore_org_core_tensor_Tensor) View() tensor.Tensor { return W.WView() }
